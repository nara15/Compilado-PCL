/* The following code was generated by JFlex 1.6.1 */

package logica.scanner;

import java_cup.runtime.*;
import logica.parser.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>M:/Github/Compilador-PCL/COMPILADOR-PCL/PARSER/Parser_PCL/src/logica/scanner/pcl_rules.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\2\1\61\1\61\1\3\22\0\1\22\1\0\1\16"+
    "\1\17\4\0\1\4\1\6\1\5\1\54\1\52\1\12\1\13\1\1"+
    "\12\15\1\21\1\53\1\57\1\56\1\55\2\0\1\24\1\31\1\37"+
    "\1\26\1\14\1\44\1\32\1\41\1\33\1\20\1\50\1\35\1\46"+
    "\1\25\1\34\1\47\1\20\1\27\1\40\1\36\1\45\1\42\1\43"+
    "\1\51\1\30\1\20\1\60\1\0\1\60\1\0\1\20\1\0\32\20"+
    "\1\7\1\23\1\10\7\0\1\61\u05da\0\12\11\206\0\12\11\306\0"+
    "\12\11\u019c\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0"+
    "\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0"+
    "\12\11\140\0\12\11\166\0\12\11\106\0\12\11\u0116\0\12\11\106\0"+
    "\12\11\u0746\0\12\11\46\0\12\11\u012c\0\12\11\200\0\12\11\246\0"+
    "\12\11\6\0\12\11\266\0\12\11\126\0\12\11\206\0\12\11\6\0"+
    "\12\11\u03ce\0\1\61\1\61\u85f6\0\12\11\u02a6\0\12\11\46\0\12\11"+
    "\306\0\12\11\26\0\12\11\126\0\12\11\u0196\0\12\11\u5316\0\12\11"+
    "\u0586\0\12\11\u0bbc\0\12\11\200\0\12\11\74\0\12\11\220\0\12\11"+
    "\u0116\0\12\11\u01d6\0\12\11\u0176\0\12\11\146\0\12\11\u0216\0\12\11"+
    "\u5176\0\12\11\346\0\12\11\u6c74\0\62\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\2\1\1\1\4\2\2"+
    "\1\5\1\4\2\1\1\5\1\6\1\3\23\5\1\7"+
    "\1\10\3\2\1\11\2\0\1\12\2\0\1\13\3\5"+
    "\2\14\1\15\2\4\5\5\1\16\5\5\2\16\24\5"+
    "\2\11\2\17\1\0\1\4\1\0\1\20\1\12\1\5"+
    "\1\21\1\5\1\14\1\20\1\0\1\4\1\15\1\0"+
    "\1\16\11\5\1\22\7\5\1\23\4\5\1\16\4\5"+
    "\2\0\1\17\2\0\1\17\2\0\1\11\1\24\1\5"+
    "\1\16\1\14\1\20\2\5\1\25\10\5\1\26\10\5"+
    "\1\17\1\0\1\17\2\0\1\11\1\17\3\0\1\11"+
    "\1\0\1\4\1\5\1\14\1\20\1\16\3\5\1\27"+
    "\11\5\5\0\1\11\1\0\1\11\1\0\1\4\1\5"+
    "\1\14\1\20\1\16\2\5\1\30\5\5\2\11\1\31"+
    "\1\5\1\14\1\20\1\25\1\32\1\5\1\16\1\5"+
    "\1\33\2\5\1\14\1\20\1\34\1\16\2\5\1\14"+
    "\1\20\1\16\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\5"+
    "\1\14\1\20\1\5\1\14\1\20\1\5\1\14\1\20"+
    "\1\5\1\14\1\20\1\5\1\14\1\20\1\5\1\14"+
    "\1\20\1\5\1\14\1\20\1\5\1\14\1\20\1\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[603];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\62\0\226\0\310\0\62\0\372"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\310\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6"+
    "\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546"+
    "\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\62\0\62\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0190\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0258\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0834\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\62\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10cc\0\u0258\0\u10fe\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u092e\0\62\0\62\0\u0960\0\u10fe\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u10fe\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u10fe\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u1004\0\u16da\0\u170c\0\u173e\0\u1770\0\u1036\0\u17a2"+
    "\0\u073a\0\u17d4\0\u1806\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce"+
    "\0\u1806\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u1806\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a"+
    "\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u16da\0\u1cb6\0\u16a8"+
    "\0\u1ce8\0\u1d1a\0\u1770\0\u1d4c\0\u173e\0\u1d7e\0\u1db0\0\u1de2"+
    "\0\u1e14\0\u1e46\0\u1de2\0\u1e78\0\u1eaa\0\u1edc\0\u1de2\0\u1f0e"+
    "\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e"+
    "\0\u20d0\0\u1c20\0\u2102\0\u1c84\0\u2134\0\u1c52\0\u1ce8\0\u1d1a"+
    "\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u21ca\0\u2260\0\u2292"+
    "\0\u21ca\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u20d0\0\u1c84"+
    "\0\u2166\0\u23be\0\u23f0\0\u2422\0\u23be\0\u23be\0\u2454\0\u23be"+
    "\0\u2486\0\u23be\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u24ea\0\u24ea"+
    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u25b2\0\u2648\0\u267a\0\u26ac"+
    "\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc"+
    "\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c"+
    "\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec"+
    "\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c"+
    "\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c"+
    "\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c"+
    "\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c"+
    "\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a\0\u34bc"+
    "\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c"+
    "\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778\0\u37aa\0\u37dc"+
    "\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c"+
    "\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc"+
    "\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c"+
    "\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c"+
    "\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac"+
    "\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c"+
    "\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc"+
    "\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c"+
    "\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec"+
    "\0\u461e\0\u4650\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u474a\0\u477c"+
    "\0\u47ae\0\u47e0\0\u4812\0\u4844\0\u4876\0\u48a8\0\u48da\0\u490c"+
    "\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c"+
    "\0\u4ace\0\u4b00\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c"+
    "\0\u4c5e\0\u4c90\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a\0\u4dbc"+
    "\0\u4dee\0\u4e20\0\u4e52\0\u4e84\0\u4eb6\0\u4ee8\0\u4f1a\0\u4f4c"+
    "\0\u4f7e\0\u4fb0\0\u4fe2\0\u5014\0\u5046\0\u5078\0\u50aa\0\u50dc"+
    "\0\u510e\0\u5140\0\u5172\0\u51a4\0\u51d6\0\u5208\0\u523a\0\u526c"+
    "\0\u529e\0\u52d0\0\u5302\0\u5334\0\u5366\0\u5398\0\u53ca\0\u53fc"+
    "\0\u542e\0\u5460\0\u5492\0\u54c4\0\u54f6\0\u5528\0\u555a\0\u558c"+
    "\0\u55be\0\u55f0\0\u5622\0\u5654\0\u5686\0\u56b8\0\u56ea\0\u571c"+
    "\0\u574e\0\u5780\0\u57b2\0\u57e4\0\u5816\0\u5848\0\u587a\0\u58ac"+
    "\0\u58de\0\u5910\0\u5942\0\u5974\0\u59a6\0\u59d8\0\u5a0a\0\u5a3c"+
    "\0\u5a6e\0\u5aa0\0\u5ad2\0\u5b04\0\u5b36\0\u5b68\0\u5b9a\0\u5bcc"+
    "\0\u5bfe\0\u5c30\0\u5c62\0\u5c94\0\u5cc6\0\u5cf8\0\u5d2a\0\u5d5c"+
    "\0\u5d8e\0\u5dc0\0\u5df2\0\u5e24\0\u5e56\0\u5e88\0\u5eba\0\u5eec"+
    "\0\u5f1e\0\u5f50\0\u5f82\0\u5fb4\0\u5fe6\0\u6018\0\u604a\0\u607c"+
    "\0\u60ae\0\u60e0\0\u6112\0\u6144\0\u6176\0\u61a8\0\u61da\0\u620c"+
    "\0\u623e\0\u6270\0\u62a2\0\u62d4\0\u6306\0\u6338\0\u636a\0\u639c"+
    "\0\u63ce\0\u6400\0\u6432\0\u6464\0\u6496\0\u64c8\0\u64fa\0\u652c"+
    "\0\u655e\0\u6590\0\u65c2\0\u65f4\0\u6626\0\u6658\0\u668a\0\u66bc"+
    "\0\u66ee\0\u6720\0\u6752\0\u6784\0\u67b6\0\u67e8\0\u681a\0\u684c"+
    "\0\u687e\0\u68b0\0\u68e2\0\u6914\0\u6946\0\u6978\0\u69aa\0\u69dc"+
    "\0\u6a0e\0\u6a40\0\u6a72\0\u6aa4\0\u6ad6\0\u6b08\0\u6b3a\0\62"+
    "\0\u6b6c\0\u6b9e\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[603];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\4\1\22\1\23\1\24\1\25\1\26\1\20"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\20\1\37\1\40\1\41\1\42\1\43\1\44\1\20"+
    "\1\45\1\46\1\47\1\50\1\51\1\7\1\52\1\7"+
    "\64\0\1\53\54\0\1\7\10\0\1\54\132\0\1\7"+
    "\3\0\10\55\1\0\51\55\11\0\1\11\1\0\1\56"+
    "\1\57\1\11\55\0\1\60\1\7\2\0\1\60\40\0"+
    "\1\7\14\0\1\61\3\0\1\61\60\0\2\62\2\0"+
    "\1\62\2\0\2\62\1\63\7\62\1\64\14\62\21\0"+
    "\1\11\1\0\1\56\1\65\1\15\2\0\2\66\1\0"+
    "\27\66\10\0\16\67\1\70\43\67\11\0\1\71\3\0"+
    "\1\71\60\0\2\62\2\0\1\62\2\0\27\62\24\0"+
    "\2\62\2\0\1\62\2\0\2\62\1\72\1\62\1\73"+
    "\22\62\24\0\2\62\2\0\1\62\2\0\10\62\1\74"+
    "\1\75\15\62\24\0\2\62\2\0\1\62\2\0\10\62"+
    "\1\76\1\77\15\62\24\0\1\100\1\62\2\0\1\62"+
    "\2\0\27\62\24\0\1\101\1\62\2\0\1\62\2\0"+
    "\5\62\1\102\3\62\1\103\15\62\24\0\2\62\2\0"+
    "\1\62\2\0\11\62\1\104\15\62\24\0\2\62\2\0"+
    "\1\62\2\0\2\62\1\105\16\62\1\106\5\62\24\0"+
    "\2\62\2\0\1\62\2\0\4\62\1\106\14\62\1\106"+
    "\5\62\24\0\2\62\2\0\1\62\2\0\1\62\1\107"+
    "\7\62\1\110\15\62\24\0\2\62\2\0\1\62\2\0"+
    "\4\62\1\111\1\112\3\62\1\106\4\62\1\113\10\62"+
    "\24\0\2\62\2\0\1\62\2\0\1\62\1\64\7\62"+
    "\1\114\4\62\1\115\10\62\24\0\1\75\1\62\2\0"+
    "\1\62\2\0\13\62\1\116\2\62\1\117\10\62\24\0"+
    "\2\62\2\0\1\62\2\0\1\62\1\120\25\62\24\0"+
    "\2\62\2\0\1\62\2\0\4\62\1\121\3\62\1\122"+
    "\5\62\1\123\10\62\24\0\2\62\2\0\1\62\2\0"+
    "\1\62\1\124\7\62\1\125\10\62\1\126\4\62\24\0"+
    "\2\62\2\0\1\62\2\0\2\62\1\127\24\62\24\0"+
    "\2\62\2\0\1\62\2\0\11\62\1\72\15\62\24\0"+
    "\2\62\2\0\1\62\2\0\1\62\1\130\2\62\1\131"+
    "\22\62\24\0\2\62\2\0\1\62\2\0\11\62\1\132"+
    "\15\62\64\0\1\7\1\0\1\7\60\0\1\6\1\7"+
    "\60\0\2\7\1\6\2\0\2\53\1\133\1\134\56\53"+
    "\2\54\1\135\1\136\1\54\1\137\54\54\10\55\1\133"+
    "\51\55\11\0\1\140\3\0\1\140\56\0\1\141\2\0"+
    "\1\142\55\0\1\60\1\0\1\143\1\0\1\60\60\0"+
    "\2\144\2\0\1\144\2\0\27\144\24\0\2\144\2\0"+
    "\1\144\2\0\3\144\1\145\23\144\24\0\2\144\2\0"+
    "\1\144\2\0\15\144\1\146\11\144\22\0\1\141\1\0"+
    "\1\147\1\150\2\0\2\147\1\0\27\147\24\0\2\147"+
    "\2\0\2\147\1\0\27\147\10\0\16\151\1\152\43\151"+
    "\16\153\1\154\43\153\14\0\2\144\2\0\1\144\2\0"+
    "\3\144\1\155\23\144\24\0\2\144\2\0\1\144\2\0"+
    "\4\144\1\156\22\144\24\0\2\144\2\0\1\144\2\0"+
    "\12\144\1\155\14\144\24\0\2\144\2\0\1\144\2\0"+
    "\13\144\1\155\13\144\24\0\2\144\2\0\1\144\2\0"+
    "\17\144\1\155\7\144\24\0\2\144\2\0\1\144\2\0"+
    "\20\144\1\157\6\144\24\0\2\144\2\0\1\144\2\0"+
    "\1\144\1\160\12\144\1\161\7\144\1\162\2\144\24\0"+
    "\2\144\2\0\1\144\2\0\7\144\1\163\17\144\24\0"+
    "\2\144\2\0\1\144\2\0\13\144\1\146\13\144\24\0"+
    "\2\144\2\0\1\144\2\0\11\144\1\164\15\144\24\0"+
    "\2\144\2\0\1\144\2\0\13\144\1\165\13\144\24\0"+
    "\2\144\2\0\1\144\2\0\12\144\1\166\1\167\13\144"+
    "\24\0\2\144\2\0\1\144\2\0\6\144\1\170\20\144"+
    "\24\0\2\144\2\0\1\144\2\0\2\144\1\171\24\144"+
    "\24\0\2\144\2\0\1\144\2\0\22\144\1\146\4\144"+
    "\24\0\2\144\2\0\1\144\2\0\24\144\1\146\2\144"+
    "\24\0\1\172\1\144\2\0\1\144\2\0\27\144\24\0"+
    "\2\144\2\0\1\144\2\0\2\144\1\173\24\144\24\0"+
    "\2\144\2\0\1\144\2\0\1\144\1\174\25\144\24\0"+
    "\2\144\2\0\1\144\2\0\4\144\1\175\22\144\24\0"+
    "\2\144\2\0\1\144\2\0\11\144\1\176\15\144\24\0"+
    "\2\144\2\0\1\144\2\0\4\144\1\177\22\144\24\0"+
    "\2\144\2\0\1\144\2\0\10\144\1\200\16\144\24\0"+
    "\2\144\2\0\1\144\2\0\13\144\1\201\13\144\24\0"+
    "\2\144\2\0\1\144\2\0\10\144\1\202\16\144\24\0"+
    "\2\144\2\0\1\144\2\0\12\144\1\203\14\144\24\0"+
    "\2\144\2\0\1\144\2\0\4\144\1\204\22\144\24\0"+
    "\2\144\2\0\1\144\2\0\2\144\1\205\24\144\24\0"+
    "\2\144\2\0\1\144\2\0\13\144\1\206\13\144\24\0"+
    "\2\144\2\0\1\144\2\0\14\144\1\207\12\144\24\0"+
    "\2\144\2\0\1\144\2\0\11\144\1\210\15\144\24\0"+
    "\2\144\2\0\1\144\2\0\4\144\1\155\22\144\12\0"+
    "\1\133\57\0\2\211\1\212\1\213\1\211\1\214\54\211"+
    "\2\215\1\216\1\217\1\215\1\220\54\215\2\54\1\135"+
    "\1\136\1\54\1\137\1\221\53\54\11\0\1\140\2\0"+
    "\1\222\1\140\61\0\1\142\60\0\2\223\2\0\1\223"+
    "\2\0\27\223\24\0\1\224\1\223\2\0\1\223\2\0"+
    "\27\223\24\0\2\225\2\0\2\225\1\0\27\225\24\0"+
    "\1\225\1\226\2\0\2\225\1\0\27\225\24\0\2\223"+
    "\2\0\1\223\2\0\1\223\1\227\25\223\24\0\2\223"+
    "\2\0\1\223\2\0\2\223\1\230\24\223\24\0\2\223"+
    "\2\0\1\223\2\0\3\223\1\224\6\223\1\231\14\223"+
    "\24\0\2\223\2\0\1\223\2\0\11\223\1\232\15\223"+
    "\24\0\1\233\1\223\2\0\1\223\2\0\27\223\24\0"+
    "\2\223\2\0\1\223\2\0\10\223\1\234\16\223\24\0"+
    "\2\223\2\0\1\223\2\0\12\223\1\235\14\223\24\0"+
    "\2\223\2\0\1\223\2\0\11\223\1\224\15\223\24\0"+
    "\2\223\2\0\1\223\2\0\10\223\1\236\16\223\24\0"+
    "\1\237\1\223\2\0\1\223\2\0\27\223\24\0\2\223"+
    "\2\0\1\223\2\0\7\223\1\240\17\223\24\0\2\223"+
    "\2\0\1\223\2\0\2\223\1\224\24\223\24\0\2\223"+
    "\2\0\1\223\2\0\15\223\1\241\11\223\24\0\2\223"+
    "\2\0\1\223\2\0\4\223\1\242\22\223\24\0\2\223"+
    "\2\0\1\223\2\0\10\223\1\243\16\223\24\0\2\223"+
    "\2\0\1\223\2\0\4\223\1\244\22\223\24\0\2\223"+
    "\2\0\1\223\2\0\13\223\1\245\13\223\24\0\2\223"+
    "\2\0\1\223\2\0\16\223\1\224\10\223\24\0\2\223"+
    "\2\0\1\223\2\0\12\223\1\245\14\223\24\0\2\223"+
    "\2\0\1\223\2\0\15\223\1\245\11\223\24\0\2\223"+
    "\2\0\1\223\2\0\20\223\1\246\6\223\24\0\2\223"+
    "\2\0\1\223\2\0\14\223\1\247\12\223\24\0\2\223"+
    "\2\0\1\223\2\0\10\223\1\237\16\223\24\0\2\223"+
    "\2\0\1\223\2\0\25\223\1\250\1\223\24\0\2\223"+
    "\2\0\1\223\2\0\7\223\1\251\4\223\1\252\12\223"+
    "\10\0\2\211\1\212\1\253\1\211\1\214\54\211\2\254"+
    "\1\255\1\256\1\254\1\257\54\254\2\211\1\212\1\253"+
    "\1\211\1\214\1\260\53\211\2\215\1\261\1\217\1\215"+
    "\1\220\54\215\2\262\1\263\1\255\1\262\1\264\54\262"+
    "\2\215\1\261\1\217\1\215\1\220\1\265\53\215\12\0"+
    "\1\266\2\0\1\267\60\0\2\270\2\0\1\270\2\0"+
    "\27\270\24\0\2\271\2\0\2\271\1\0\27\271\24\0"+
    "\1\271\1\272\2\0\2\271\1\0\27\271\24\0\2\270"+
    "\2\0\1\270\2\0\5\270\1\273\21\270\24\0\2\270"+
    "\2\0\1\270\2\0\13\270\1\274\13\270\24\0\2\270"+
    "\2\0\1\270\2\0\4\270\1\275\22\270\24\0\2\270"+
    "\2\0\1\270\2\0\1\270\1\276\25\270\24\0\2\270"+
    "\2\0\1\270\2\0\2\270\1\277\24\270\24\0\1\300"+
    "\1\270\2\0\1\270\2\0\27\270\24\0\2\270\2\0"+
    "\1\270\2\0\2\270\1\301\24\270\24\0\2\270\2\0"+
    "\1\270\2\0\12\270\1\273\14\270\24\0\2\270\2\0"+
    "\1\270\2\0\10\270\1\302\16\270\24\0\2\270\2\0"+
    "\1\270\2\0\13\270\1\273\13\270\24\0\2\270\2\0"+
    "\1\270\2\0\2\270\1\303\24\270\24\0\2\270\2\0"+
    "\1\270\2\0\13\270\1\304\13\270\24\0\1\273\1\270"+
    "\2\0\1\270\2\0\27\270\24\0\2\270\2\0\1\270"+
    "\2\0\1\270\1\305\25\270\24\0\2\270\2\0\1\270"+
    "\2\0\13\270\1\306\13\270\24\0\1\275\1\270\2\0"+
    "\1\270\2\0\27\270\24\0\2\270\2\0\1\270\2\0"+
    "\4\270\1\307\22\270\24\0\1\310\1\270\2\0\1\270"+
    "\2\0\27\270\10\0\2\311\1\216\1\312\1\311\1\313"+
    "\54\311\3\254\1\256\1\254\1\257\54\254\5\314\1\315"+
    "\54\314\3\254\1\256\1\254\1\257\1\316\53\254\2\311"+
    "\1\317\1\213\1\311\1\313\54\311\2\262\1\263\2\262"+
    "\1\264\56\262\1\263\2\262\1\264\1\320\53\262\15\0"+
    "\1\267\57\0\1\321\1\0\1\322\60\0\2\323\2\0"+
    "\1\323\2\0\27\323\24\0\2\324\2\0\2\324\1\0"+
    "\27\324\24\0\1\324\1\325\2\0\2\324\1\0\27\324"+
    "\24\0\2\323\2\0\1\323\2\0\11\323\1\326\15\323"+
    "\24\0\2\323\2\0\1\323\2\0\3\323\1\326\23\323"+
    "\24\0\2\323\2\0\1\323\2\0\13\323\1\326\13\323"+
    "\24\0\2\323\2\0\1\323\2\0\1\323\1\327\25\323"+
    "\24\0\1\326\1\323\2\0\1\323\2\0\27\323\24\0"+
    "\2\323\2\0\1\323\2\0\2\323\1\330\24\323\24\0"+
    "\2\323\2\0\1\323\2\0\7\323\1\331\17\323\24\0"+
    "\2\323\2\0\1\323\2\0\10\323\1\332\16\323\24\0"+
    "\2\323\2\0\1\323\2\0\4\323\1\333\22\323\24\0"+
    "\2\323\2\0\1\323\2\0\10\323\1\334\16\323\24\0"+
    "\2\323\2\0\1\323\2\0\1\323\1\335\25\323\24\0"+
    "\2\323\2\0\1\323\2\0\3\323\1\336\23\323\10\0"+
    "\2\311\1\317\1\312\1\311\1\313\56\311\1\317\1\312"+
    "\1\311\1\313\1\337\53\311\5\314\1\315\1\340\53\314"+
    "\15\0\1\341\61\0\1\322\60\0\2\342\2\0\1\342"+
    "\2\0\27\342\24\0\2\343\2\0\2\343\1\0\27\343"+
    "\24\0\1\343\1\344\2\0\2\343\1\0\27\343\24\0"+
    "\2\342\2\0\1\342\2\0\2\342\1\345\24\342\24\0"+
    "\2\342\2\0\1\342\2\0\13\342\1\346\13\342\24\0"+
    "\2\342\2\0\1\342\2\0\2\342\1\347\24\342\24\0"+
    "\2\342\2\0\1\342\2\0\3\342\1\350\23\342\24\0"+
    "\2\342\2\0\1\342\2\0\11\342\1\351\15\342\24\0"+
    "\2\342\2\0\1\342\2\0\23\342\1\352\3\342\24\0"+
    "\2\342\2\0\1\342\2\0\22\342\1\353\4\342\24\0"+
    "\2\354\2\0\1\354\2\0\27\354\24\0\2\355\2\0"+
    "\2\355\1\0\27\355\24\0\1\355\1\356\2\0\2\355"+
    "\1\0\27\355\24\0\2\354\2\0\1\354\2\0\13\354"+
    "\1\357\13\354\24\0\2\354\2\0\1\354\2\0\2\354"+
    "\1\360\24\354\24\0\2\354\2\0\1\354\2\0\4\354"+
    "\1\361\22\354\24\0\2\362\2\0\1\362\2\0\27\362"+
    "\24\0\2\363\2\0\2\363\1\0\27\363\24\0\1\363"+
    "\1\364\2\0\2\363\1\0\27\363\24\0\1\365\1\362"+
    "\2\0\1\362\2\0\27\362\24\0\2\366\2\0\1\366"+
    "\2\0\27\366\24\0\2\367\2\0\2\367\1\0\27\367"+
    "\24\0\1\367\1\370\2\0\2\367\1\0\27\367\24\0"+
    "\2\371\2\0\1\371\2\0\27\371\24\0\2\372\2\0"+
    "\2\372\1\0\27\372\24\0\1\372\1\373\2\0\2\372"+
    "\1\0\27\372\24\0\2\374\2\0\1\374\2\0\27\374"+
    "\24\0\2\375\2\0\2\375\1\0\27\375\24\0\1\375"+
    "\1\376\2\0\2\375\1\0\27\375\24\0\2\377\2\0"+
    "\1\377\2\0\27\377\24\0\2\u0100\2\0\2\u0100\1\0"+
    "\27\u0100\24\0\1\u0100\1\u0101\2\0\2\u0100\1\0\27\u0100"+
    "\24\0\2\u0102\2\0\1\u0102\2\0\27\u0102\24\0\2\u0103"+
    "\2\0\2\u0103\1\0\27\u0103\24\0\1\u0103\1\u0104\2\0"+
    "\2\u0103\1\0\27\u0103\24\0\2\u0105\2\0\1\u0105\2\0"+
    "\27\u0105\24\0\2\u0106\2\0\2\u0106\1\0\27\u0106\24\0"+
    "\1\u0106\1\u0107\2\0\2\u0106\1\0\27\u0106\24\0\2\u0108"+
    "\2\0\1\u0108\2\0\27\u0108\24\0\2\u0109\2\0\2\u0109"+
    "\1\0\27\u0109\24\0\1\u0109\1\u010a\2\0\2\u0109\1\0"+
    "\27\u0109\24\0\2\u010b\2\0\1\u010b\2\0\27\u010b\24\0"+
    "\2\u010c\2\0\2\u010c\1\0\27\u010c\24\0\1\u010c\1\u010d"+
    "\2\0\2\u010c\1\0\27\u010c\24\0\2\u010e\2\0\1\u010e"+
    "\2\0\27\u010e\24\0\2\u010f\2\0\2\u010f\1\0\27\u010f"+
    "\24\0\1\u010f\1\u0110\2\0\2\u010f\1\0\27\u010f\24\0"+
    "\2\u0111\2\0\1\u0111\2\0\27\u0111\24\0\2\u0112\2\0"+
    "\2\u0112\1\0\27\u0112\24\0\1\u0112\1\u0113\2\0\2\u0112"+
    "\1\0\27\u0112\24\0\2\u0114\2\0\1\u0114\2\0\27\u0114"+
    "\24\0\2\u0115\2\0\2\u0115\1\0\27\u0115\24\0\1\u0115"+
    "\1\u0116\2\0\2\u0115\1\0\27\u0115\24\0\2\u0117\2\0"+
    "\1\u0117\2\0\27\u0117\24\0\2\u0118\2\0\2\u0118\1\0"+
    "\27\u0118\24\0\1\u0118\1\u0119\2\0\2\u0118\1\0\27\u0118"+
    "\24\0\2\u011a\2\0\1\u011a\2\0\27\u011a\24\0\2\u011b"+
    "\2\0\2\u011b\1\0\27\u011b\24\0\1\u011b\1\u011c\2\0"+
    "\2\u011b\1\0\27\u011b\24\0\2\u011d\2\0\1\u011d\2\0"+
    "\27\u011d\24\0\2\u011e\2\0\2\u011e\1\0\27\u011e\24\0"+
    "\1\u011e\1\u011f\2\0\2\u011e\1\0\27\u011e\24\0\2\u0120"+
    "\2\0\1\u0120\2\0\27\u0120\24\0\2\u0121\2\0\2\u0121"+
    "\1\0\27\u0121\24\0\1\u0121\1\u0122\2\0\2\u0121\1\0"+
    "\27\u0121\24\0\2\u0123\2\0\1\u0123\2\0\27\u0123\24\0"+
    "\2\u0124\2\0\2\u0124\1\0\27\u0124\24\0\1\u0124\1\u0125"+
    "\2\0\2\u0124\1\0\27\u0124\24\0\2\u0126\2\0\1\u0126"+
    "\2\0\27\u0126\24\0\2\u0127\2\0\2\u0127\1\0\27\u0127"+
    "\24\0\1\u0127\1\u0128\2\0\2\u0127\1\0\27\u0127\24\0"+
    "\2\u0129\2\0\1\u0129\2\0\27\u0129\24\0\2\u012a\2\0"+
    "\2\u012a\1\0\27\u012a\24\0\1\u012a\1\u012b\2\0\2\u012a"+
    "\1\0\27\u012a\24\0\2\u012c\2\0\1\u012c\2\0\27\u012c"+
    "\24\0\2\u012d\2\0\2\u012d\1\0\27\u012d\24\0\1\u012d"+
    "\1\u012e\2\0\2\u012d\1\0\27\u012d\24\0\2\u012f\2\0"+
    "\1\u012f\2\0\27\u012f\24\0\2\u0130\2\0\2\u0130\1\0"+
    "\27\u0130\24\0\1\u0130\1\u0131\2\0\2\u0130\1\0\27\u0130"+
    "\24\0\2\u0132\2\0\1\u0132\2\0\27\u0132\24\0\2\u0133"+
    "\2\0\2\u0133\1\0\27\u0133\24\0\1\u0133\1\u0134\2\0"+
    "\2\u0133\1\0\27\u0133\24\0\2\u0135\2\0\1\u0135\2\0"+
    "\27\u0135\24\0\2\u0136\2\0\2\u0136\1\0\27\u0136\24\0"+
    "\1\u0136\1\u0137\2\0\2\u0136\1\0\27\u0136\24\0\2\u0138"+
    "\2\0\1\u0138\2\0\27\u0138\24\0\2\u0139\2\0\2\u0139"+
    "\1\0\27\u0139\24\0\1\u0139\1\u013a\2\0\2\u0139\1\0"+
    "\27\u0139\24\0\2\u013b\2\0\1\u013b\2\0\27\u013b\24\0"+
    "\2\u013c\2\0\2\u013c\1\0\27\u013c\24\0\1\u013c\1\u013d"+
    "\2\0\2\u013c\1\0\27\u013c\24\0\2\u013e\2\0\1\u013e"+
    "\2\0\27\u013e\24\0\2\u013f\2\0\2\u013f\1\0\27\u013f"+
    "\24\0\1\u013f\1\u0140\2\0\2\u013f\1\0\27\u013f\24\0"+
    "\2\u0141\2\0\1\u0141\2\0\27\u0141\24\0\2\u0142\2\0"+
    "\2\u0142\1\0\27\u0142\24\0\1\u0142\1\u0143\2\0\2\u0142"+
    "\1\0\27\u0142\24\0\2\u0144\2\0\1\u0144\2\0\27\u0144"+
    "\24\0\2\u0145\2\0\2\u0145\1\0\27\u0145\24\0\1\u0145"+
    "\1\u0146\2\0\2\u0145\1\0\27\u0145\24\0\2\u0147\2\0"+
    "\1\u0147\2\0\27\u0147\24\0\2\u0148\2\0\2\u0148\1\0"+
    "\27\u0148\24\0\1\u0148\1\u0149\2\0\2\u0148\1\0\27\u0148"+
    "\24\0\2\u014a\2\0\1\u014a\2\0\27\u014a\24\0\2\u014b"+
    "\2\0\2\u014b\1\0\27\u014b\24\0\1\u014b\1\u014c\2\0"+
    "\2\u014b\1\0\27\u014b\24\0\2\u014d\2\0\1\u014d\2\0"+
    "\27\u014d\24\0\2\u014e\2\0\2\u014e\1\0\27\u014e\24\0"+
    "\1\u014e\1\u014f\2\0\2\u014e\1\0\27\u014e\24\0\2\u0150"+
    "\2\0\1\u0150\2\0\27\u0150\24\0\2\u0151\2\0\2\u0151"+
    "\1\0\27\u0151\24\0\1\u0151\1\u0152\2\0\2\u0151\1\0"+
    "\27\u0151\24\0\2\u0153\2\0\1\u0153\2\0\27\u0153\24\0"+
    "\2\u0154\2\0\2\u0154\1\0\27\u0154\24\0\1\u0154\1\u0155"+
    "\2\0\2\u0154\1\0\27\u0154\24\0\2\u0156\2\0\1\u0156"+
    "\2\0\27\u0156\24\0\2\u0157\2\0\2\u0157\1\0\27\u0157"+
    "\24\0\1\u0157\1\u0158\2\0\2\u0157\1\0\27\u0157\24\0"+
    "\2\u0159\2\0\1\u0159\2\0\27\u0159\24\0\2\u015a\2\0"+
    "\2\u015a\1\0\27\u015a\24\0\1\u015a\1\u015b\2\0\2\u015a"+
    "\1\0\27\u015a\24\0\2\u015c\2\0\1\u015c\2\0\27\u015c"+
    "\24\0\2\u015d\2\0\2\u015d\1\0\27\u015d\24\0\1\u015d"+
    "\1\u015e\2\0\2\u015d\1\0\27\u015d\24\0\2\u015f\2\0"+
    "\1\u015f\2\0\27\u015f\24\0\2\u0160\2\0\2\u0160\1\0"+
    "\27\u0160\24\0\1\u0160\1\u0161\2\0\2\u0160\1\0\27\u0160"+
    "\24\0\2\u0162\2\0\1\u0162\2\0\27\u0162\24\0\2\u0163"+
    "\2\0\2\u0163\1\0\27\u0163\24\0\1\u0163\1\u0164\2\0"+
    "\2\u0163\1\0\27\u0163\24\0\2\u0165\2\0\1\u0165\2\0"+
    "\27\u0165\24\0\2\u0166\2\0\2\u0166\1\0\27\u0166\24\0"+
    "\1\u0166\1\u0167\2\0\2\u0166\1\0\27\u0166\24\0\2\u0168"+
    "\2\0\1\u0168\2\0\27\u0168\24\0\2\u0169\2\0\2\u0169"+
    "\1\0\27\u0169\24\0\1\u0169\1\u016a\2\0\2\u0169\1\0"+
    "\27\u0169\24\0\2\u016b\2\0\1\u016b\2\0\27\u016b\24\0"+
    "\2\u016c\2\0\2\u016c\1\0\27\u016c\24\0\1\u016c\1\u016d"+
    "\2\0\2\u016c\1\0\27\u016c\24\0\2\u016e\2\0\1\u016e"+
    "\2\0\27\u016e\24\0\2\u016f\2\0\2\u016f\1\0\27\u016f"+
    "\24\0\1\u016f\1\u0170\2\0\2\u016f\1\0\27\u016f\24\0"+
    "\2\u0171\2\0\1\u0171\2\0\27\u0171\24\0\2\u0172\2\0"+
    "\2\u0172\1\0\27\u0172\24\0\1\u0172\1\u0173\2\0\2\u0172"+
    "\1\0\27\u0172\24\0\2\u0174\2\0\1\u0174\2\0\27\u0174"+
    "\24\0\2\u0175\2\0\2\u0175\1\0\27\u0175\24\0\1\u0175"+
    "\1\u0176\2\0\2\u0175\1\0\27\u0175\24\0\2\u0177\2\0"+
    "\1\u0177\2\0\27\u0177\24\0\2\u0178\2\0\2\u0178\1\0"+
    "\27\u0178\24\0\1\u0178\1\u0179\2\0\2\u0178\1\0\27\u0178"+
    "\24\0\2\u017a\2\0\1\u017a\2\0\27\u017a\24\0\2\u017b"+
    "\2\0\2\u017b\1\0\27\u017b\24\0\1\u017b\1\u017c\2\0"+
    "\2\u017b\1\0\27\u017b\24\0\2\u017d\2\0\1\u017d\2\0"+
    "\27\u017d\24\0\2\u017e\2\0\2\u017e\1\0\27\u017e\24\0"+
    "\1\u017e\1\u017f\2\0\2\u017e\1\0\27\u017e\24\0\2\u0180"+
    "\2\0\1\u0180\2\0\27\u0180\24\0\2\u0181\2\0\2\u0181"+
    "\1\0\27\u0181\24\0\1\u0181\1\u0182\2\0\2\u0181\1\0"+
    "\27\u0181\24\0\2\u0183\2\0\1\u0183\2\0\27\u0183\24\0"+
    "\2\u0184\2\0\2\u0184\1\0\27\u0184\24\0\1\u0184\1\u0185"+
    "\2\0\2\u0184\1\0\27\u0184\24\0\2\u0186\2\0\1\u0186"+
    "\2\0\27\u0186\24\0\2\u0187\2\0\2\u0187\1\0\27\u0187"+
    "\24\0\1\u0187\1\u0188\2\0\2\u0187\1\0\27\u0187\24\0"+
    "\2\u0189\2\0\1\u0189\2\0\27\u0189\24\0\2\u018a\2\0"+
    "\2\u018a\1\0\27\u018a\24\0\1\u018a\1\u018b\2\0\2\u018a"+
    "\1\0\27\u018a\24\0\2\u018c\2\0\1\u018c\2\0\27\u018c"+
    "\24\0\2\u018d\2\0\2\u018d\1\0\27\u018d\24\0\1\u018d"+
    "\1\u018e\2\0\2\u018d\1\0\27\u018d\24\0\2\u018f\2\0"+
    "\1\u018f\2\0\27\u018f\24\0\2\u0190\2\0\2\u0190\1\0"+
    "\27\u0190\24\0\1\u0190\1\u0191\2\0\2\u0190\1\0\27\u0190"+
    "\24\0\2\u0192\2\0\1\u0192\2\0\27\u0192\24\0\2\u0193"+
    "\2\0\2\u0193\1\0\27\u0193\24\0\1\u0193\1\u0194\2\0"+
    "\2\u0193\1\0\27\u0193\24\0\2\u0195\2\0\1\u0195\2\0"+
    "\27\u0195\24\0\2\u0196\2\0\2\u0196\1\0\27\u0196\24\0"+
    "\1\u0196\1\u0197\2\0\2\u0196\1\0\27\u0196\24\0\2\u0198"+
    "\2\0\1\u0198\2\0\27\u0198\24\0\2\u0199\2\0\2\u0199"+
    "\1\0\27\u0199\24\0\1\u0199\1\u019a\2\0\2\u0199\1\0"+
    "\27\u0199\24\0\2\u019b\2\0\1\u019b\2\0\27\u019b\24\0"+
    "\2\u019c\2\0\2\u019c\1\0\27\u019c\24\0\1\u019c\1\u019d"+
    "\2\0\2\u019c\1\0\27\u019c\24\0\2\u019e\2\0\1\u019e"+
    "\2\0\27\u019e\24\0\2\u019f\2\0\2\u019f\1\0\27\u019f"+
    "\24\0\1\u019f\1\u01a0\2\0\2\u019f\1\0\27\u019f\24\0"+
    "\2\u01a1\2\0\1\u01a1\2\0\27\u01a1\24\0\2\u01a2\2\0"+
    "\2\u01a2\1\0\27\u01a2\24\0\1\u01a2\1\u01a3\2\0\2\u01a2"+
    "\1\0\27\u01a2\24\0\2\u01a4\2\0\1\u01a4\2\0\27\u01a4"+
    "\24\0\2\u01a5\2\0\2\u01a5\1\0\27\u01a5\24\0\1\u01a5"+
    "\1\u01a6\2\0\2\u01a5\1\0\27\u01a5\24\0\2\u01a7\2\0"+
    "\1\u01a7\2\0\27\u01a7\24\0\2\u01a8\2\0\2\u01a8\1\0"+
    "\27\u01a8\24\0\1\u01a8\1\u01a9\2\0\2\u01a8\1\0\27\u01a8"+
    "\24\0\2\u01aa\2\0\1\u01aa\2\0\27\u01aa\24\0\2\u01ab"+
    "\2\0\2\u01ab\1\0\27\u01ab\24\0\1\u01ab\1\u01ac\2\0"+
    "\2\u01ab\1\0\27\u01ab\24\0\2\u01ad\2\0\1\u01ad\2\0"+
    "\27\u01ad\24\0\2\u01ae\2\0\2\u01ae\1\0\27\u01ae\24\0"+
    "\1\u01ae\1\u01af\2\0\2\u01ae\1\0\27\u01ae\24\0\2\u01b0"+
    "\2\0\1\u01b0\2\0\27\u01b0\24\0\2\u01b1\2\0\2\u01b1"+
    "\1\0\27\u01b1\24\0\1\u01b1\1\u01b2\2\0\2\u01b1\1\0"+
    "\27\u01b1\24\0\2\u01b3\2\0\1\u01b3\2\0\27\u01b3\24\0"+
    "\2\u01b4\2\0\2\u01b4\1\0\27\u01b4\24\0\1\u01b4\1\u01b5"+
    "\2\0\2\u01b4\1\0\27\u01b4\24\0\2\u01b6\2\0\1\u01b6"+
    "\2\0\27\u01b6\24\0\2\u01b7\2\0\2\u01b7\1\0\27\u01b7"+
    "\24\0\1\u01b7\1\u01b8\2\0\2\u01b7\1\0\27\u01b7\24\0"+
    "\2\u01b9\2\0\1\u01b9\2\0\27\u01b9\24\0\2\u01ba\2\0"+
    "\2\u01ba\1\0\27\u01ba\24\0\1\u01ba\1\u01bb\2\0\2\u01ba"+
    "\1\0\27\u01ba\24\0\2\u01bc\2\0\1\u01bc\2\0\27\u01bc"+
    "\24\0\2\u01bd\2\0\2\u01bd\1\0\27\u01bd\24\0\1\u01bd"+
    "\1\u01be\2\0\2\u01bd\1\0\27\u01bd\24\0\2\u01bf\2\0"+
    "\1\u01bf\2\0\27\u01bf\24\0\2\u01c0\2\0\2\u01c0\1\0"+
    "\27\u01c0\24\0\1\u01c0\1\u01c1\2\0\2\u01c0\1\0\27\u01c0"+
    "\24\0\2\u01c2\2\0\1\u01c2\2\0\27\u01c2\24\0\2\u01c3"+
    "\2\0\2\u01c3\1\0\27\u01c3\24\0\1\u01c3\1\u01c4\2\0"+
    "\2\u01c3\1\0\27\u01c3\24\0\2\u01c5\2\0\1\u01c5\2\0"+
    "\27\u01c5\24\0\2\u01c6\2\0\2\u01c6\1\0\27\u01c6\24\0"+
    "\1\u01c6\1\u01c7\2\0\2\u01c6\1\0\27\u01c6\24\0\2\u01c8"+
    "\2\0\1\u01c8\2\0\27\u01c8\24\0\2\u01c9\2\0\2\u01c9"+
    "\1\0\27\u01c9\24\0\1\u01c9\1\u01ca\2\0\2\u01c9\1\0"+
    "\27\u01c9\24\0\2\u01cb\2\0\1\u01cb\2\0\27\u01cb\24\0"+
    "\2\u01cc\2\0\2\u01cc\1\0\27\u01cc\24\0\1\u01cc\1\u01cd"+
    "\2\0\2\u01cc\1\0\27\u01cc\24\0\2\u01ce\2\0\1\u01ce"+
    "\2\0\27\u01ce\24\0\2\u01cf\2\0\2\u01cf\1\0\27\u01cf"+
    "\24\0\1\u01cf\1\u01d0\2\0\2\u01cf\1\0\27\u01cf\24\0"+
    "\2\u01d1\2\0\1\u01d1\2\0\27\u01d1\24\0\2\u01d2\2\0"+
    "\2\u01d2\1\0\27\u01d2\24\0\1\u01d2\1\u01d3\2\0\2\u01d2"+
    "\1\0\27\u01d2\24\0\2\u01d4\2\0\1\u01d4\2\0\27\u01d4"+
    "\24\0\2\u01d5\2\0\2\u01d5\1\0\27\u01d5\24\0\1\u01d5"+
    "\1\u01d6\2\0\2\u01d5\1\0\27\u01d5\24\0\2\u01d7\2\0"+
    "\1\u01d7\2\0\27\u01d7\24\0\2\u01d8\2\0\2\u01d8\1\0"+
    "\27\u01d8\24\0\1\u01d8\1\u01d9\2\0\2\u01d8\1\0\27\u01d8"+
    "\24\0\2\u01da\2\0\1\u01da\2\0\27\u01da\24\0\2\u01db"+
    "\2\0\2\u01db\1\0\27\u01db\24\0\1\u01db\1\u01dc\2\0"+
    "\2\u01db\1\0\27\u01db\24\0\2\u01dd\2\0\1\u01dd\2\0"+
    "\27\u01dd\24\0\2\u01de\2\0\2\u01de\1\0\27\u01de\24\0"+
    "\1\u01de\1\u01df\2\0\2\u01de\1\0\27\u01de\24\0\2\u01e0"+
    "\2\0\1\u01e0\2\0\27\u01e0\24\0\2\u01e1\2\0\2\u01e1"+
    "\1\0\27\u01e1\24\0\1\u01e1\1\u01e2\2\0\2\u01e1\1\0"+
    "\27\u01e1\24\0\2\u01e3\2\0\1\u01e3\2\0\27\u01e3\24\0"+
    "\2\u01e4\2\0\2\u01e4\1\0\27\u01e4\24\0\1\u01e4\1\u01e5"+
    "\2\0\2\u01e4\1\0\27\u01e4\24\0\2\u01e6\2\0\1\u01e6"+
    "\2\0\27\u01e6\24\0\2\u01e7\2\0\2\u01e7\1\0\27\u01e7"+
    "\24\0\1\u01e7\1\u01e8\2\0\2\u01e7\1\0\27\u01e7\24\0"+
    "\2\u01e9\2\0\1\u01e9\2\0\27\u01e9\24\0\2\u01ea\2\0"+
    "\2\u01ea\1\0\27\u01ea\24\0\1\u01ea\1\u01eb\2\0\2\u01ea"+
    "\1\0\27\u01ea\24\0\2\u01ec\2\0\1\u01ec\2\0\27\u01ec"+
    "\24\0\2\u01ed\2\0\2\u01ed\1\0\27\u01ed\24\0\1\u01ed"+
    "\1\u01ee\2\0\2\u01ed\1\0\27\u01ed\24\0\2\u01ef\2\0"+
    "\1\u01ef\2\0\27\u01ef\24\0\2\u01f0\2\0\2\u01f0\1\0"+
    "\27\u01f0\24\0\1\u01f0\1\u01f1\2\0\2\u01f0\1\0\27\u01f0"+
    "\24\0\2\u01f2\2\0\1\u01f2\2\0\27\u01f2\24\0\2\u01f3"+
    "\2\0\2\u01f3\1\0\27\u01f3\24\0\1\u01f3\1\u01f4\2\0"+
    "\2\u01f3\1\0\27\u01f3\24\0\2\u01f5\2\0\1\u01f5\2\0"+
    "\27\u01f5\24\0\2\u01f6\2\0\2\u01f6\1\0\27\u01f6\24\0"+
    "\1\u01f6\1\u01f7\2\0\2\u01f6\1\0\27\u01f6\24\0\2\u01f8"+
    "\2\0\1\u01f8\2\0\27\u01f8\24\0\2\u01f9\2\0\2\u01f9"+
    "\1\0\27\u01f9\24\0\1\u01f9\1\u01fa\2\0\2\u01f9\1\0"+
    "\27\u01f9\24\0\2\u01fb\2\0\1\u01fb\2\0\27\u01fb\24\0"+
    "\2\u01fc\2\0\2\u01fc\1\0\27\u01fc\24\0\1\u01fc\1\u01fd"+
    "\2\0\2\u01fc\1\0\27\u01fc\24\0\2\u01fe\2\0\1\u01fe"+
    "\2\0\27\u01fe\24\0\2\u01ff\2\0\2\u01ff\1\0\27\u01ff"+
    "\24\0\1\u01ff\1\u0200\2\0\2\u01ff\1\0\27\u01ff\24\0"+
    "\2\u0201\2\0\1\u0201\2\0\27\u0201\24\0\2\u0202\2\0"+
    "\2\u0202\1\0\27\u0202\24\0\1\u0202\1\u0203\2\0\2\u0202"+
    "\1\0\27\u0202\24\0\2\u0204\2\0\1\u0204\2\0\27\u0204"+
    "\24\0\2\u0205\2\0\2\u0205\1\0\27\u0205\24\0\1\u0205"+
    "\1\u0206\2\0\2\u0205\1\0\27\u0205\24\0\2\u0207\2\0"+
    "\1\u0207\2\0\27\u0207\24\0\2\u0208\2\0\2\u0208\1\0"+
    "\27\u0208\24\0\1\u0208\1\u0209\2\0\2\u0208\1\0\27\u0208"+
    "\24\0\2\u020a\2\0\1\u020a\2\0\27\u020a\24\0\2\u020b"+
    "\2\0\2\u020b\1\0\27\u020b\24\0\1\u020b\1\u020c\2\0"+
    "\2\u020b\1\0\27\u020b\24\0\2\u020d\2\0\1\u020d\2\0"+
    "\27\u020d\24\0\2\u020e\2\0\2\u020e\1\0\27\u020e\24\0"+
    "\1\u020e\1\u020f\2\0\2\u020e\1\0\27\u020e\24\0\2\u0210"+
    "\2\0\1\u0210\2\0\27\u0210\24\0\2\u0211\2\0\2\u0211"+
    "\1\0\27\u0211\24\0\1\u0211\1\u0212\2\0\2\u0211\1\0"+
    "\27\u0211\24\0\2\u0213\2\0\1\u0213\2\0\27\u0213\24\0"+
    "\2\u0214\2\0\2\u0214\1\0\27\u0214\24\0\1\u0214\1\u0215"+
    "\2\0\2\u0214\1\0\27\u0214\24\0\2\u0216\2\0\1\u0216"+
    "\2\0\27\u0216\24\0\2\u0217\2\0\2\u0217\1\0\27\u0217"+
    "\24\0\1\u0217\1\u0218\2\0\2\u0217\1\0\27\u0217\24\0"+
    "\2\u0219\2\0\1\u0219\2\0\27\u0219\24\0\2\u021a\2\0"+
    "\2\u021a\1\0\27\u021a\24\0\1\u021a\1\u021b\2\0\2\u021a"+
    "\1\0\27\u021a\24\0\2\u021c\2\0\1\u021c\2\0\27\u021c"+
    "\24\0\2\u021d\2\0\2\u021d\1\0\27\u021d\24\0\1\u021d"+
    "\1\u021e\2\0\2\u021d\1\0\27\u021d\24\0\2\u021f\2\0"+
    "\1\u021f\2\0\27\u021f\24\0\2\u0220\2\0\2\u0220\1\0"+
    "\27\u0220\24\0\1\u0220\1\u0221\2\0\2\u0220\1\0\27\u0220"+
    "\24\0\2\u0222\2\0\1\u0222\2\0\27\u0222\24\0\2\u0223"+
    "\2\0\2\u0223\1\0\27\u0223\24\0\1\u0223\1\u0224\2\0"+
    "\2\u0223\1\0\27\u0223\24\0\2\u0225\2\0\1\u0225\2\0"+
    "\27\u0225\24\0\2\u0226\2\0\2\u0226\1\0\27\u0226\24\0"+
    "\1\u0226\1\u0227\2\0\2\u0226\1\0\27\u0226\24\0\2\u0228"+
    "\2\0\1\u0228\2\0\27\u0228\24\0\2\u0229\2\0\2\u0229"+
    "\1\0\27\u0229\24\0\1\u0229\1\u022a\2\0\2\u0229\1\0"+
    "\27\u0229\24\0\2\u022b\2\0\1\u022b\2\0\27\u022b\24\0"+
    "\2\u022c\2\0\2\u022c\1\0\27\u022c\24\0\1\u022c\1\u022d"+
    "\2\0\2\u022c\1\0\27\u022c\24\0\2\u022e\2\0\1\u022e"+
    "\2\0\27\u022e\24\0\2\u022f\2\0\2\u022f\1\0\27\u022f"+
    "\24\0\1\u022f\1\u0230\2\0\2\u022f\1\0\27\u022f\24\0"+
    "\2\u0231\2\0\1\u0231\2\0\27\u0231\24\0\2\u0232\2\0"+
    "\2\u0232\1\0\27\u0232\24\0\1\u0232\1\u0233\2\0\2\u0232"+
    "\1\0\27\u0232\24\0\2\u0234\2\0\1\u0234\2\0\27\u0234"+
    "\24\0\2\u0235\2\0\2\u0235\1\0\27\u0235\24\0\1\u0235"+
    "\1\u0236\2\0\2\u0235\1\0\27\u0235\24\0\2\u0237\2\0"+
    "\1\u0237\2\0\27\u0237\24\0\2\u0238\2\0\2\u0238\1\0"+
    "\27\u0238\24\0\1\u0238\1\u0239\2\0\2\u0238\1\0\27\u0238"+
    "\24\0\2\u023a\2\0\1\u023a\2\0\27\u023a\24\0\2\u023b"+
    "\2\0\2\u023b\1\0\27\u023b\24\0\1\u023b\1\u023c\2\0"+
    "\2\u023b\1\0\27\u023b\24\0\2\u023d\2\0\1\u023d\2\0"+
    "\27\u023d\24\0\2\u023e\2\0\2\u023e\1\0\27\u023e\24\0"+
    "\1\u023e\1\u023f\2\0\2\u023e\1\0\27\u023e\24\0\2\u0240"+
    "\2\0\1\u0240\2\0\27\u0240\24\0\2\u0241\2\0\2\u0241"+
    "\1\0\27\u0241\24\0\1\u0241\1\u0242\2\0\2\u0241\1\0"+
    "\27\u0241\24\0\2\u0243\2\0\1\u0243\2\0\27\u0243\24\0"+
    "\2\u0244\2\0\2\u0244\1\0\27\u0244\24\0\1\u0244\1\u0245"+
    "\2\0\2\u0244\1\0\27\u0244\24\0\2\u0246\2\0\1\u0246"+
    "\2\0\27\u0246\24\0\2\u0247\2\0\2\u0247\1\0\27\u0247"+
    "\24\0\1\u0247\1\u0248\2\0\2\u0247\1\0\27\u0247\24\0"+
    "\2\u0249\2\0\1\u0249\2\0\27\u0249\24\0\2\u024a\2\0"+
    "\2\u024a\1\0\27\u024a\24\0\1\u024a\1\u024b\2\0\2\u024a"+
    "\1\0\27\u024a\24\0\2\u024c\2\0\1\u024c\2\0\27\u024c"+
    "\24\0\2\u024d\2\0\2\u024d\1\0\27\u024d\24\0\1\u024d"+
    "\1\u024e\2\0\2\u024d\1\0\27\u024d\24\0\2\u024f\2\0"+
    "\1\u024f\2\0\27\u024f\24\0\2\u0250\2\0\2\u0250\1\0"+
    "\27\u0250\24\0\1\u0250\1\u0251\2\0\2\u0250\1\0\27\u0250"+
    "\24\0\2\u0252\2\0\1\u0252\2\0\27\u0252\24\0\2\u0253"+
    "\2\0\2\u0253\1\0\27\u0253\24\0\1\u0253\1\u0254\2\0"+
    "\2\u0253\1\0\27\u0253\24\0\2\u0255\2\0\1\u0255\2\0"+
    "\27\u0255\24\0\2\u0256\2\0\2\u0256\1\0\27\u0256\24\0"+
    "\1\u0256\1\u0257\2\0\2\u0256\1\0\27\u0256\24\0\2\u0258"+
    "\2\0\1\u0258\2\0\27\u0258\24\0\2\u0259\2\0\2\u0259"+
    "\1\0\27\u0259\24\0\1\u0259\1\u025a\2\0\2\u0259\1\0"+
    "\27\u0259\24\0\2\u025b\2\0\2\u025b\1\0\27\u025b\24\0"+
    "\1\u025b\1\142\2\0\2\u025b\1\0\27\u025b\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\36\1\2\11"+
    "\4\1\2\0\1\1\2\0\52\1\1\11\3\1\1\0"+
    "\1\1\1\0\7\1\1\0\2\11\1\0\34\1\2\0"+
    "\1\1\2\0\1\1\2\0\33\1\1\0\1\1\2\0"+
    "\2\1\3\0\1\1\1\0\22\1\5\0\1\1\1\0"+
    "\1\1\1\0\u0186\1\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[603];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private Symbol token(int type, Object value)
{
    return new Symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 364) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(sym.error, "Caracter inválido " + yytext());
            }
          case 29: break;
          case 2: 
            { return token(3000, yytext());
            }
          case 30: break;
          case 3: 
            { /*Omitir el espacio blanco*/
            }
          case 31: break;
          case 4: 
            { return token(4000, yytext());
            }
          case 32: break;
          case 5: 
            { return token(sym.ID, yytext().toUpperCase());
            }
          case 33: break;
          case 6: 
            { return token(sym.DOS_PUNTO, yytext());
            }
          case 34: break;
          case 7: 
            { return token(sym.COMA, yytext());
            }
          case 35: break;
          case 8: 
            { return token(sym.PUNTO_COMA, yytext());
            }
          case 36: break;
          case 9: 
            { return token(5000, yytext());
            }
          case 37: break;
          case 10: 
            { return token(sym.error, "No tiene nada después del punto" + yytext());
            }
          case 38: break;
          case 11: 
            { return token(sym.error, "No tiene nada antes del punto " + yytext());
            }
          case 39: break;
          case 12: 
            { return token(sym.error, "No debe comenzar con números" + yytext());
            }
          case 40: break;
          case 13: 
            { return token(sym.error, "Hilera sin cerrar " + yytext());
            }
          case 41: break;
          case 14: 
            { return token(1200, yytext());
            }
          case 42: break;
          case 15: 
            { return token(sym.error, "Comentario no cerrado" + yytext());
            }
          case 43: break;
          case 16: 
            { return token(sym.error, "Notación científica mala " + yytext());
            }
          case 44: break;
          case 17: 
            { return token(sym.END, yytext());
            }
          case 45: break;
          case 18: 
            { return token(sym.INT, yytext());
            }
          case 46: break;
          case 19: 
            { return token(sym.VAR, yytext());
            }
          case 47: break;
          case 20: 
            { return token(sym.error, "Notación científica mala - error no tiene nada después del exponente" + yytext());
            }
          case 48: break;
          case 21: 
            { return token(sym.BOOLEAN, yytext());
            }
          case 49: break;
          case 22: 
            { return token(sym.CHAR, yytext());
            }
          case 50: break;
          case 23: 
            { return token(sym.BEGIN, yytext());
            }
          case 51: break;
          case 24: 
            { return token(sym.STRING, yytext());
            }
          case 52: break;
          case 25: 
            { return token(sym.error, "Notación científica mala - error el numero después del E tiene que ser entero" + yytext());
            }
          case 53: break;
          case 26: 
            { return token(sym.LONGINT, yytext());
            }
          case 54: break;
          case 27: 
            { return token(sym.PROGRAM, yytext());
            }
          case 55: break;
          case 28: 
            { return token(sym.SHORTINT, yytext());
            }
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
