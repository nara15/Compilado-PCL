/* The following code was generated by JFlex 1.6.1 */

package logica.scanner;

import java_cup.runtime.*;
import logica.parser.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>G:/git/Compilador-PCL/COMPILADOR-PCL/PARSER/Parser_PCL/src/logica/scanner/pcl_rules.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\2\1\65\1\65\1\3\22\0\1\22\1\0\1\16"+
    "\1\17\4\0\1\4\1\6\1\5\1\57\1\55\1\12\1\13\1\1"+
    "\12\15\1\21\1\56\1\62\1\61\1\60\2\0\1\24\1\31\1\40"+
    "\1\26\1\14\1\46\1\32\1\43\1\34\1\20\1\53\1\36\1\50"+
    "\1\25\1\35\1\51\1\20\1\27\1\42\1\37\1\47\1\44\1\45"+
    "\1\54\1\30\1\20\1\63\1\0\1\64\1\0\1\20\1\0\1\24"+
    "\1\31\1\40\1\26\1\14\1\46\1\32\1\43\1\34\1\20\1\53"+
    "\1\36\1\50\1\25\1\35\1\51\1\20\1\27\1\42\1\37\1\47"+
    "\1\44\1\45\1\54\1\30\1\20\1\7\1\23\1\10\7\0\1\65"+
    "\252\0\2\33\115\0\1\41\u04e0\0\12\11\206\0\12\11\306\0\12\11"+
    "\u019c\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11"+
    "\166\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11"+
    "\140\0\12\11\166\0\12\11\106\0\12\11\u0116\0\12\11\106\0\12\11"+
    "\u0746\0\12\11\46\0\12\11\u012c\0\12\11\200\0\12\11\246\0\12\11"+
    "\6\0\12\11\266\0\12\11\126\0\12\11\206\0\12\11\6\0\12\11"+
    "\u03ce\0\1\65\1\65\u0100\0\1\52\u84f5\0\12\11\u02a6\0\12\11\46\0"+
    "\12\11\306\0\12\11\26\0\12\11\126\0\12\11\u0196\0\12\11\u5316\0"+
    "\12\11\u0586\0\12\11\u0bbc\0\12\11\200\0\12\11\74\0\12\11\220\0"+
    "\12\11\u0116\0\12\11\u01d6\0\12\11\u0176\0\12\11\146\0\12\11\u0216\0"+
    "\12\11\u5176\0\12\11\346\0\12\11\u6c74\0\62\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\7\2\1\1\12\1\13"+
    "\1\3\6\12\1\1\5\12\1\1\10\12\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\24\1\0\1\26\1\0\1\27\2\0\1\30\1\31"+
    "\1\32\1\33\3\12\2\34\1\35\1\36\1\37\1\40"+
    "\2\12\1\0\2\12\1\0\1\12\1\41\5\12\1\42"+
    "\1\43\1\42\1\43\1\44\1\45\4\12\1\46\4\12"+
    "\3\0\5\12\1\0\12\12\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\24\2\55\1\0\1\56\1\0\1\57"+
    "\1\27\1\12\1\60\1\0\1\12\1\34\1\57\1\0"+
    "\1\36\1\35\1\0\1\61\1\12\2\42\1\62\2\63"+
    "\10\12\1\0\1\64\1\12\1\64\4\12\1\0\3\12"+
    "\2\0\2\12\1\65\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\1\66\2\12\1\67\2\12\1\51\2\0\1\55"+
    "\2\0\1\55\2\0\1\24\1\70\1\56\1\12\2\71"+
    "\1\34\1\57\2\12\1\72\1\73\2\12\1\0\1\12"+
    "\1\42\1\12\1\0\3\12\1\74\1\75\2\76\1\0"+
    "\1\12\1\77\2\0\2\12\1\0\1\12\1\0\1\12"+
    "\1\0\3\12\1\0\1\12\1\0\3\12\1\55\1\0"+
    "\1\55\2\0\1\24\1\55\3\0\1\24\1\0\1\100"+
    "\1\12\1\34\1\57\1\101\3\12\2\102\1\12\1\0"+
    "\1\12\1\42\1\0\1\12\2\103\2\0\2\12\2\104"+
    "\2\105\2\106\2\12\2\107\1\0\2\12\5\0\1\24"+
    "\1\0\1\24\1\0\1\100\1\12\1\34\1\57\1\42"+
    "\1\110\1\12\1\0\1\12\1\111\1\0\1\111\2\12"+
    "\1\0\3\12\2\24\1\112\1\12\1\34\1\57\1\113"+
    "\2\114\1\0\1\12\1\42\1\0\1\12\1\115\2\12"+
    "\1\34\1\57\2\116\2\117\2\12\1\34\1\57\1\120"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\12\1\34\1\57"+
    "\1\12\1\34\1\57\1\12\1\34\1\57\1\12\1\34"+
    "\1\57\1\12\1\34\1\57\1\12\1\34\1\57\1\12"+
    "\1\34\1\57\1\12\1\34\1\57\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\330\0\u010e\0\66"+
    "\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u02f4\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\66\0\66\0\u07ce\0\u0804\0\66\0\u083a\0\66\0\66"+
    "\0\u0870\0\66\0\66\0\u08a6\0\66\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\66\0\66\0\u09b4\0\66\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u02be\0\66\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\66\0\u0e58\0\u09ea\0\u09ea"+
    "\0\u09ea\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u09ea\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c"+
    "\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\66\0\66\0\u1440"+
    "\0\66\0\66\0\66\0\242\0\u1476\0\u14ac\0\u14e2\0\u1518"+
    "\0\u154e\0\u154e\0\u1584\0\u15ba\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u0af8\0\66\0\66\0\u0b2e\0\u15ba\0\u16c8\0\66"+
    "\0\u15ba\0\u15ba\0\66\0\u15ba\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\66\0\u18e4\0\u15ba"+
    "\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94"+
    "\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u15ba\0\u1ba2\0\u1bd8\0\u1c0e"+
    "\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u15ba"+
    "\0\u1dbe\0\u1df4\0\66\0\u1e2a\0\u1476\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u14ac\0\u1f38\0\u08a6\0\u1f6e\0\u1584\0\u1fa4\0\66"+
    "\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u1fa4\0\u1fa4\0\u20b2"+
    "\0\u20e8\0\u211e\0\u2154\0\u1fa4\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u1fa4\0\u1fa4\0\66\0\u1fa4\0\u2298\0\u22ce\0\u1fa4"+
    "\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e"+
    "\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e"+
    "\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c\0\u1e60\0\u2772\0\u1e2a"+
    "\0\u27a8\0\u27de\0\u1f02\0\u2814\0\u1ecc\0\u284a\0\u2880\0\u28b6"+
    "\0\u28ec\0\u2922\0\u28b6\0\u2958\0\u298e\0\u29c4\0\66\0\u28b6"+
    "\0\u29fa\0\u2a30\0\u2a66\0\u28b6\0\u2a9c\0\u2ad2\0\66\0\u28b6"+
    "\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\66\0\u28b6\0\66\0\u28b6"+
    "\0\66\0\u28b6\0\u2be0\0\u2c16\0\66\0\u28b6\0\u2c4c\0\u2c82"+
    "\0\u2cb8\0\u2cee\0\u26d0\0\u2d24\0\u273c\0\u2d5a\0\u2706\0\u27a8"+
    "\0\u27de\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2dfc\0\u2dfc"+
    "\0\u2e9e\0\u2ed4\0\u2f0a\0\66\0\u2f40\0\u2dfc\0\u2f76\0\u2fac"+
    "\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u2cee\0\u273c\0\u2d90\0\u30ba"+
    "\0\u30f0\0\u3126\0\u30ba\0\66\0\u30ba\0\u315c\0\u3192\0\u30ba"+
    "\0\u31c8\0\u31fe\0\u30ba\0\u3234\0\u326a\0\u32a0\0\u32d6\0\66"+
    "\0\u326a\0\66\0\u326a\0\u330c\0\u3342\0\u3378\0\u33ae\0\u3342"+
    "\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e"+
    "\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e"+
    "\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be"+
    "\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e"+
    "\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e"+
    "\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce"+
    "\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e"+
    "\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e"+
    "\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de"+
    "\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e"+
    "\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608\0\u463e"+
    "\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee"+
    "\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932\0\u4968\0\u499e"+
    "\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u4b18\0\u4b4e"+
    "\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe"+
    "\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78\0\u4eae"+
    "\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028\0\u505e"+
    "\0\u5094\0\u50ca\0\u5100\0\u5136\0\u516c\0\u51a2\0\u51d8\0\u520e"+
    "\0\u5244\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352\0\u5388\0\u53be"+
    "\0\u53f4\0\u542a\0\u5460\0\u5496\0\u54cc\0\u5502\0\u5538\0\u556e"+
    "\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\u56e8\0\u571e"+
    "\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u5898\0\u58ce"+
    "\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12\0\u5a48\0\u5a7e"+
    "\0\u5ab4\0\u5aea\0\u5b20\0\u5b56\0\u5b8c\0\u5bc2\0\u5bf8\0\u5c2e"+
    "\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06\0\u5d3c\0\u5d72\0\u5da8\0\u5dde"+
    "\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6\0\u5eec\0\u5f22\0\u5f58\0\u5f8e"+
    "\0\u5fc4\0\u5ffa\0\u6030\0\u6066\0\u609c\0\u60d2\0\u6108\0\u613e"+
    "\0\u6174\0\u61aa\0\u61e0\0\u6216\0\u624c\0\u6282\0\u62b8\0\u62ee"+
    "\0\u6324\0\u635a\0\u6390\0\u63c6\0\u63fc\0\u6432\0\u6468\0\u649e"+
    "\0\u64d4\0\u650a\0\u6540\0\u6576\0\u65ac\0\u65e2\0\u6618\0\u664e"+
    "\0\u6684\0\u66ba\0\u66f0\0\u6726\0\u675c\0\u6792\0\u67c8\0\u67fe"+
    "\0\u6834\0\u686a\0\u68a0\0\u68d6\0\u690c\0\u6942\0\u6978\0\u69ae"+
    "\0\u69e4\0\u6a1a\0\u6a50\0\u6a86\0\u6abc\0\u6af2\0\u6b28\0\u6b5e"+
    "\0\u6b94\0\u6bca\0\u6c00\0\u6c36\0\u6c6c\0\u6ca2\0\u6cd8\0\u6d0e"+
    "\0\u6d44\0\u6d7a\0\u6db0\0\u6de6\0\u6e1c\0\u6e52\0\u6e88\0\u6ebe"+
    "\0\u6ef4\0\u6f2a\0\u6f60\0\u6f96\0\u6fcc\0\u7002\0\u7038\0\u706e"+
    "\0\u70a4\0\u70da\0\u7110\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u721e"+
    "\0\u7254\0\u728a\0\u72c0\0\u72f6\0\u732c\0\u7362\0\u7398\0\u73ce"+
    "\0\u7404\0\u743a\0\u7470\0\u74a6\0\u74dc\0\u7512\0\u7548\0\u757e"+
    "\0\u75b4\0\u75ea\0\u7620\0\u7656\0\u768c\0\u76c2\0\u76f8\0\u772e"+
    "\0\u7764\0\u779a\0\u77d0\0\u7806\0\u783c\0\u7872\0\u78a8\0\u78de"+
    "\0\u7914\0\u794a\0\u7980\0\u79b6\0\u79ec\0\u7a22\0\u7a58\0\u7a8e"+
    "\0\u7ac4\0\u7afa\0\u7b30\0\u7b66\0\u7b9c\0\u7bd2\0\u7c08\0\u7c3e"+
    "\0\u7c74\0\u7caa\0\u7ce0\0\u7d16\0\u7d4c\0\u7d82\0\u7db8\0\u7dee"+
    "\0\u7e24\0\u7e5a\0\66\0\u7e90\0\u7ec6\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\4\1\23\1\24\1\25\1\26\1\27"+
    "\1\21\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\21\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\2\1\21\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\70\0\1\61\57\0"+
    "\1\62\6\0\1\63\70\0\1\64\141\0\1\65\4\0"+
    "\10\66\1\0\55\66\11\0\1\12\1\0\1\67\1\70"+
    "\1\12\61\0\1\71\1\72\2\0\1\71\43\0\1\73"+
    "\15\0\1\74\1\0\1\75\1\0\1\74\64\0\2\76"+
    "\2\0\1\76\2\0\2\76\1\77\5\76\1\0\2\76"+
    "\1\100\2\76\1\0\10\76\1\0\2\76\22\0\1\12"+
    "\1\0\1\67\1\101\1\16\2\0\2\102\1\0\10\102"+
    "\1\0\5\102\1\0\10\102\1\0\2\102\11\0\16\103"+
    "\1\104\47\103\11\0\1\105\3\0\1\105\64\0\2\76"+
    "\2\0\1\76\2\0\10\76\1\0\5\76\1\0\10\76"+
    "\1\0\2\76\72\0\1\106\20\0\2\76\2\0\1\76"+
    "\2\0\2\76\1\107\1\76\1\110\3\76\1\0\5\76"+
    "\1\0\10\76\1\0\2\76\25\0\2\76\2\0\1\76"+
    "\2\0\10\76\1\111\1\112\1\113\3\76\1\0\10\76"+
    "\1\0\2\76\25\0\2\76\2\0\1\76\2\0\10\76"+
    "\1\114\1\115\1\116\3\76\1\0\10\76\1\0\2\76"+
    "\25\0\1\117\1\76\2\0\1\76\2\0\10\76\1\0"+
    "\5\76\1\0\10\76\1\0\2\76\25\0\1\120\1\76"+
    "\2\0\1\76\2\0\5\76\1\121\2\76\1\0\1\76"+
    "\1\122\3\76\1\0\10\76\1\0\2\76\25\0\2\76"+
    "\2\0\1\76\2\0\10\76\1\0\1\76\1\123\3\76"+
    "\1\0\10\76\1\0\2\76\36\0\1\124\20\0\1\125"+
    "\33\0\2\76\2\0\1\76\2\0\2\76\1\126\5\76"+
    "\1\0\5\76\1\0\4\76\1\127\3\76\1\0\2\76"+
    "\25\0\2\76\2\0\1\76\2\0\4\76\1\130\3\76"+
    "\1\0\5\76\1\0\4\76\1\131\3\76\1\0\2\76"+
    "\25\0\2\76\2\0\1\76\2\0\1\76\1\132\6\76"+
    "\1\0\1\76\1\133\3\76\1\0\10\76\1\0\2\76"+
    "\25\0\2\76\2\0\1\76\2\0\4\76\1\134\1\135"+
    "\2\76\1\0\1\76\1\136\3\76\1\0\1\76\1\137"+
    "\6\76\1\0\2\76\25\0\2\76\2\0\1\76\2\0"+
    "\1\76\1\140\6\76\1\0\1\76\1\141\3\76\1\0"+
    "\1\76\1\142\6\76\1\0\2\76\25\0\1\143\22\0"+
    "\1\144\3\0\1\145\36\0\1\146\1\76\2\0\1\76"+
    "\2\0\10\76\1\0\3\76\1\147\1\76\1\0\1\76"+
    "\1\150\6\76\1\0\2\76\25\0\2\76\2\0\1\76"+
    "\2\0\1\76\1\151\6\76\1\0\5\76\1\0\10\76"+
    "\1\0\2\76\25\0\2\76\2\0\1\76\2\0\4\76"+
    "\1\152\3\76\1\153\1\154\4\76\1\0\1\76\1\155"+
    "\6\76\1\0\2\76\25\0\2\76\2\0\1\76\2\0"+
    "\1\76\1\156\6\76\1\0\1\76\1\157\3\76\1\0"+
    "\5\76\1\160\2\76\1\0\2\76\25\0\2\76\2\0"+
    "\1\76\2\0\2\76\1\161\5\76\1\0\5\76\1\0"+
    "\10\76\1\0\2\76\25\0\2\76\2\0\1\76\2\0"+
    "\10\76\1\0\1\76\1\162\3\76\1\0\10\76\1\0"+
    "\2\76\25\0\2\76\2\0\1\76\2\0\1\76\1\163"+
    "\2\76\1\164\3\76\1\0\5\76\1\0\10\76\1\0"+
    "\2\76\25\0\2\76\2\0\1\76\2\0\10\76\1\0"+
    "\1\76\1\165\3\76\1\0\10\76\1\0\2\76\70\0"+
    "\1\166\1\0\1\167\64\0\1\170\1\171\64\0\1\172"+
    "\1\173\1\170\3\0\2\61\1\63\1\174\62\61\2\64"+
    "\1\175\1\176\1\64\1\177\60\64\10\66\1\63\55\66"+
    "\11\0\1\200\3\0\1\200\62\0\1\201\2\0\1\202"+
    "\61\0\1\71\1\0\1\203\1\0\1\71\61\0\1\74"+
    "\3\0\1\74\64\0\2\204\2\0\1\204\2\0\10\204"+
    "\1\0\5\204\1\0\10\204\1\0\2\204\25\0\2\204"+
    "\2\0\1\204\2\0\3\204\1\205\4\204\1\0\5\204"+
    "\1\0\10\204\1\0\2\204\25\0\2\204\2\0\1\204"+
    "\2\0\10\204\1\0\5\204\1\206\1\207\7\204\1\0"+
    "\2\204\23\0\1\201\1\0\1\210\1\211\2\0\2\210"+
    "\1\0\10\210\1\0\5\210\1\0\10\210\1\0\2\210"+
    "\25\0\2\210\2\0\2\210\1\0\10\210\1\0\5\210"+
    "\1\0\10\210\1\0\2\210\11\0\16\212\1\213\47\212"+
    "\16\214\1\215\47\214\14\0\2\204\2\0\1\204\2\0"+
    "\3\204\1\216\4\204\1\0\5\204\1\0\10\204\1\0"+
    "\2\204\25\0\2\204\2\0\1\204\2\0\4\204\1\217"+
    "\3\204\1\0\5\204\1\0\10\204\1\0\2\204\47\0"+
    "\1\220\43\0\2\204\2\0\1\204\2\0\10\204\1\0"+
    "\2\204\1\221\2\204\1\0\10\204\1\0\2\204\25\0"+
    "\2\204\2\0\1\204\2\0\10\204\1\0\3\204\1\222"+
    "\1\204\1\0\10\204\1\0\2\204\55\0\1\223\35\0"+
    "\2\204\2\0\1\204\2\0\10\204\1\0\5\204\1\0"+
    "\2\204\1\224\5\204\1\0\2\204\25\0\2\204\2\0"+
    "\1\204\2\0\10\204\1\0\5\204\1\0\3\204\1\225"+
    "\4\204\1\0\2\204\25\0\2\204\2\0\1\204\2\0"+
    "\1\204\1\226\6\204\1\0\4\204\1\227\1\0\7\204"+
    "\1\230\1\0\2\204\25\0\2\204\2\0\1\204\2\0"+
    "\7\204\1\231\1\0\5\204\1\0\10\204\1\0\2\204"+
    "\25\0\2\204\2\0\1\204\2\0\10\204\1\0\3\204"+
    "\1\232\1\204\1\0\10\204\1\0\2\204\25\0\2\204"+
    "\2\0\1\204\2\0\10\204\1\0\1\204\1\233\3\204"+
    "\1\0\10\204\1\0\2\204\25\0\2\204\2\0\1\204"+
    "\2\0\10\204\1\0\3\204\1\234\1\204\1\0\10\204"+
    "\1\0\2\204\47\0\1\235\1\236\42\0\2\204\2\0"+
    "\1\204\2\0\10\204\1\0\2\204\1\237\1\240\1\204"+
    "\1\0\10\204\1\0\2\204\25\0\2\204\2\0\1\204"+
    "\2\0\6\204\1\241\1\204\1\0\5\204\1\0\10\204"+
    "\1\0\2\204\25\0\2\204\2\0\1\204\2\0\2\204"+
    "\1\242\5\204\1\0\5\204\1\0\10\204\1\0\2\204"+
    "\25\0\2\204\2\0\1\204\2\0\10\204\1\0\5\204"+
    "\1\0\5\204\1\243\2\204\1\0\2\204\25\0\2\204"+
    "\2\0\1\204\2\0\10\204\1\0\5\204\1\0\7\204"+
    "\1\232\1\0\2\204\25\0\1\244\1\204\2\0\1\204"+
    "\2\0\10\204\1\0\5\204\1\0\10\204\1\0\2\204"+
    "\25\0\2\204\2\0\1\204\2\0\10\204\1\0\5\204"+
    "\1\245\1\246\7\204\1\0\2\204\25\0\2\204\2\0"+
    "\1\204\2\0\2\204\1\247\5\204\1\0\5\204\1\0"+
    "\10\204\1\0\2\204\25\0\2\204\2\0\1\204\2\0"+
    "\1\204\1\250\6\204\1\0\5\204\1\0\10\204\1\0"+
    "\2\204\50\0\1\220\55\0\1\251\73\0\1\252\44\0"+
    "\2\204\2\0\1\204\2\0\10\204\1\0\3\204\1\221"+
    "\1\204\1\0\10\204\1\0\2\204\25\0\2\204\2\0"+
    "\1\204\2\0\4\204\1\253\3\204\1\0\5\204\1\0"+
    "\10\204\1\0\2\204\25\0\2\204\2\0\1\204\2\0"+
    "\10\204\1\0\1\204\1\254\3\204\1\0\10\204\1\0"+
    "\2\204\25\0\2\204\2\0\1\204\2\0\4\204\1\255"+
    "\3\204\1\0\5\204\1\0\10\204\1\0\2\204\25\0"+
    "\2\204\2\0\1\204\2\0\10\204\1\256\1\257\4\204"+
    "\1\0\10\204\1\0\2\204\50\0\1\260\42\0\2\204"+
    "\2\0\1\204\2\0\10\204\1\0\3\204\1\261\1\204"+
    "\1\0\10\204\1\0\2\204\25\0\2\204\2\0\1\204"+
    "\2\0\10\204\1\262\1\263\4\204\1\0\10\204\1\0"+
    "\2\204\25\0\2\204\2\0\1\204\2\0\10\204\1\0"+
    "\2\204\1\264\2\204\1\0\10\204\1\0\2\204\25\0"+
    "\2\204\2\0\1\204\2\0\4\204\1\265\3\204\1\0"+
    "\5\204\1\0\10\204\1\0\2\204\25\0\2\204\2\0"+
    "\1\204\2\0\2\204\1\266\5\204\1\0\5\204\1\0"+
    "\10\204\1\0\2\204\25\0\2\204\2\0\1\204\2\0"+
    "\10\204\1\0\3\204\1\267\1\204\1\0\10\204\1\0"+
    "\2\204\25\0\2\204\2\0\1\204\2\0\3\204\1\270"+
    "\4\204\1\0\5\204\1\0\10\204\1\0\2\204\25\0"+
    "\2\204\2\0\1\204\2\0\10\204\1\0\4\204\1\271"+
    "\1\0\10\204\1\0\2\204\25\0\2\204\2\0\1\204"+
    "\2\0\10\204\1\0\1\204\1\272\3\204\1\0\10\204"+
    "\1\0\2\204\25\0\2\204\2\0\1\204\2\0\4\204"+
    "\1\221\3\204\1\0\5\204\1\0\10\204\1\0\2\204"+
    "\72\0\1\273\4\0\2\274\1\275\1\276\1\274\1\277"+
    "\60\274\2\300\1\301\1\302\1\300\1\303\60\300\2\64"+
    "\1\175\1\176\1\64\1\177\1\304\57\64\11\0\1\200"+
    "\2\0\1\305\1\200\65\0\1\202\61\0\1\306\3\0"+
    "\1\306\64\0\2\307\2\0\1\307\2\0\10\307\1\0"+
    "\5\307\1\0\10\307\1\0\2\307\25\0\1\310\65\0"+
    "\1\311\1\307\2\0\1\307\2\0\10\307\1\0\5\307"+
    "\1\0\10\307\1\0\2\307\25\0\2\312\2\0\2\312"+
    "\1\0\10\312\1\0\5\312\1\0\10\312\1\0\2\312"+
    "\25\0\1\312\1\313\2\0\2\312\1\0\10\312\1\0"+
    "\5\312\1\0\10\312\1\0\2\312\25\0\2\307\2\0"+
    "\1\307\2\0\1\307\1\314\6\307\1\0\5\307\1\0"+
    "\10\307\1\0\2\307\25\0\2\307\2\0\1\307\2\0"+
    "\2\307\1\315\5\307\1\0\5\307\1\0\10\307\1\0"+
    "\2\307\25\0\2\307\2\0\1\307\2\0\3\307\1\316"+
    "\4\307\1\0\2\307\1\317\2\307\1\0\10\307\1\0"+
    "\2\307\25\0\2\307\2\0\1\307\2\0\10\307\1\0"+
    "\1\307\1\320\3\307\1\0\10\307\1\0\2\307\25\0"+
    "\1\321\1\307\2\0\1\307\2\0\10\307\1\0\5\307"+
    "\1\0\10\307\1\0\2\307\25\0\2\307\2\0\1\307"+
    "\2\0\10\307\1\322\1\323\4\307\1\0\10\307\1\0"+
    "\2\307\25\0\1\324\1\307\2\0\1\307\2\0\10\307"+
    "\1\0\5\307\1\0\10\307\1\0\2\307\25\0\2\307"+
    "\2\0\1\307\2\0\10\307\1\0\2\307\1\325\2\307"+
    "\1\0\10\307\1\0\2\307\25\0\2\307\2\0\1\307"+
    "\2\0\10\307\1\0\1\307\1\324\3\307\1\0\10\307"+
    "\1\0\2\307\44\0\2\326\45\0\2\307\2\0\1\307"+
    "\2\0\10\307\1\326\1\327\4\307\1\0\10\307\1\0"+
    "\2\307\25\0\1\330\1\307\2\0\1\307\2\0\10\307"+
    "\1\0\5\307\1\0\10\307\1\0\2\307\25\0\2\307"+
    "\2\0\1\307\2\0\7\307\1\331\1\0\5\307\1\0"+
    "\10\307\1\0\2\307\25\0\1\332\1\307\2\0\1\307"+
    "\2\0\10\307\1\0\5\307\1\0\10\307\1\0\2\307"+
    "\25\0\2\307\2\0\1\307\2\0\2\307\1\333\5\307"+
    "\1\0\5\307\1\0\10\307\1\0\2\307\25\0\1\334"+
    "\65\0\1\335\1\307\2\0\1\307\2\0\10\307\1\0"+
    "\5\307\1\0\10\307\1\0\2\307\25\0\2\307\2\0"+
    "\1\307\2\0\10\307\1\0\5\307\1\336\1\337\7\307"+
    "\1\0\2\307\25\0\2\307\2\0\1\307\2\0\4\307"+
    "\1\340\3\307\1\0\5\307\1\0\10\307\1\0\2\307"+
    "\44\0\2\341\60\0\1\342\52\0\2\307\2\0\1\307"+
    "\2\0\10\307\1\341\1\343\4\307\1\0\10\307\1\0"+
    "\2\307\25\0\2\307\2\0\1\307\2\0\4\307\1\344"+
    "\3\307\1\0\5\307\1\0\10\307\1\0\2\307\50\0"+
    "\1\345\42\0\2\307\2\0\1\307\2\0\10\307\1\0"+
    "\3\307\1\346\1\307\1\0\10\307\1\0\2\307\54\0"+
    "\1\220\36\0\2\307\2\0\1\307\2\0\10\307\1\0"+
    "\5\307\1\0\1\307\1\324\6\307\1\0\2\307\47\0"+
    "\1\347\43\0\2\307\2\0\1\307\2\0\10\307\1\0"+
    "\2\307\1\350\2\307\1\0\10\307\1\0\2\307\25\0"+
    "\2\307\2\0\1\307\2\0\10\307\1\0\5\307\1\351"+
    "\1\352\7\307\1\0\2\307\25\0\2\307\2\0\1\307"+
    "\2\0\10\307\1\0\5\307\1\0\3\307\1\353\4\307"+
    "\1\0\2\307\25\0\2\307\2\0\1\307\2\0\10\307"+
    "\1\0\4\307\1\354\1\0\10\307\1\0\2\307\25\0"+
    "\2\307\2\0\1\307\2\0\10\307\1\355\1\356\4\307"+
    "\1\0\10\307\1\0\2\307\25\0\2\307\2\0\1\307"+
    "\2\0\10\307\1\0\5\307\1\0\10\307\1\357\1\360"+
    "\1\307\25\0\2\307\2\0\1\307\2\0\7\307\1\361"+
    "\1\0\4\307\1\362\1\0\10\307\1\0\2\307\11\0"+
    "\2\274\1\275\1\363\1\274\1\277\60\274\2\364\1\365"+
    "\1\366\1\364\1\367\60\364\2\274\1\275\1\363\1\274"+
    "\1\277\1\370\57\274\2\300\1\371\1\302\1\300\1\303"+
    "\60\300\2\372\1\373\1\365\1\372\1\374\60\372\2\300"+
    "\1\371\1\302\1\300\1\303\1\375\57\300\12\0\1\376"+
    "\2\0\1\377\64\0\2\u0100\2\0\1\u0100\2\0\10\u0100"+
    "\1\0\5\u0100\1\0\10\u0100\1\0\2\u0100\25\0\2\u0101"+
    "\2\0\2\u0101\1\0\10\u0101\1\0\5\u0101\1\0\10\u0101"+
    "\1\0\2\u0101\25\0\1\u0101\1\u0102\2\0\2\u0101\1\0"+
    "\10\u0101\1\0\5\u0101\1\0\10\u0101\1\0\2\u0101\25\0"+
    "\2\u0100\2\0\1\u0100\2\0\5\u0100\1\u0103\2\u0100\1\0"+
    "\5\u0100\1\0\10\u0100\1\0\2\u0100\25\0\2\u0100\2\0"+
    "\1\u0100\2\0\10\u0100\1\0\3\u0100\1\u0104\1\u0100\1\0"+
    "\10\u0100\1\0\2\u0100\25\0\2\u0100\2\0\1\u0100\2\0"+
    "\4\u0100\1\u0105\3\u0100\1\0\5\u0100\1\0\10\u0100\1\0"+
    "\2\u0100\25\0\2\u0100\2\0\1\u0100\2\0\1\u0100\1\u0106"+
    "\6\u0100\1\0\5\u0100\1\0\10\u0100\1\0\2\u0100\36\0"+
    "\1\u0107\54\0\2\u0100\2\0\1\u0100\2\0\2\u0100\1\u0108"+
    "\5\u0100\1\0\5\u0100\1\0\10\u0100\1\0\2\u0100\25\0"+
    "\1\u0109\1\u0100\2\0\1\u0100\2\0\10\u0100\1\0\5\u0100"+
    "\1\0\10\u0100\1\0\2\u0100\36\0\1\u010a\54\0\2\u0100"+
    "\2\0\1\u0100\2\0\2\u0100\1\u010b\5\u0100\1\0\5\u0100"+
    "\1\0\10\u0100\1\0\2\u0100\25\0\2\u0100\2\0\1\u0100"+
    "\2\0\10\u0100\1\0\2\u0100\1\u010c\2\u0100\1\0\10\u0100"+
    "\1\0\2\u0100\25\0\2\u0100\2\0\1\u0100\2\0\10\u0100"+
    "\1\u010d\1\u010e\4\u0100\1\0\10\u0100\1\0\2\u0100\50\0"+
    "\1\u010f\42\0\2\u0100\2\0\1\u0100\2\0\10\u0100\1\0"+
    "\3\u0100\1\u0110\1\u0100\1\0\10\u0100\1\0\2\u0100\36\0"+
    "\1\u0111\77\0\1\u0112\42\0\2\u0100\2\0\1\u0100\2\0"+
    "\2\u0100\1\u0113\5\u0100\1\0\5\u0100\1\0\10\u0100\1\0"+
    "\2\u0100\25\0\2\u0100\2\0\1\u0100\2\0\10\u0100\1\0"+
    "\3\u0100\1\u0114\1\u0100\1\0\10\u0100\1\0\2\u0100\25\0"+
    "\1\u0115\65\0\1\u0116\1\u0100\2\0\1\u0100\2\0\10\u0100"+
    "\1\0\5\u0100\1\0\10\u0100\1\0\2\u0100\25\0\1\u0117"+
    "\65\0\1\u0118\1\u0100\2\0\1\u0100\2\0\10\u0100\1\0"+
    "\5\u0100\1\0\10\u0100\1\0\2\u0100\25\0\1\u0119\65\0"+
    "\1\u011a\1\u0100\2\0\1\u0100\2\0\10\u0100\1\0\5\u0100"+
    "\1\0\10\u0100\1\0\2\u0100\25\0\2\u0100\2\0\1\u0100"+
    "\2\0\1\u0100\1\u011b\6\u0100\1\0\5\u0100\1\0\10\u0100"+
    "\1\0\2\u0100\25\0\2\u0100\2\0\1\u0100\2\0\10\u0100"+
    "\1\0\3\u0100\1\u011c\1\u0100\1\0\10\u0100\1\0\2\u0100"+
    "\47\0\1\u011d\43\0\2\u0100\2\0\1\u0100\2\0\10\u0100"+
    "\1\0\2\u0100\1\u011e\2\u0100\1\0\10\u0100\1\0\2\u0100"+
    "\25\0\1\u011f\65\0\1\u0105\1\u0100\2\0\1\u0100\2\0"+
    "\10\u0100\1\0\5\u0100\1\0\10\u0100\1\0\2\u0100\25\0"+
    "\2\u0100\2\0\1\u0100\2\0\4\u0100\1\u0120\3\u0100\1\0"+
    "\5\u0100\1\0\10\u0100\1\0\2\u0100\25\0\1\u0121\1\u0100"+
    "\2\0\1\u0100\2\0\10\u0100\1\0\5\u0100\1\0\10\u0100"+
    "\1\0\2\u0100\11\0\2\u0122\1\301\1\u0123\1\u0122\1\u0124"+
    "\60\u0122\3\364\1\366\1\364\1\367\60\364\5\u0125\1\u0126"+
    "\60\u0125\3\364\1\366\1\364\1\367\1\u0127\57\364\2\u0122"+
    "\1\u0128\1\276\1\u0122\1\u0124\60\u0122\2\372\1\373\2\372"+
    "\1\374\62\372\1\373\2\372\1\374\1\u0129\57\372\15\0"+
    "\1\377\63\0\1\u012a\1\0\1\u012b\64\0\2\u012c\2\0"+
    "\1\u012c\2\0\10\u012c\1\0\5\u012c\1\0\10\u012c\1\0"+
    "\2\u012c\25\0\2\u012d\2\0\2\u012d\1\0\10\u012d\1\0"+
    "\5\u012d\1\0\10\u012d\1\0\2\u012d\25\0\1\u012d\1\u012e"+
    "\2\0\2\u012d\1\0\10\u012d\1\0\5\u012d\1\0\10\u012d"+
    "\1\0\2\u012d\25\0\2\u012c\2\0\1\u012c\2\0\10\u012c"+
    "\1\0\1\u012c\1\u012f\3\u012c\1\0\10\u012c\1\0\2\u012c"+
    "\25\0\2\u012c\2\0\1\u012c\2\0\3\u012c\1\u012f\4\u012c"+
    "\1\0\5\u012c\1\0\10\u012c\1\0\2\u012c\25\0\2\u012c"+
    "\2\0\1\u012c\2\0\10\u012c\1\0\3\u012c\1\u0130\1\u012c"+
    "\1\0\10\u012c\1\0\2\u012c\25\0\2\u012c\2\0\1\u012c"+
    "\2\0\1\u012c\1\u0131\6\u012c\1\0\5\u012c\1\0\10\u012c"+
    "\1\0\2\u012c\25\0\1\220\65\0\1\u012f\1\u012c\2\0"+
    "\1\u012c\2\0\10\u012c\1\0\5\u012c\1\0\10\u012c\1\0"+
    "\2\u012c\36\0\1\u0132\54\0\2\u012c\2\0\1\u012c\2\0"+
    "\2\u012c\1\u0133\5\u012c\1\0\5\u012c\1\0\10\u012c\1\0"+
    "\2\u012c\43\0\1\u0134\66\0\2\u0135\45\0\2\u012c\2\0"+
    "\1\u012c\2\0\7\u012c\1\u0136\1\0\5\u012c\1\0\10\u012c"+
    "\1\0\2\u012c\25\0\2\u012c\2\0\1\u012c\2\0\10\u012c"+
    "\1\u0135\1\u0137\4\u012c\1\0\10\u012c\1\0\2\u012c\25\0"+
    "\2\u012c\2\0\1\u012c\2\0\4\u012c\1\u0138\3\u012c\1\0"+
    "\5\u012c\1\0\10\u012c\1\0\2\u012c\25\0\2\u012c\2\0"+
    "\1\u012c\2\0\10\u012c\1\u0139\1\u013a\4\u012c\1\0\10\u012c"+
    "\1\0\2\u012c\37\0\1\220\53\0\2\u012c\2\0\1\u012c"+
    "\2\0\1\u012c\1\u013b\6\u012c\1\0\5\u012c\1\0\10\u012c"+
    "\1\0\2\u012c\25\0\2\u012c\2\0\1\u012c\2\0\3\u012c"+
    "\1\u013c\4\u012c\1\0\5\u012c\1\0\10\u012c\1\0\2\u012c"+
    "\11\0\2\u0122\1\u0128\1\u0123\1\u0122\1\u0124\62\u0122\1\u0128"+
    "\1\u0123\1\u0122\1\u0124\1\u013d\57\u0122\5\u0125\1\u0126\1\u013e"+
    "\57\u0125\15\0\1\u013f\65\0\1\u012b\64\0\2\u0140\2\0"+
    "\1\u0140\2\0\10\u0140\1\0\5\u0140\1\0\10\u0140\1\0"+
    "\2\u0140\25\0\2\u0141\2\0\2\u0141\1\0\10\u0141\1\0"+
    "\5\u0141\1\0\10\u0141\1\0\2\u0141\25\0\1\u0141\1\u0142"+
    "\2\0\2\u0141\1\0\10\u0141\1\0\5\u0141\1\0\10\u0141"+
    "\1\0\2\u0141\25\0\2\u0140\2\0\1\u0140\2\0\2\u0140"+
    "\1\u0143\5\u0140\1\0\5\u0140\1\0\10\u0140\1\0\2\u0140"+
    "\50\0\1\u0144\42\0\2\u0140\2\0\1\u0140\2\0\10\u0140"+
    "\1\0\3\u0140\1\u0145\1\u0140\1\0\10\u0140\1\0\2\u0140"+
    "\36\0\1\u0146\54\0\2\u0140\2\0\1\u0140\2\0\2\u0140"+
    "\1\u0147\5\u0140\1\0\5\u0140\1\0\10\u0140\1\0\2\u0140"+
    "\25\0\2\u0140\2\0\1\u0140\2\0\3\u0140\1\u0148\4\u0140"+
    "\1\0\5\u0140\1\0\10\u0140\1\0\2\u0140\46\0\1\u0149"+
    "\44\0\2\u0140\2\0\1\u0140\2\0\10\u0140\1\0\1\u0140"+
    "\1\u014a\3\u0140\1\0\10\u0140\1\0\2\u0140\25\0\2\u0140"+
    "\2\0\1\u0140\2\0\10\u0140\1\0\5\u0140\1\0\6\u0140"+
    "\1\u014b\1\u0140\1\0\2\u0140\25\0\2\u0140\2\0\1\u0140"+
    "\2\0\10\u0140\1\0\5\u0140\1\0\5\u0140\1\u014c\2\u0140"+
    "\1\0\2\u0140\25\0\2\u014d\2\0\1\u014d\2\0\10\u014d"+
    "\1\0\5\u014d\1\0\10\u014d\1\0\2\u014d\25\0\2\u014e"+
    "\2\0\2\u014e\1\0\10\u014e\1\0\5\u014e\1\0\10\u014e"+
    "\1\0\2\u014e\25\0\1\u014e\1\u014f\2\0\2\u014e\1\0"+
    "\10\u014e\1\0\5\u014e\1\0\10\u014e\1\0\2\u014e\50\0"+
    "\1\u0150\42\0\2\u014d\2\0\1\u014d\2\0\10\u014d\1\0"+
    "\3\u014d\1\u0151\1\u014d\1\0\10\u014d\1\0\2\u014d\36\0"+
    "\1\u0152\54\0\2\u014d\2\0\1\u014d\2\0\2\u014d\1\u0153"+
    "\5\u014d\1\0\5\u014d\1\0\10\u014d\1\0\2\u014d\25\0"+
    "\2\u014d\2\0\1\u014d\2\0\4\u014d\1\u0154\3\u014d\1\0"+
    "\5\u014d\1\0\10\u014d\1\0\2\u014d\25\0\2\u0155\2\0"+
    "\1\u0155\2\0\10\u0155\1\0\5\u0155\1\0\10\u0155\1\0"+
    "\2\u0155\25\0\2\u0156\2\0\2\u0156\1\0\10\u0156\1\0"+
    "\5\u0156\1\0\10\u0156\1\0\2\u0156\25\0\1\u0156\1\u0157"+
    "\2\0\2\u0156\1\0\10\u0156\1\0\5\u0156\1\0\10\u0156"+
    "\1\0\2\u0156\25\0\1\u0158\1\u0155\2\0\1\u0155\2\0"+
    "\10\u0155\1\0\5\u0155\1\0\10\u0155\1\0\2\u0155\25\0"+
    "\2\u0159\2\0\1\u0159\2\0\10\u0159\1\0\5\u0159\1\0"+
    "\10\u0159\1\0\2\u0159\25\0\2\u015a\2\0\2\u015a\1\0"+
    "\10\u015a\1\0\5\u015a\1\0\10\u015a\1\0\2\u015a\25\0"+
    "\1\u015a\1\u015b\2\0\2\u015a\1\0\10\u015a\1\0\5\u015a"+
    "\1\0\10\u015a\1\0\2\u015a\25\0\2\u015c\2\0\1\u015c"+
    "\2\0\10\u015c\1\0\5\u015c\1\0\10\u015c\1\0\2\u015c"+
    "\25\0\2\u015d\2\0\2\u015d\1\0\10\u015d\1\0\5\u015d"+
    "\1\0\10\u015d\1\0\2\u015d\25\0\1\u015d\1\u015e\2\0"+
    "\2\u015d\1\0\10\u015d\1\0\5\u015d\1\0\10\u015d\1\0"+
    "\2\u015d\25\0\2\u015f\2\0\1\u015f\2\0\10\u015f\1\0"+
    "\5\u015f\1\0\10\u015f\1\0\2\u015f\25\0\2\u0160\2\0"+
    "\2\u0160\1\0\10\u0160\1\0\5\u0160\1\0\10\u0160\1\0"+
    "\2\u0160\25\0\1\u0160\1\u0161\2\0\2\u0160\1\0\10\u0160"+
    "\1\0\5\u0160\1\0\10\u0160\1\0\2\u0160\25\0\2\u0162"+
    "\2\0\1\u0162\2\0\10\u0162\1\0\5\u0162\1\0\10\u0162"+
    "\1\0\2\u0162\25\0\2\u0163\2\0\2\u0163\1\0\10\u0163"+
    "\1\0\5\u0163\1\0\10\u0163\1\0\2\u0163\25\0\1\u0163"+
    "\1\u0164\2\0\2\u0163\1\0\10\u0163\1\0\5\u0163\1\0"+
    "\10\u0163\1\0\2\u0163\25\0\2\u0165\2\0\1\u0165\2\0"+
    "\10\u0165\1\0\5\u0165\1\0\10\u0165\1\0\2\u0165\25\0"+
    "\2\u0166\2\0\2\u0166\1\0\10\u0166\1\0\5\u0166\1\0"+
    "\10\u0166\1\0\2\u0166\25\0\1\u0166\1\u0167\2\0\2\u0166"+
    "\1\0\10\u0166\1\0\5\u0166\1\0\10\u0166\1\0\2\u0166"+
    "\25\0\2\u0168\2\0\1\u0168\2\0\10\u0168\1\0\5\u0168"+
    "\1\0\10\u0168\1\0\2\u0168\25\0\2\u0169\2\0\2\u0169"+
    "\1\0\10\u0169\1\0\5\u0169\1\0\10\u0169\1\0\2\u0169"+
    "\25\0\1\u0169\1\u016a\2\0\2\u0169\1\0\10\u0169\1\0"+
    "\5\u0169\1\0\10\u0169\1\0\2\u0169\25\0\2\u016b\2\0"+
    "\1\u016b\2\0\10\u016b\1\0\5\u016b\1\0\10\u016b\1\0"+
    "\2\u016b\25\0\2\u016c\2\0\2\u016c\1\0\10\u016c\1\0"+
    "\5\u016c\1\0\10\u016c\1\0\2\u016c\25\0\1\u016c\1\u016d"+
    "\2\0\2\u016c\1\0\10\u016c\1\0\5\u016c\1\0\10\u016c"+
    "\1\0\2\u016c\25\0\2\u016e\2\0\1\u016e\2\0\10\u016e"+
    "\1\0\5\u016e\1\0\10\u016e\1\0\2\u016e\25\0\2\u016f"+
    "\2\0\2\u016f\1\0\10\u016f\1\0\5\u016f\1\0\10\u016f"+
    "\1\0\2\u016f\25\0\1\u016f\1\u0170\2\0\2\u016f\1\0"+
    "\10\u016f\1\0\5\u016f\1\0\10\u016f\1\0\2\u016f\25\0"+
    "\2\u0171\2\0\1\u0171\2\0\10\u0171\1\0\5\u0171\1\0"+
    "\10\u0171\1\0\2\u0171\25\0\2\u0172\2\0\2\u0172\1\0"+
    "\10\u0172\1\0\5\u0172\1\0\10\u0172\1\0\2\u0172\25\0"+
    "\1\u0172\1\u0173\2\0\2\u0172\1\0\10\u0172\1\0\5\u0172"+
    "\1\0\10\u0172\1\0\2\u0172\25\0\2\u0174\2\0\1\u0174"+
    "\2\0\10\u0174\1\0\5\u0174\1\0\10\u0174\1\0\2\u0174"+
    "\25\0\2\u0175\2\0\2\u0175\1\0\10\u0175\1\0\5\u0175"+
    "\1\0\10\u0175\1\0\2\u0175\25\0\1\u0175\1\u0176\2\0"+
    "\2\u0175\1\0\10\u0175\1\0\5\u0175\1\0\10\u0175\1\0"+
    "\2\u0175\25\0\2\u0177\2\0\1\u0177\2\0\10\u0177\1\0"+
    "\5\u0177\1\0\10\u0177\1\0\2\u0177\25\0\2\u0178\2\0"+
    "\2\u0178\1\0\10\u0178\1\0\5\u0178\1\0\10\u0178\1\0"+
    "\2\u0178\25\0\1\u0178\1\u0179\2\0\2\u0178\1\0\10\u0178"+
    "\1\0\5\u0178\1\0\10\u0178\1\0\2\u0178\25\0\2\u017a"+
    "\2\0\1\u017a\2\0\10\u017a\1\0\5\u017a\1\0\10\u017a"+
    "\1\0\2\u017a\25\0\2\u017b\2\0\2\u017b\1\0\10\u017b"+
    "\1\0\5\u017b\1\0\10\u017b\1\0\2\u017b\25\0\1\u017b"+
    "\1\u017c\2\0\2\u017b\1\0\10\u017b\1\0\5\u017b\1\0"+
    "\10\u017b\1\0\2\u017b\25\0\2\u017d\2\0\1\u017d\2\0"+
    "\10\u017d\1\0\5\u017d\1\0\10\u017d\1\0\2\u017d\25\0"+
    "\2\u017e\2\0\2\u017e\1\0\10\u017e\1\0\5\u017e\1\0"+
    "\10\u017e\1\0\2\u017e\25\0\1\u017e\1\u017f\2\0\2\u017e"+
    "\1\0\10\u017e\1\0\5\u017e\1\0\10\u017e\1\0\2\u017e"+
    "\25\0\2\u0180\2\0\1\u0180\2\0\10\u0180\1\0\5\u0180"+
    "\1\0\10\u0180\1\0\2\u0180\25\0\2\u0181\2\0\2\u0181"+
    "\1\0\10\u0181\1\0\5\u0181\1\0\10\u0181\1\0\2\u0181"+
    "\25\0\1\u0181\1\u0182\2\0\2\u0181\1\0\10\u0181\1\0"+
    "\5\u0181\1\0\10\u0181\1\0\2\u0181\25\0\2\u0183\2\0"+
    "\1\u0183\2\0\10\u0183\1\0\5\u0183\1\0\10\u0183\1\0"+
    "\2\u0183\25\0\2\u0184\2\0\2\u0184\1\0\10\u0184\1\0"+
    "\5\u0184\1\0\10\u0184\1\0\2\u0184\25\0\1\u0184\1\u0185"+
    "\2\0\2\u0184\1\0\10\u0184\1\0\5\u0184\1\0\10\u0184"+
    "\1\0\2\u0184\25\0\2\u0186\2\0\1\u0186\2\0\10\u0186"+
    "\1\0\5\u0186\1\0\10\u0186\1\0\2\u0186\25\0\2\u0187"+
    "\2\0\2\u0187\1\0\10\u0187\1\0\5\u0187\1\0\10\u0187"+
    "\1\0\2\u0187\25\0\1\u0187\1\u0188\2\0\2\u0187\1\0"+
    "\10\u0187\1\0\5\u0187\1\0\10\u0187\1\0\2\u0187\25\0"+
    "\2\u0189\2\0\1\u0189\2\0\10\u0189\1\0\5\u0189\1\0"+
    "\10\u0189\1\0\2\u0189\25\0\2\u018a\2\0\2\u018a\1\0"+
    "\10\u018a\1\0\5\u018a\1\0\10\u018a\1\0\2\u018a\25\0"+
    "\1\u018a\1\u018b\2\0\2\u018a\1\0\10\u018a\1\0\5\u018a"+
    "\1\0\10\u018a\1\0\2\u018a\25\0\2\u018c\2\0\1\u018c"+
    "\2\0\10\u018c\1\0\5\u018c\1\0\10\u018c\1\0\2\u018c"+
    "\25\0\2\u018d\2\0\2\u018d\1\0\10\u018d\1\0\5\u018d"+
    "\1\0\10\u018d\1\0\2\u018d\25\0\1\u018d\1\u018e\2\0"+
    "\2\u018d\1\0\10\u018d\1\0\5\u018d\1\0\10\u018d\1\0"+
    "\2\u018d\25\0\2\u018f\2\0\1\u018f\2\0\10\u018f\1\0"+
    "\5\u018f\1\0\10\u018f\1\0\2\u018f\25\0\2\u0190\2\0"+
    "\2\u0190\1\0\10\u0190\1\0\5\u0190\1\0\10\u0190\1\0"+
    "\2\u0190\25\0\1\u0190\1\u0191\2\0\2\u0190\1\0\10\u0190"+
    "\1\0\5\u0190\1\0\10\u0190\1\0\2\u0190\25\0\2\u0192"+
    "\2\0\1\u0192\2\0\10\u0192\1\0\5\u0192\1\0\10\u0192"+
    "\1\0\2\u0192\25\0\2\u0193\2\0\2\u0193\1\0\10\u0193"+
    "\1\0\5\u0193\1\0\10\u0193\1\0\2\u0193\25\0\1\u0193"+
    "\1\u0194\2\0\2\u0193\1\0\10\u0193\1\0\5\u0193\1\0"+
    "\10\u0193\1\0\2\u0193\25\0\2\u0195\2\0\1\u0195\2\0"+
    "\10\u0195\1\0\5\u0195\1\0\10\u0195\1\0\2\u0195\25\0"+
    "\2\u0196\2\0\2\u0196\1\0\10\u0196\1\0\5\u0196\1\0"+
    "\10\u0196\1\0\2\u0196\25\0\1\u0196\1\u0197\2\0\2\u0196"+
    "\1\0\10\u0196\1\0\5\u0196\1\0\10\u0196\1\0\2\u0196"+
    "\25\0\2\u0198\2\0\1\u0198\2\0\10\u0198\1\0\5\u0198"+
    "\1\0\10\u0198\1\0\2\u0198\25\0\2\u0199\2\0\2\u0199"+
    "\1\0\10\u0199\1\0\5\u0199\1\0\10\u0199\1\0\2\u0199"+
    "\25\0\1\u0199\1\u019a\2\0\2\u0199\1\0\10\u0199\1\0"+
    "\5\u0199\1\0\10\u0199\1\0\2\u0199\25\0\2\u019b\2\0"+
    "\1\u019b\2\0\10\u019b\1\0\5\u019b\1\0\10\u019b\1\0"+
    "\2\u019b\25\0\2\u019c\2\0\2\u019c\1\0\10\u019c\1\0"+
    "\5\u019c\1\0\10\u019c\1\0\2\u019c\25\0\1\u019c\1\u019d"+
    "\2\0\2\u019c\1\0\10\u019c\1\0\5\u019c\1\0\10\u019c"+
    "\1\0\2\u019c\25\0\2\u019e\2\0\1\u019e\2\0\10\u019e"+
    "\1\0\5\u019e\1\0\10\u019e\1\0\2\u019e\25\0\2\u019f"+
    "\2\0\2\u019f\1\0\10\u019f\1\0\5\u019f\1\0\10\u019f"+
    "\1\0\2\u019f\25\0\1\u019f\1\u01a0\2\0\2\u019f\1\0"+
    "\10\u019f\1\0\5\u019f\1\0\10\u019f\1\0\2\u019f\25\0"+
    "\2\u01a1\2\0\1\u01a1\2\0\10\u01a1\1\0\5\u01a1\1\0"+
    "\10\u01a1\1\0\2\u01a1\25\0\2\u01a2\2\0\2\u01a2\1\0"+
    "\10\u01a2\1\0\5\u01a2\1\0\10\u01a2\1\0\2\u01a2\25\0"+
    "\1\u01a2\1\u01a3\2\0\2\u01a2\1\0\10\u01a2\1\0\5\u01a2"+
    "\1\0\10\u01a2\1\0\2\u01a2\25\0\2\u01a4\2\0\1\u01a4"+
    "\2\0\10\u01a4\1\0\5\u01a4\1\0\10\u01a4\1\0\2\u01a4"+
    "\25\0\2\u01a5\2\0\2\u01a5\1\0\10\u01a5\1\0\5\u01a5"+
    "\1\0\10\u01a5\1\0\2\u01a5\25\0\1\u01a5\1\u01a6\2\0"+
    "\2\u01a5\1\0\10\u01a5\1\0\5\u01a5\1\0\10\u01a5\1\0"+
    "\2\u01a5\25\0\2\u01a7\2\0\1\u01a7\2\0\10\u01a7\1\0"+
    "\5\u01a7\1\0\10\u01a7\1\0\2\u01a7\25\0\2\u01a8\2\0"+
    "\2\u01a8\1\0\10\u01a8\1\0\5\u01a8\1\0\10\u01a8\1\0"+
    "\2\u01a8\25\0\1\u01a8\1\u01a9\2\0\2\u01a8\1\0\10\u01a8"+
    "\1\0\5\u01a8\1\0\10\u01a8\1\0\2\u01a8\25\0\2\u01aa"+
    "\2\0\1\u01aa\2\0\10\u01aa\1\0\5\u01aa\1\0\10\u01aa"+
    "\1\0\2\u01aa\25\0\2\u01ab\2\0\2\u01ab\1\0\10\u01ab"+
    "\1\0\5\u01ab\1\0\10\u01ab\1\0\2\u01ab\25\0\1\u01ab"+
    "\1\u01ac\2\0\2\u01ab\1\0\10\u01ab\1\0\5\u01ab\1\0"+
    "\10\u01ab\1\0\2\u01ab\25\0\2\u01ad\2\0\1\u01ad\2\0"+
    "\10\u01ad\1\0\5\u01ad\1\0\10\u01ad\1\0\2\u01ad\25\0"+
    "\2\u01ae\2\0\2\u01ae\1\0\10\u01ae\1\0\5\u01ae\1\0"+
    "\10\u01ae\1\0\2\u01ae\25\0\1\u01ae\1\u01af\2\0\2\u01ae"+
    "\1\0\10\u01ae\1\0\5\u01ae\1\0\10\u01ae\1\0\2\u01ae"+
    "\25\0\2\u01b0\2\0\1\u01b0\2\0\10\u01b0\1\0\5\u01b0"+
    "\1\0\10\u01b0\1\0\2\u01b0\25\0\2\u01b1\2\0\2\u01b1"+
    "\1\0\10\u01b1\1\0\5\u01b1\1\0\10\u01b1\1\0\2\u01b1"+
    "\25\0\1\u01b1\1\u01b2\2\0\2\u01b1\1\0\10\u01b1\1\0"+
    "\5\u01b1\1\0\10\u01b1\1\0\2\u01b1\25\0\2\u01b3\2\0"+
    "\1\u01b3\2\0\10\u01b3\1\0\5\u01b3\1\0\10\u01b3\1\0"+
    "\2\u01b3\25\0\2\u01b4\2\0\2\u01b4\1\0\10\u01b4\1\0"+
    "\5\u01b4\1\0\10\u01b4\1\0\2\u01b4\25\0\1\u01b4\1\u01b5"+
    "\2\0\2\u01b4\1\0\10\u01b4\1\0\5\u01b4\1\0\10\u01b4"+
    "\1\0\2\u01b4\25\0\2\u01b6\2\0\1\u01b6\2\0\10\u01b6"+
    "\1\0\5\u01b6\1\0\10\u01b6\1\0\2\u01b6\25\0\2\u01b7"+
    "\2\0\2\u01b7\1\0\10\u01b7\1\0\5\u01b7\1\0\10\u01b7"+
    "\1\0\2\u01b7\25\0\1\u01b7\1\u01b8\2\0\2\u01b7\1\0"+
    "\10\u01b7\1\0\5\u01b7\1\0\10\u01b7\1\0\2\u01b7\25\0"+
    "\2\u01b9\2\0\1\u01b9\2\0\10\u01b9\1\0\5\u01b9\1\0"+
    "\10\u01b9\1\0\2\u01b9\25\0\2\u01ba\2\0\2\u01ba\1\0"+
    "\10\u01ba\1\0\5\u01ba\1\0\10\u01ba\1\0\2\u01ba\25\0"+
    "\1\u01ba\1\u01bb\2\0\2\u01ba\1\0\10\u01ba\1\0\5\u01ba"+
    "\1\0\10\u01ba\1\0\2\u01ba\25\0\2\u01bc\2\0\1\u01bc"+
    "\2\0\10\u01bc\1\0\5\u01bc\1\0\10\u01bc\1\0\2\u01bc"+
    "\25\0\2\u01bd\2\0\2\u01bd\1\0\10\u01bd\1\0\5\u01bd"+
    "\1\0\10\u01bd\1\0\2\u01bd\25\0\1\u01bd\1\u01be\2\0"+
    "\2\u01bd\1\0\10\u01bd\1\0\5\u01bd\1\0\10\u01bd\1\0"+
    "\2\u01bd\25\0\2\u01bf\2\0\1\u01bf\2\0\10\u01bf\1\0"+
    "\5\u01bf\1\0\10\u01bf\1\0\2\u01bf\25\0\2\u01c0\2\0"+
    "\2\u01c0\1\0\10\u01c0\1\0\5\u01c0\1\0\10\u01c0\1\0"+
    "\2\u01c0\25\0\1\u01c0\1\u01c1\2\0\2\u01c0\1\0\10\u01c0"+
    "\1\0\5\u01c0\1\0\10\u01c0\1\0\2\u01c0\25\0\2\u01c2"+
    "\2\0\1\u01c2\2\0\10\u01c2\1\0\5\u01c2\1\0\10\u01c2"+
    "\1\0\2\u01c2\25\0\2\u01c3\2\0\2\u01c3\1\0\10\u01c3"+
    "\1\0\5\u01c3\1\0\10\u01c3\1\0\2\u01c3\25\0\1\u01c3"+
    "\1\u01c4\2\0\2\u01c3\1\0\10\u01c3\1\0\5\u01c3\1\0"+
    "\10\u01c3\1\0\2\u01c3\25\0\2\u01c5\2\0\1\u01c5\2\0"+
    "\10\u01c5\1\0\5\u01c5\1\0\10\u01c5\1\0\2\u01c5\25\0"+
    "\2\u01c6\2\0\2\u01c6\1\0\10\u01c6\1\0\5\u01c6\1\0"+
    "\10\u01c6\1\0\2\u01c6\25\0\1\u01c6\1\u01c7\2\0\2\u01c6"+
    "\1\0\10\u01c6\1\0\5\u01c6\1\0\10\u01c6\1\0\2\u01c6"+
    "\25\0\2\u01c8\2\0\1\u01c8\2\0\10\u01c8\1\0\5\u01c8"+
    "\1\0\10\u01c8\1\0\2\u01c8\25\0\2\u01c9\2\0\2\u01c9"+
    "\1\0\10\u01c9\1\0\5\u01c9\1\0\10\u01c9\1\0\2\u01c9"+
    "\25\0\1\u01c9\1\u01ca\2\0\2\u01c9\1\0\10\u01c9\1\0"+
    "\5\u01c9\1\0\10\u01c9\1\0\2\u01c9\25\0\2\u01cb\2\0"+
    "\1\u01cb\2\0\10\u01cb\1\0\5\u01cb\1\0\10\u01cb\1\0"+
    "\2\u01cb\25\0\2\u01cc\2\0\2\u01cc\1\0\10\u01cc\1\0"+
    "\5\u01cc\1\0\10\u01cc\1\0\2\u01cc\25\0\1\u01cc\1\u01cd"+
    "\2\0\2\u01cc\1\0\10\u01cc\1\0\5\u01cc\1\0\10\u01cc"+
    "\1\0\2\u01cc\25\0\2\u01ce\2\0\1\u01ce\2\0\10\u01ce"+
    "\1\0\5\u01ce\1\0\10\u01ce\1\0\2\u01ce\25\0\2\u01cf"+
    "\2\0\2\u01cf\1\0\10\u01cf\1\0\5\u01cf\1\0\10\u01cf"+
    "\1\0\2\u01cf\25\0\1\u01cf\1\u01d0\2\0\2\u01cf\1\0"+
    "\10\u01cf\1\0\5\u01cf\1\0\10\u01cf\1\0\2\u01cf\25\0"+
    "\2\u01d1\2\0\1\u01d1\2\0\10\u01d1\1\0\5\u01d1\1\0"+
    "\10\u01d1\1\0\2\u01d1\25\0\2\u01d2\2\0\2\u01d2\1\0"+
    "\10\u01d2\1\0\5\u01d2\1\0\10\u01d2\1\0\2\u01d2\25\0"+
    "\1\u01d2\1\u01d3\2\0\2\u01d2\1\0\10\u01d2\1\0\5\u01d2"+
    "\1\0\10\u01d2\1\0\2\u01d2\25\0\2\u01d4\2\0\1\u01d4"+
    "\2\0\10\u01d4\1\0\5\u01d4\1\0\10\u01d4\1\0\2\u01d4"+
    "\25\0\2\u01d5\2\0\2\u01d5\1\0\10\u01d5\1\0\5\u01d5"+
    "\1\0\10\u01d5\1\0\2\u01d5\25\0\1\u01d5\1\u01d6\2\0"+
    "\2\u01d5\1\0\10\u01d5\1\0\5\u01d5\1\0\10\u01d5\1\0"+
    "\2\u01d5\25\0\2\u01d7\2\0\1\u01d7\2\0\10\u01d7\1\0"+
    "\5\u01d7\1\0\10\u01d7\1\0\2\u01d7\25\0\2\u01d8\2\0"+
    "\2\u01d8\1\0\10\u01d8\1\0\5\u01d8\1\0\10\u01d8\1\0"+
    "\2\u01d8\25\0\1\u01d8\1\u01d9\2\0\2\u01d8\1\0\10\u01d8"+
    "\1\0\5\u01d8\1\0\10\u01d8\1\0\2\u01d8\25\0\2\u01da"+
    "\2\0\1\u01da\2\0\10\u01da\1\0\5\u01da\1\0\10\u01da"+
    "\1\0\2\u01da\25\0\2\u01db\2\0\2\u01db\1\0\10\u01db"+
    "\1\0\5\u01db\1\0\10\u01db\1\0\2\u01db\25\0\1\u01db"+
    "\1\u01dc\2\0\2\u01db\1\0\10\u01db\1\0\5\u01db\1\0"+
    "\10\u01db\1\0\2\u01db\25\0\2\u01dd\2\0\1\u01dd\2\0"+
    "\10\u01dd\1\0\5\u01dd\1\0\10\u01dd\1\0\2\u01dd\25\0"+
    "\2\u01de\2\0\2\u01de\1\0\10\u01de\1\0\5\u01de\1\0"+
    "\10\u01de\1\0\2\u01de\25\0\1\u01de\1\u01df\2\0\2\u01de"+
    "\1\0\10\u01de\1\0\5\u01de\1\0\10\u01de\1\0\2\u01de"+
    "\25\0\2\u01e0\2\0\1\u01e0\2\0\10\u01e0\1\0\5\u01e0"+
    "\1\0\10\u01e0\1\0\2\u01e0\25\0\2\u01e1\2\0\2\u01e1"+
    "\1\0\10\u01e1\1\0\5\u01e1\1\0\10\u01e1\1\0\2\u01e1"+
    "\25\0\1\u01e1\1\u01e2\2\0\2\u01e1\1\0\10\u01e1\1\0"+
    "\5\u01e1\1\0\10\u01e1\1\0\2\u01e1\25\0\2\u01e3\2\0"+
    "\1\u01e3\2\0\10\u01e3\1\0\5\u01e3\1\0\10\u01e3\1\0"+
    "\2\u01e3\25\0\2\u01e4\2\0\2\u01e4\1\0\10\u01e4\1\0"+
    "\5\u01e4\1\0\10\u01e4\1\0\2\u01e4\25\0\1\u01e4\1\u01e5"+
    "\2\0\2\u01e4\1\0\10\u01e4\1\0\5\u01e4\1\0\10\u01e4"+
    "\1\0\2\u01e4\25\0\2\u01e6\2\0\1\u01e6\2\0\10\u01e6"+
    "\1\0\5\u01e6\1\0\10\u01e6\1\0\2\u01e6\25\0\2\u01e7"+
    "\2\0\2\u01e7\1\0\10\u01e7\1\0\5\u01e7\1\0\10\u01e7"+
    "\1\0\2\u01e7\25\0\1\u01e7\1\u01e8\2\0\2\u01e7\1\0"+
    "\10\u01e7\1\0\5\u01e7\1\0\10\u01e7\1\0\2\u01e7\25\0"+
    "\2\u01e9\2\0\1\u01e9\2\0\10\u01e9\1\0\5\u01e9\1\0"+
    "\10\u01e9\1\0\2\u01e9\25\0\2\u01ea\2\0\2\u01ea\1\0"+
    "\10\u01ea\1\0\5\u01ea\1\0\10\u01ea\1\0\2\u01ea\25\0"+
    "\1\u01ea\1\u01eb\2\0\2\u01ea\1\0\10\u01ea\1\0\5\u01ea"+
    "\1\0\10\u01ea\1\0\2\u01ea\25\0\2\u01ec\2\0\1\u01ec"+
    "\2\0\10\u01ec\1\0\5\u01ec\1\0\10\u01ec\1\0\2\u01ec"+
    "\25\0\2\u01ed\2\0\2\u01ed\1\0\10\u01ed\1\0\5\u01ed"+
    "\1\0\10\u01ed\1\0\2\u01ed\25\0\1\u01ed\1\u01ee\2\0"+
    "\2\u01ed\1\0\10\u01ed\1\0\5\u01ed\1\0\10\u01ed\1\0"+
    "\2\u01ed\25\0\2\u01ef\2\0\1\u01ef\2\0\10\u01ef\1\0"+
    "\5\u01ef\1\0\10\u01ef\1\0\2\u01ef\25\0\2\u01f0\2\0"+
    "\2\u01f0\1\0\10\u01f0\1\0\5\u01f0\1\0\10\u01f0\1\0"+
    "\2\u01f0\25\0\1\u01f0\1\u01f1\2\0\2\u01f0\1\0\10\u01f0"+
    "\1\0\5\u01f0\1\0\10\u01f0\1\0\2\u01f0\25\0\2\u01f2"+
    "\2\0\1\u01f2\2\0\10\u01f2\1\0\5\u01f2\1\0\10\u01f2"+
    "\1\0\2\u01f2\25\0\2\u01f3\2\0\2\u01f3\1\0\10\u01f3"+
    "\1\0\5\u01f3\1\0\10\u01f3\1\0\2\u01f3\25\0\1\u01f3"+
    "\1\u01f4\2\0\2\u01f3\1\0\10\u01f3\1\0\5\u01f3\1\0"+
    "\10\u01f3\1\0\2\u01f3\25\0\2\u01f5\2\0\1\u01f5\2\0"+
    "\10\u01f5\1\0\5\u01f5\1\0\10\u01f5\1\0\2\u01f5\25\0"+
    "\2\u01f6\2\0\2\u01f6\1\0\10\u01f6\1\0\5\u01f6\1\0"+
    "\10\u01f6\1\0\2\u01f6\25\0\1\u01f6\1\u01f7\2\0\2\u01f6"+
    "\1\0\10\u01f6\1\0\5\u01f6\1\0\10\u01f6\1\0\2\u01f6"+
    "\25\0\2\u01f8\2\0\1\u01f8\2\0\10\u01f8\1\0\5\u01f8"+
    "\1\0\10\u01f8\1\0\2\u01f8\25\0\2\u01f9\2\0\2\u01f9"+
    "\1\0\10\u01f9\1\0\5\u01f9\1\0\10\u01f9\1\0\2\u01f9"+
    "\25\0\1\u01f9\1\u01fa\2\0\2\u01f9\1\0\10\u01f9\1\0"+
    "\5\u01f9\1\0\10\u01f9\1\0\2\u01f9\25\0\2\u01fb\2\0"+
    "\1\u01fb\2\0\10\u01fb\1\0\5\u01fb\1\0\10\u01fb\1\0"+
    "\2\u01fb\25\0\2\u01fc\2\0\2\u01fc\1\0\10\u01fc\1\0"+
    "\5\u01fc\1\0\10\u01fc\1\0\2\u01fc\25\0\1\u01fc\1\u01fd"+
    "\2\0\2\u01fc\1\0\10\u01fc\1\0\5\u01fc\1\0\10\u01fc"+
    "\1\0\2\u01fc\25\0\2\u01fe\2\0\1\u01fe\2\0\10\u01fe"+
    "\1\0\5\u01fe\1\0\10\u01fe\1\0\2\u01fe\25\0\2\u01ff"+
    "\2\0\2\u01ff\1\0\10\u01ff\1\0\5\u01ff\1\0\10\u01ff"+
    "\1\0\2\u01ff\25\0\1\u01ff\1\u0200\2\0\2\u01ff\1\0"+
    "\10\u01ff\1\0\5\u01ff\1\0\10\u01ff\1\0\2\u01ff\25\0"+
    "\2\u0201\2\0\1\u0201\2\0\10\u0201\1\0\5\u0201\1\0"+
    "\10\u0201\1\0\2\u0201\25\0\2\u0202\2\0\2\u0202\1\0"+
    "\10\u0202\1\0\5\u0202\1\0\10\u0202\1\0\2\u0202\25\0"+
    "\1\u0202\1\u0203\2\0\2\u0202\1\0\10\u0202\1\0\5\u0202"+
    "\1\0\10\u0202\1\0\2\u0202\25\0\2\u0204\2\0\1\u0204"+
    "\2\0\10\u0204\1\0\5\u0204\1\0\10\u0204\1\0\2\u0204"+
    "\25\0\2\u0205\2\0\2\u0205\1\0\10\u0205\1\0\5\u0205"+
    "\1\0\10\u0205\1\0\2\u0205\25\0\1\u0205\1\u0206\2\0"+
    "\2\u0205\1\0\10\u0205\1\0\5\u0205\1\0\10\u0205\1\0"+
    "\2\u0205\25\0\2\u0207\2\0\1\u0207\2\0\10\u0207\1\0"+
    "\5\u0207\1\0\10\u0207\1\0\2\u0207\25\0\2\u0208\2\0"+
    "\2\u0208\1\0\10\u0208\1\0\5\u0208\1\0\10\u0208\1\0"+
    "\2\u0208\25\0\1\u0208\1\u0209\2\0\2\u0208\1\0\10\u0208"+
    "\1\0\5\u0208\1\0\10\u0208\1\0\2\u0208\25\0\2\u020a"+
    "\2\0\1\u020a\2\0\10\u020a\1\0\5\u020a\1\0\10\u020a"+
    "\1\0\2\u020a\25\0\2\u020b\2\0\2\u020b\1\0\10\u020b"+
    "\1\0\5\u020b\1\0\10\u020b\1\0\2\u020b\25\0\1\u020b"+
    "\1\u020c\2\0\2\u020b\1\0\10\u020b\1\0\5\u020b\1\0"+
    "\10\u020b\1\0\2\u020b\25\0\2\u020d\2\0\1\u020d\2\0"+
    "\10\u020d\1\0\5\u020d\1\0\10\u020d\1\0\2\u020d\25\0"+
    "\2\u020e\2\0\2\u020e\1\0\10\u020e\1\0\5\u020e\1\0"+
    "\10\u020e\1\0\2\u020e\25\0\1\u020e\1\u020f\2\0\2\u020e"+
    "\1\0\10\u020e\1\0\5\u020e\1\0\10\u020e\1\0\2\u020e"+
    "\25\0\2\u0210\2\0\1\u0210\2\0\10\u0210\1\0\5\u0210"+
    "\1\0\10\u0210\1\0\2\u0210\25\0\2\u0211\2\0\2\u0211"+
    "\1\0\10\u0211\1\0\5\u0211\1\0\10\u0211\1\0\2\u0211"+
    "\25\0\1\u0211\1\u0212\2\0\2\u0211\1\0\10\u0211\1\0"+
    "\5\u0211\1\0\10\u0211\1\0\2\u0211\25\0\2\u0213\2\0"+
    "\1\u0213\2\0\10\u0213\1\0\5\u0213\1\0\10\u0213\1\0"+
    "\2\u0213\25\0\2\u0214\2\0\2\u0214\1\0\10\u0214\1\0"+
    "\5\u0214\1\0\10\u0214\1\0\2\u0214\25\0\1\u0214\1\u0215"+
    "\2\0\2\u0214\1\0\10\u0214\1\0\5\u0214\1\0\10\u0214"+
    "\1\0\2\u0214\25\0\2\u0216\2\0\1\u0216\2\0\10\u0216"+
    "\1\0\5\u0216\1\0\10\u0216\1\0\2\u0216\25\0\2\u0217"+
    "\2\0\2\u0217\1\0\10\u0217\1\0\5\u0217\1\0\10\u0217"+
    "\1\0\2\u0217\25\0\1\u0217\1\u0218\2\0\2\u0217\1\0"+
    "\10\u0217\1\0\5\u0217\1\0\10\u0217\1\0\2\u0217\25\0"+
    "\2\u0219\2\0\1\u0219\2\0\10\u0219\1\0\5\u0219\1\0"+
    "\10\u0219\1\0\2\u0219\25\0\2\u021a\2\0\2\u021a\1\0"+
    "\10\u021a\1\0\5\u021a\1\0\10\u021a\1\0\2\u021a\25\0"+
    "\1\u021a\1\u021b\2\0\2\u021a\1\0\10\u021a\1\0\5\u021a"+
    "\1\0\10\u021a\1\0\2\u021a\25\0\2\u021c\2\0\1\u021c"+
    "\2\0\10\u021c\1\0\5\u021c\1\0\10\u021c\1\0\2\u021c"+
    "\25\0\2\u021d\2\0\2\u021d\1\0\10\u021d\1\0\5\u021d"+
    "\1\0\10\u021d\1\0\2\u021d\25\0\1\u021d\1\u021e\2\0"+
    "\2\u021d\1\0\10\u021d\1\0\5\u021d\1\0\10\u021d\1\0"+
    "\2\u021d\25\0\2\u021f\2\0\1\u021f\2\0\10\u021f\1\0"+
    "\5\u021f\1\0\10\u021f\1\0\2\u021f\25\0\2\u0220\2\0"+
    "\2\u0220\1\0\10\u0220\1\0\5\u0220\1\0\10\u0220\1\0"+
    "\2\u0220\25\0\1\u0220\1\u0221\2\0\2\u0220\1\0\10\u0220"+
    "\1\0\5\u0220\1\0\10\u0220\1\0\2\u0220\25\0\2\u0222"+
    "\2\0\1\u0222\2\0\10\u0222\1\0\5\u0222\1\0\10\u0222"+
    "\1\0\2\u0222\25\0\2\u0223\2\0\2\u0223\1\0\10\u0223"+
    "\1\0\5\u0223\1\0\10\u0223\1\0\2\u0223\25\0\1\u0223"+
    "\1\u0224\2\0\2\u0223\1\0\10\u0223\1\0\5\u0223\1\0"+
    "\10\u0223\1\0\2\u0223\25\0\2\u0225\2\0\1\u0225\2\0"+
    "\10\u0225\1\0\5\u0225\1\0\10\u0225\1\0\2\u0225\25\0"+
    "\2\u0226\2\0\2\u0226\1\0\10\u0226\1\0\5\u0226\1\0"+
    "\10\u0226\1\0\2\u0226\25\0\1\u0226\1\u0227\2\0\2\u0226"+
    "\1\0\10\u0226\1\0\5\u0226\1\0\10\u0226\1\0\2\u0226"+
    "\25\0\2\u0228\2\0\1\u0228\2\0\10\u0228\1\0\5\u0228"+
    "\1\0\10\u0228\1\0\2\u0228\25\0\2\u0229\2\0\2\u0229"+
    "\1\0\10\u0229\1\0\5\u0229\1\0\10\u0229\1\0\2\u0229"+
    "\25\0\1\u0229\1\u022a\2\0\2\u0229\1\0\10\u0229\1\0"+
    "\5\u0229\1\0\10\u0229\1\0\2\u0229\25\0\2\u022b\2\0"+
    "\1\u022b\2\0\10\u022b\1\0\5\u022b\1\0\10\u022b\1\0"+
    "\2\u022b\25\0\2\u022c\2\0\2\u022c\1\0\10\u022c\1\0"+
    "\5\u022c\1\0\10\u022c\1\0\2\u022c\25\0\1\u022c\1\u022d"+
    "\2\0\2\u022c\1\0\10\u022c\1\0\5\u022c\1\0\10\u022c"+
    "\1\0\2\u022c\25\0\2\u022e\2\0\1\u022e\2\0\10\u022e"+
    "\1\0\5\u022e\1\0\10\u022e\1\0\2\u022e\25\0\2\u022f"+
    "\2\0\2\u022f\1\0\10\u022f\1\0\5\u022f\1\0\10\u022f"+
    "\1\0\2\u022f\25\0\1\u022f\1\u0230\2\0\2\u022f\1\0"+
    "\10\u022f\1\0\5\u022f\1\0\10\u022f\1\0\2\u022f\25\0"+
    "\2\u0231\2\0\1\u0231\2\0\10\u0231\1\0\5\u0231\1\0"+
    "\10\u0231\1\0\2\u0231\25\0\2\u0232\2\0\2\u0232\1\0"+
    "\10\u0232\1\0\5\u0232\1\0\10\u0232\1\0\2\u0232\25\0"+
    "\1\u0232\1\u0233\2\0\2\u0232\1\0\10\u0232\1\0\5\u0232"+
    "\1\0\10\u0232\1\0\2\u0232\25\0\2\u0234\2\0\1\u0234"+
    "\2\0\10\u0234\1\0\5\u0234\1\0\10\u0234\1\0\2\u0234"+
    "\25\0\2\u0235\2\0\2\u0235\1\0\10\u0235\1\0\5\u0235"+
    "\1\0\10\u0235\1\0\2\u0235\25\0\1\u0235\1\u0236\2\0"+
    "\2\u0235\1\0\10\u0235\1\0\5\u0235\1\0\10\u0235\1\0"+
    "\2\u0235\25\0\2\u0237\2\0\1\u0237\2\0\10\u0237\1\0"+
    "\5\u0237\1\0\10\u0237\1\0\2\u0237\25\0\2\u0238\2\0"+
    "\2\u0238\1\0\10\u0238\1\0\5\u0238\1\0\10\u0238\1\0"+
    "\2\u0238\25\0\1\u0238\1\u0239\2\0\2\u0238\1\0\10\u0238"+
    "\1\0\5\u0238\1\0\10\u0238\1\0\2\u0238\25\0\2\u023a"+
    "\2\0\1\u023a\2\0\10\u023a\1\0\5\u023a\1\0\10\u023a"+
    "\1\0\2\u023a\25\0\2\u023b\2\0\2\u023b\1\0\10\u023b"+
    "\1\0\5\u023b\1\0\10\u023b\1\0\2\u023b\25\0\1\u023b"+
    "\1\u023c\2\0\2\u023b\1\0\10\u023b\1\0\5\u023b\1\0"+
    "\10\u023b\1\0\2\u023b\25\0\2\u023d\2\0\1\u023d\2\0"+
    "\10\u023d\1\0\5\u023d\1\0\10\u023d\1\0\2\u023d\25\0"+
    "\2\u023e\2\0\2\u023e\1\0\10\u023e\1\0\5\u023e\1\0"+
    "\10\u023e\1\0\2\u023e\25\0\1\u023e\1\u023f\2\0\2\u023e"+
    "\1\0\10\u023e\1\0\5\u023e\1\0\10\u023e\1\0\2\u023e"+
    "\25\0\2\u0240\2\0\1\u0240\2\0\10\u0240\1\0\5\u0240"+
    "\1\0\10\u0240\1\0\2\u0240\25\0\2\u0241\2\0\2\u0241"+
    "\1\0\10\u0241\1\0\5\u0241\1\0\10\u0241\1\0\2\u0241"+
    "\25\0\1\u0241\1\u0242\2\0\2\u0241\1\0\10\u0241\1\0"+
    "\5\u0241\1\0\10\u0241\1\0\2\u0241\25\0\2\u0243\2\0"+
    "\1\u0243\2\0\10\u0243\1\0\5\u0243\1\0\10\u0243\1\0"+
    "\2\u0243\25\0\2\u0244\2\0\2\u0244\1\0\10\u0244\1\0"+
    "\5\u0244\1\0\10\u0244\1\0\2\u0244\25\0\1\u0244\1\u0245"+
    "\2\0\2\u0244\1\0\10\u0244\1\0\5\u0244\1\0\10\u0244"+
    "\1\0\2\u0244\25\0\2\u0246\2\0\1\u0246\2\0\10\u0246"+
    "\1\0\5\u0246\1\0\10\u0246\1\0\2\u0246\25\0\2\u0247"+
    "\2\0\2\u0247\1\0\10\u0247\1\0\5\u0247\1\0\10\u0247"+
    "\1\0\2\u0247\25\0\1\u0247\1\u0248\2\0\2\u0247\1\0"+
    "\10\u0247\1\0\5\u0247\1\0\10\u0247\1\0\2\u0247\25\0"+
    "\2\u0249\2\0\1\u0249\2\0\10\u0249\1\0\5\u0249\1\0"+
    "\10\u0249\1\0\2\u0249\25\0\2\u024a\2\0\2\u024a\1\0"+
    "\10\u024a\1\0\5\u024a\1\0\10\u024a\1\0\2\u024a\25\0"+
    "\1\u024a\1\u024b\2\0\2\u024a\1\0\10\u024a\1\0\5\u024a"+
    "\1\0\10\u024a\1\0\2\u024a\25\0\2\u024c\2\0\1\u024c"+
    "\2\0\10\u024c\1\0\5\u024c\1\0\10\u024c\1\0\2\u024c"+
    "\25\0\2\u024d\2\0\2\u024d\1\0\10\u024d\1\0\5\u024d"+
    "\1\0\10\u024d\1\0\2\u024d\25\0\1\u024d\1\u024e\2\0"+
    "\2\u024d\1\0\10\u024d\1\0\5\u024d\1\0\10\u024d\1\0"+
    "\2\u024d\25\0\2\u024f\2\0\1\u024f\2\0\10\u024f\1\0"+
    "\5\u024f\1\0\10\u024f\1\0\2\u024f\25\0\2\u0250\2\0"+
    "\2\u0250\1\0\10\u0250\1\0\5\u0250\1\0\10\u0250\1\0"+
    "\2\u0250\25\0\1\u0250\1\u0251\2\0\2\u0250\1\0\10\u0250"+
    "\1\0\5\u0250\1\0\10\u0250\1\0\2\u0250\25\0\2\u0252"+
    "\2\0\1\u0252\2\0\10\u0252\1\0\5\u0252\1\0\10\u0252"+
    "\1\0\2\u0252\25\0\2\u0253\2\0\2\u0253\1\0\10\u0253"+
    "\1\0\5\u0253\1\0\10\u0253\1\0\2\u0253\25\0\1\u0253"+
    "\1\u0254\2\0\2\u0253\1\0\10\u0253\1\0\5\u0253\1\0"+
    "\10\u0253\1\0\2\u0253\25\0\2\u0255\2\0\1\u0255\2\0"+
    "\10\u0255\1\0\5\u0255\1\0\10\u0255\1\0\2\u0255\25\0"+
    "\2\u0256\2\0\2\u0256\1\0\10\u0256\1\0\5\u0256\1\0"+
    "\10\u0256\1\0\2\u0256\25\0\1\u0256\1\u0257\2\0\2\u0256"+
    "\1\0\10\u0256\1\0\5\u0256\1\0\10\u0256\1\0\2\u0256"+
    "\25\0\2\u0258\2\0\1\u0258\2\0\10\u0258\1\0\5\u0258"+
    "\1\0\10\u0258\1\0\2\u0258\25\0\2\u0259\2\0\2\u0259"+
    "\1\0\10\u0259\1\0\5\u0259\1\0\10\u0259\1\0\2\u0259"+
    "\25\0\1\u0259\1\u025a\2\0\2\u0259\1\0\10\u0259\1\0"+
    "\5\u0259\1\0\10\u0259\1\0\2\u0259\25\0\2\u025b\2\0"+
    "\1\u025b\2\0\10\u025b\1\0\5\u025b\1\0\10\u025b\1\0"+
    "\2\u025b\25\0\2\u025c\2\0\2\u025c\1\0\10\u025c\1\0"+
    "\5\u025c\1\0\10\u025c\1\0\2\u025c\25\0\1\u025c\1\u025d"+
    "\2\0\2\u025c\1\0\10\u025c\1\0\5\u025c\1\0\10\u025c"+
    "\1\0\2\u025c\25\0\2\u025e\2\0\1\u025e\2\0\10\u025e"+
    "\1\0\5\u025e\1\0\10\u025e\1\0\2\u025e\25\0\2\u025f"+
    "\2\0\2\u025f\1\0\10\u025f\1\0\5\u025f\1\0\10\u025f"+
    "\1\0\2\u025f\25\0\1\u025f\1\u0260\2\0\2\u025f\1\0"+
    "\10\u025f\1\0\5\u025f\1\0\10\u025f\1\0\2\u025f\25\0"+
    "\2\u0261\2\0\1\u0261\2\0\10\u0261\1\0\5\u0261\1\0"+
    "\10\u0261\1\0\2\u0261\25\0\2\u0262\2\0\2\u0262\1\0"+
    "\10\u0262\1\0\5\u0262\1\0\10\u0262\1\0\2\u0262\25\0"+
    "\1\u0262\1\u0263\2\0\2\u0262\1\0\10\u0262\1\0\5\u0262"+
    "\1\0\10\u0262\1\0\2\u0262\25\0\2\u0264\2\0\1\u0264"+
    "\2\0\10\u0264\1\0\5\u0264\1\0\10\u0264\1\0\2\u0264"+
    "\25\0\2\u0265\2\0\2\u0265\1\0\10\u0265\1\0\5\u0265"+
    "\1\0\10\u0265\1\0\2\u0265\25\0\1\u0265\1\u0266\2\0"+
    "\2\u0265\1\0\10\u0265\1\0\5\u0265\1\0\10\u0265\1\0"+
    "\2\u0265\25\0\2\u0267\2\0\1\u0267\2\0\10\u0267\1\0"+
    "\5\u0267\1\0\10\u0267\1\0\2\u0267\25\0\2\u0268\2\0"+
    "\2\u0268\1\0\10\u0268\1\0\5\u0268\1\0\10\u0268\1\0"+
    "\2\u0268\25\0\1\u0268\1\u0269\2\0\2\u0268\1\0\10\u0268"+
    "\1\0\5\u0268\1\0\10\u0268\1\0\2\u0268\25\0\2\u026a"+
    "\2\0\1\u026a\2\0\10\u026a\1\0\5\u026a\1\0\10\u026a"+
    "\1\0\2\u026a\25\0\2\u026b\2\0\2\u026b\1\0\10\u026b"+
    "\1\0\5\u026b\1\0\10\u026b\1\0\2\u026b\25\0\1\u026b"+
    "\1\u026c\2\0\2\u026b\1\0\10\u026b\1\0\5\u026b\1\0"+
    "\10\u026b\1\0\2\u026b\25\0\2\u026d\2\0\1\u026d\2\0"+
    "\10\u026d\1\0\5\u026d\1\0\10\u026d\1\0\2\u026d\25\0"+
    "\2\u026e\2\0\2\u026e\1\0\10\u026e\1\0\5\u026e\1\0"+
    "\10\u026e\1\0\2\u026e\25\0\1\u026e\1\u026f\2\0\2\u026e"+
    "\1\0\10\u026e\1\0\5\u026e\1\0\10\u026e\1\0\2\u026e"+
    "\25\0\2\u0270\2\0\1\u0270\2\0\10\u0270\1\0\5\u0270"+
    "\1\0\10\u0270\1\0\2\u0270\25\0\2\u0271\2\0\2\u0271"+
    "\1\0\10\u0271\1\0\5\u0271\1\0\10\u0271\1\0\2\u0271"+
    "\25\0\1\u0271\1\u0272\2\0\2\u0271\1\0\10\u0271\1\0"+
    "\5\u0271\1\0\10\u0271\1\0\2\u0271\25\0\2\u0273\2\0"+
    "\1\u0273\2\0\10\u0273\1\0\5\u0273\1\0\10\u0273\1\0"+
    "\2\u0273\25\0\2\u0274\2\0\2\u0274\1\0\10\u0274\1\0"+
    "\5\u0274\1\0\10\u0274\1\0\2\u0274\25\0\1\u0274\1\u0275"+
    "\2\0\2\u0274\1\0\10\u0274\1\0\5\u0274\1\0\10\u0274"+
    "\1\0\2\u0274\25\0\2\u0276\2\0\1\u0276\2\0\10\u0276"+
    "\1\0\5\u0276\1\0\10\u0276\1\0\2\u0276\25\0\2\u0277"+
    "\2\0\2\u0277\1\0\10\u0277\1\0\5\u0277\1\0\10\u0277"+
    "\1\0\2\u0277\25\0\1\u0277\1\u0278\2\0\2\u0277\1\0"+
    "\10\u0277\1\0\5\u0277\1\0\10\u0277\1\0\2\u0277\25\0"+
    "\2\u0279\2\0\1\u0279\2\0\10\u0279\1\0\5\u0279\1\0"+
    "\10\u0279\1\0\2\u0279\25\0\2\u027a\2\0\2\u027a\1\0"+
    "\10\u027a\1\0\5\u027a\1\0\10\u027a\1\0\2\u027a\25\0"+
    "\1\u027a\1\u027b\2\0\2\u027a\1\0\10\u027a\1\0\5\u027a"+
    "\1\0\10\u027a\1\0\2\u027a\25\0\2\u027c\2\0\1\u027c"+
    "\2\0\10\u027c\1\0\5\u027c\1\0\10\u027c\1\0\2\u027c"+
    "\25\0\2\u027d\2\0\2\u027d\1\0\10\u027d\1\0\5\u027d"+
    "\1\0\10\u027d\1\0\2\u027d\25\0\1\u027d\1\u027e\2\0"+
    "\2\u027d\1\0\10\u027d\1\0\5\u027d\1\0\10\u027d\1\0"+
    "\2\u027d\25\0\2\u027f\2\0\1\u027f\2\0\10\u027f\1\0"+
    "\5\u027f\1\0\10\u027f\1\0\2\u027f\25\0\2\u0280\2\0"+
    "\2\u0280\1\0\10\u0280\1\0\5\u0280\1\0\10\u0280\1\0"+
    "\2\u0280\25\0\1\u0280\1\u0281\2\0\2\u0280\1\0\10\u0280"+
    "\1\0\5\u0280\1\0\10\u0280\1\0\2\u0280\25\0\2\u0282"+
    "\2\0\1\u0282\2\0\10\u0282\1\0\5\u0282\1\0\10\u0282"+
    "\1\0\2\u0282\25\0\2\u0283\2\0\2\u0283\1\0\10\u0283"+
    "\1\0\5\u0283\1\0\10\u0283\1\0\2\u0283\25\0\1\u0283"+
    "\1\u0284\2\0\2\u0283\1\0\10\u0283\1\0\5\u0283\1\0"+
    "\10\u0283\1\0\2\u0283\25\0\2\u0285\2\0\1\u0285\2\0"+
    "\10\u0285\1\0\5\u0285\1\0\10\u0285\1\0\2\u0285\25\0"+
    "\2\u0286\2\0\2\u0286\1\0\10\u0286\1\0\5\u0286\1\0"+
    "\10\u0286\1\0\2\u0286\25\0\1\u0286\1\u0287\2\0\2\u0286"+
    "\1\0\10\u0286\1\0\5\u0286\1\0\10\u0286\1\0\2\u0286"+
    "\25\0\2\u0288\2\0\1\u0288\2\0\10\u0288\1\0\5\u0288"+
    "\1\0\10\u0288\1\0\2\u0288\25\0\2\u0289\2\0\2\u0289"+
    "\1\0\10\u0289\1\0\5\u0289\1\0\10\u0289\1\0\2\u0289"+
    "\25\0\1\u0289\1\u028a\2\0\2\u0289\1\0\10\u0289\1\0"+
    "\5\u0289\1\0\10\u0289\1\0\2\u0289\25\0\2\u028b\2\0"+
    "\1\u028b\2\0\10\u028b\1\0\5\u028b\1\0\10\u028b\1\0"+
    "\2\u028b\25\0\2\u028c\2\0\2\u028c\1\0\10\u028c\1\0"+
    "\5\u028c\1\0\10\u028c\1\0\2\u028c\25\0\1\u028c\1\u028d"+
    "\2\0\2\u028c\1\0\10\u028c\1\0\5\u028c\1\0\10\u028c"+
    "\1\0\2\u028c\25\0\2\u028e\2\0\1\u028e\2\0\10\u028e"+
    "\1\0\5\u028e\1\0\10\u028e\1\0\2\u028e\25\0\2\u028f"+
    "\2\0\2\u028f\1\0\10\u028f\1\0\5\u028f\1\0\10\u028f"+
    "\1\0\2\u028f\25\0\1\u028f\1\u0290\2\0\2\u028f\1\0"+
    "\10\u028f\1\0\5\u028f\1\0\10\u028f\1\0\2\u028f\25\0"+
    "\2\u0291\2\0\1\u0291\2\0\10\u0291\1\0\5\u0291\1\0"+
    "\10\u0291\1\0\2\u0291\25\0\2\u0292\2\0\2\u0292\1\0"+
    "\10\u0292\1\0\5\u0292\1\0\10\u0292\1\0\2\u0292\25\0"+
    "\1\u0292\1\u0293\2\0\2\u0292\1\0\10\u0292\1\0\5\u0292"+
    "\1\0\10\u0292\1\0\2\u0292\25\0\2\u0294\2\0\1\u0294"+
    "\2\0\10\u0294\1\0\5\u0294\1\0\10\u0294\1\0\2\u0294"+
    "\25\0\2\u0295\2\0\2\u0295\1\0\10\u0295\1\0\5\u0295"+
    "\1\0\10\u0295\1\0\2\u0295\25\0\1\u0295\1\u0296\2\0"+
    "\2\u0295\1\0\10\u0295\1\0\5\u0295\1\0\10\u0295\1\0"+
    "\2\u0295\25\0\2\u0297\2\0\1\u0297\2\0\10\u0297\1\0"+
    "\5\u0297\1\0\10\u0297\1\0\2\u0297\25\0\2\u0298\2\0"+
    "\2\u0298\1\0\10\u0298\1\0\5\u0298\1\0\10\u0298\1\0"+
    "\2\u0298\25\0\1\u0298\1\u0299\2\0\2\u0298\1\0\10\u0298"+
    "\1\0\5\u0298\1\0\10\u0298\1\0\2\u0298\25\0\2\u029a"+
    "\2\0\1\u029a\2\0\10\u029a\1\0\5\u029a\1\0\10\u029a"+
    "\1\0\2\u029a\25\0\2\u029b\2\0\2\u029b\1\0\10\u029b"+
    "\1\0\5\u029b\1\0\10\u029b\1\0\2\u029b\25\0\1\u029b"+
    "\1\u029c\2\0\2\u029b\1\0\10\u029b\1\0\5\u029b\1\0"+
    "\10\u029b\1\0\2\u029b\25\0\2\u029d\2\0\1\u029d\2\0"+
    "\10\u029d\1\0\5\u029d\1\0\10\u029d\1\0\2\u029d\25\0"+
    "\2\u029e\2\0\2\u029e\1\0\10\u029e\1\0\5\u029e\1\0"+
    "\10\u029e\1\0\2\u029e\25\0\1\u029e\1\u029f\2\0\2\u029e"+
    "\1\0\10\u029e\1\0\5\u029e\1\0\10\u029e\1\0\2\u029e"+
    "\25\0\2\u02a0\2\0\1\u02a0\2\0\10\u02a0\1\0\5\u02a0"+
    "\1\0\10\u02a0\1\0\2\u02a0\25\0\2\u02a1\2\0\2\u02a1"+
    "\1\0\10\u02a1\1\0\5\u02a1\1\0\10\u02a1\1\0\2\u02a1"+
    "\25\0\1\u02a1\1\u02a2\2\0\2\u02a1\1\0\10\u02a1\1\0"+
    "\5\u02a1\1\0\10\u02a1\1\0\2\u02a1\25\0\2\u02a3\2\0"+
    "\1\u02a3\2\0\10\u02a3\1\0\5\u02a3\1\0\10\u02a3\1\0"+
    "\2\u02a3\25\0\2\u02a4\2\0\2\u02a4\1\0\10\u02a4\1\0"+
    "\5\u02a4\1\0\10\u02a4\1\0\2\u02a4\25\0\1\u02a4\1\u02a5"+
    "\2\0\2\u02a4\1\0\10\u02a4\1\0\5\u02a4\1\0\10\u02a4"+
    "\1\0\2\u02a4\25\0\2\u02a6\2\0\1\u02a6\2\0\10\u02a6"+
    "\1\0\5\u02a6\1\0\10\u02a6\1\0\2\u02a6\25\0\2\u02a7"+
    "\2\0\2\u02a7\1\0\10\u02a7\1\0\5\u02a7\1\0\10\u02a7"+
    "\1\0\2\u02a7\25\0\1\u02a7\1\u02a8\2\0\2\u02a7\1\0"+
    "\10\u02a7\1\0\5\u02a7\1\0\10\u02a7\1\0\2\u02a7\25\0"+
    "\2\u02a9\2\0\1\u02a9\2\0\10\u02a9\1\0\5\u02a9\1\0"+
    "\10\u02a9\1\0\2\u02a9\25\0\2\u02aa\2\0\2\u02aa\1\0"+
    "\10\u02aa\1\0\5\u02aa\1\0\10\u02aa\1\0\2\u02aa\25\0"+
    "\1\u02aa\1\u02ab\2\0\2\u02aa\1\0\10\u02aa\1\0\5\u02aa"+
    "\1\0\10\u02aa\1\0\2\u02aa\25\0\2\u02ac\2\0\1\u02ac"+
    "\2\0\10\u02ac\1\0\5\u02ac\1\0\10\u02ac\1\0\2\u02ac"+
    "\25\0\2\u02ad\2\0\2\u02ad\1\0\10\u02ad\1\0\5\u02ad"+
    "\1\0\10\u02ad\1\0\2\u02ad\25\0\1\u02ad\1\u02ae\2\0"+
    "\2\u02ad\1\0\10\u02ad\1\0\5\u02ad\1\0\10\u02ad\1\0"+
    "\2\u02ad\25\0\2\u02af\2\0\1\u02af\2\0\10\u02af\1\0"+
    "\5\u02af\1\0\10\u02af\1\0\2\u02af\25\0\2\u02b0\2\0"+
    "\2\u02b0\1\0\10\u02b0\1\0\5\u02b0\1\0\10\u02b0\1\0"+
    "\2\u02b0\25\0\1\u02b0\1\u02b1\2\0\2\u02b0\1\0\10\u02b0"+
    "\1\0\5\u02b0\1\0\10\u02b0\1\0\2\u02b0\25\0\2\u02b2"+
    "\2\0\1\u02b2\2\0\10\u02b2\1\0\5\u02b2\1\0\10\u02b2"+
    "\1\0\2\u02b2\25\0\2\u02b3\2\0\2\u02b3\1\0\10\u02b3"+
    "\1\0\5\u02b3\1\0\10\u02b3\1\0\2\u02b3\25\0\1\u02b3"+
    "\1\u02b4\2\0\2\u02b3\1\0\10\u02b3\1\0\5\u02b3\1\0"+
    "\10\u02b3\1\0\2\u02b3\25\0\2\u02b5\2\0\1\u02b5\2\0"+
    "\10\u02b5\1\0\5\u02b5\1\0\10\u02b5\1\0\2\u02b5\25\0"+
    "\2\u02b6\2\0\2\u02b6\1\0\10\u02b6\1\0\5\u02b6\1\0"+
    "\10\u02b6\1\0\2\u02b6\25\0\1\u02b6\1\u02b7\2\0\2\u02b6"+
    "\1\0\10\u02b6\1\0\5\u02b6\1\0\10\u02b6\1\0\2\u02b6"+
    "\25\0\2\u02b8\2\0\1\u02b8\2\0\10\u02b8\1\0\5\u02b8"+
    "\1\0\10\u02b8\1\0\2\u02b8\25\0\2\u02b9\2\0\2\u02b9"+
    "\1\0\10\u02b9\1\0\5\u02b9\1\0\10\u02b9\1\0\2\u02b9"+
    "\25\0\1\u02b9\1\u02ba\2\0\2\u02b9\1\0\10\u02b9\1\0"+
    "\5\u02b9\1\0\10\u02b9\1\0\2\u02b9\25\0\2\u02bb\2\0"+
    "\1\u02bb\2\0\10\u02bb\1\0\5\u02bb\1\0\10\u02bb\1\0"+
    "\2\u02bb\25\0\2\u02bc\2\0\2\u02bc\1\0\10\u02bc\1\0"+
    "\5\u02bc\1\0\10\u02bc\1\0\2\u02bc\25\0\1\u02bc\1\u02bd"+
    "\2\0\2\u02bc\1\0\10\u02bc\1\0\5\u02bc\1\0\10\u02bc"+
    "\1\0\2\u02bc\25\0\2\u02be\2\0\2\u02be\1\0\10\u02be"+
    "\1\0\5\u02be\1\0\10\u02be\1\0\2\u02be\25\0\1\u02be"+
    "\1\202\2\0\2\u02be\1\0\10\u02be\1\0\5\u02be\1\0"+
    "\10\u02be\1\0\2\u02be\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\1\11\40\1\2\11"+
    "\2\1\1\11\1\1\2\11\1\1\2\11\1\0\1\11"+
    "\1\0\1\1\2\0\2\11\1\1\1\11\10\1\1\11"+
    "\2\1\1\0\2\1\1\0\10\1\1\11\15\1\3\0"+
    "\5\1\1\0\12\1\2\11\1\1\3\11\3\1\1\0"+
    "\1\1\1\0\4\1\1\0\3\1\1\0\2\11\1\0"+
    "\2\1\1\11\2\1\1\11\11\1\1\0\1\11\6\1"+
    "\1\0\3\1\2\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\10\1\1\11\2\0\1\1\2\0\1\1\2\0"+
    "\4\1\1\11\11\1\1\0\3\1\1\0\5\1\1\11"+
    "\1\1\1\0\2\1\2\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\2\0\2\1\3\0\1\1\1\0\10\1\1\11"+
    "\2\1\1\0\2\1\1\0\1\1\1\11\1\1\2\0"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\0\2\1\5\0\1\1\1\0\1\1\1\0"+
    "\7\1\1\0\1\1\1\11\1\0\3\1\1\0\12\1"+
    "\1\11\1\1\1\0\2\1\1\0\6\1\1\11\1\1"+
    "\1\11\u0168\1\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol token(int type, Object value)
    {
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }
    
    public String current_lexeme()
    {
        int l = yyline+1;
        int c = yycolumn+1;
        return " (line: "+l+" , column: "+c+" , lexeme: '"+yytext()+"')";
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 426) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(sym.error, "Caracter inválido " + yytext());
            }
          case 81: break;
          case 2: 
            { return token(sym._op_division, yytext());
            }
          case 82: break;
          case 3: 
            { /*Omitir el espacio blanco*/
            }
          case 83: break;
          case 4: 
            { return token(sym._parentesisAbre, yytext());
            }
          case 84: break;
          case 5: 
            { return token(sym._op_multi, yytext());
            }
          case 85: break;
          case 6: 
            { return token(sym._parentesisCierra, yytext());
            }
          case 86: break;
          case 7: 
            { return token(sym._entero, yytext());
            }
          case 87: break;
          case 8: 
            { return token(sym._op_resta, yytext());
            }
          case 88: break;
          case 9: 
            { return token(sym._punto, yytext());
            }
          case 89: break;
          case 10: 
            { return token(sym._id, yytext().toUpperCase());
            }
          case 90: break;
          case 11: 
            { return token(sym._dos_puntos, yytext());
            }
          case 91: break;
          case 12: 
            { return token(sym._coma, yytext());
            }
          case 92: break;
          case 13: 
            { return token(sym._punto_coma, yytext());
            }
          case 93: break;
          case 14: 
            { return token(sym._op_suma, yytext());
            }
          case 94: break;
          case 15: 
            { return token(sym._mayor, yytext());
            }
          case 95: break;
          case 16: 
            { return token(sym._igual, yytext());
            }
          case 96: break;
          case 17: 
            { return token(sym._menor, yytext());
            }
          case 97: break;
          case 18: 
            { return token(sym._bra_aper, yytext());
            }
          case 98: break;
          case 19: 
            { return token(sym._bra_cerr, yytext());
            }
          case 99: break;
          case 20: 
            { 
            }
          case 100: break;
          case 21: 
            { return token(sym._op_div_igual, yytext());
            }
          case 101: break;
          case 22: 
            { return token(sym._op_mult_igual, yytext());
            }
          case 102: break;
          case 23: 
            { return token(sym.error, "No tiene nada después del punto " + yytext());
            }
          case 103: break;
          case 24: 
            { return token(sym._op_dec, yytext());
            }
          case 104: break;
          case 25: 
            { return token(sym._op_menos_igual, yytext());
            }
          case 105: break;
          case 26: 
            { return token(sym.error, "No tiene nada antes del punto " + yytext());
            }
          case 106: break;
          case 27: 
            { return token(sym._rango_dos_puntos,yytext());
            }
          case 107: break;
          case 28: 
            { return token(sym.error, "No debe comenzar con números" + yytext());
            }
          case 108: break;
          case 29: 
            { return token(sym.error, "Hilera sin cerrar " + yytext());
            }
          case 109: break;
          case 30: 
            { return token(sym._hilera, yytext());
            }
          case 110: break;
          case 31: 
            { return token(sym._caracter, yytext());
            }
          case 111: break;
          case 32: 
            { return token(sym._asignacion, yytext());
            }
          case 112: break;
          case 33: 
            { return token(sym._do, yytext());
            }
          case 113: break;
          case 34: 
            { return token(1200, yytext());
            }
          case 114: break;
          case 35: 
            { return token(sym._if, yytext());
            }
          case 115: break;
          case 36: 
            { return token(sym._OR, yytext());
            }
          case 116: break;
          case 37: 
            { return token(sym._of, yytext());
            }
          case 117: break;
          case 38: 
            { return token(sym._to, yytext());
            }
          case 118: break;
          case 39: 
            { return token(sym._op_inc, yytext());
            }
          case 119: break;
          case 40: 
            { return token(sym._op_mas_igual, yytext());
            }
          case 120: break;
          case 41: 
            { return token(3000, yytext());
            }
          case 121: break;
          case 42: 
            { return token(sym._mayor_igual, yytext());
            }
          case 122: break;
          case 43: 
            { return token(sym._distinto, yytext());
            }
          case 123: break;
          case 44: 
            { return token(sym._menor_igual, yytext());
            }
          case 124: break;
          case 45: 
            { return token(sym.error, "Comentario no cerrado" + yytext());
            }
          case 125: break;
          case 46: 
            { return token(sym._flotante, yytext());
            }
          case 126: break;
          case 47: 
            { return token(sym.error, "Notación científica mala " + yytext());
            }
          case 127: break;
          case 48: 
            { return token(sym._end, yytext());
            }
          case 128: break;
          case 49: 
            { return token(sym._AND, yytext());
            }
          case 129: break;
          case 50: 
            { return token(sym._NOT, yytext());
            }
          case 130: break;
          case 51: 
            { return token(sym._op_DIV, yytext());
            }
          case 131: break;
          case 52: 
            { return token(sym._int, yytext());
            }
          case 132: break;
          case 53: 
            { return token(sym._var, yytext());
            }
          case 133: break;
          case 54: 
            { return token(sym._for, yytext());
            }
          case 134: break;
          case 55: 
            { return token(sym._op_mod , yytext());
            }
          case 135: break;
          case 56: 
            { return token(sym.error, "Notación científica mala - error no tiene nada después del exponente" + yytext());
            }
          case 136: break;
          case 57: 
            { return token(sym._else, yytext());
            }
          case 137: break;
          case 58: 
            { return token(sym._read, yytext());
            }
          case 138: break;
          case 59: 
            { return token(sym._real, yytext());
            }
          case 139: break;
          case 60: 
            { return token(sym._true, yytext());
            }
          case 140: break;
          case 61: 
            { return token(sym._then, yytext());
            }
          case 141: break;
          case 62: 
            { return token(sym._case, yytext());
            }
          case 142: break;
          case 63: 
            { return token(sym._char, yytext());
            }
          case 143: break;
          case 64: 
            { return token(4000, yytext());
            }
          case 144: break;
          case 65: 
            { return token(sym._array, yytext());
            }
          case 145: break;
          case 66: 
            { return token(sym._begin, yytext());
            }
          case 146: break;
          case 67: 
            { return token(sym._const, yytext());
            }
          case 147: break;
          case 68: 
            { return token(sym._write, yytext());
            }
          case 148: break;
          case 69: 
            { return token(sym._while, yytext());
            }
          case 149: break;
          case 70: 
            { return token(sym._false, yytext());
            }
          case 150: break;
          case 71: 
            { return token(sym._until, yytext());
            }
          case 151: break;
          case 72: 
            { return token(sym._repeat, yytext());
            }
          case 152: break;
          case 73: 
            { return token(sym._string, yytext());
            }
          case 153: break;
          case 74: 
            { return token(sym.error, "Notación científica mala - error el numero después del E tiene que ser entero" + yytext());
            }
          case 154: break;
          case 75: 
            { return token(sym._boolean, yytext());
            }
          case 155: break;
          case 76: 
            { return token(sym._longint, yytext());
            }
          case 156: break;
          case 77: 
            { return token(sym._program, yytext());
            }
          case 157: break;
          case 78: 
            { return token(sym._shortint, yytext());
            }
          case 158: break;
          case 79: 
            { return token(sym._function, yytext());
            }
          case 159: break;
          case 80: 
            { return token(sym._procedure, yytext());
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
