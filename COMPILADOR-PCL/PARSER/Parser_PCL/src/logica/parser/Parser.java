
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 16 13:26:07 CST 2016
//----------------------------------------------------

package logica.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 16 13:26:07 CST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\004\005\000\002\005\004\000\002\005\002" +
    "\000\002\007\003\000\002\007\004\000\002\030\007\000" +
    "\002\030\004\000\002\011\005\000\002\011\002\000\002" +
    "\006\004\000\002\006\002\000\002\010\003\000\002\010" +
    "\004\000\002\031\006\000\002\077\002\000\002\031\007" +
    "\000\002\100\002\000\002\031\007\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\012\004\000\002" +
    "\012\002\000\002\013\003\000\002\013\003\000\002\014" +
    "\012\000\002\101\002\000\002\014\007\000\002\015\010" +
    "\000\002\102\002\000\002\015\007\000\002\016\007\000" +
    "\002\017\007\000\002\020\003\000\002\020\002\000\002" +
    "\021\005\000\002\022\004\000\002\022\002\000\002\023" +
    "\004\000\002\023\002\000\002\024\003\000\002\024\004" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\011\000\002\053" +
    "\003\000\002\051\005\000\002\052\006\000\002\052\002" +
    "\000\002\054\012\000\002\103\002\000\002\054\006\000" +
    "\002\055\005\000\002\056\010\000\002\104\002\000\002" +
    "\056\006\000\002\057\005\000\002\037\010\000\002\105" +
    "\002\000\002\037\007\000\002\106\002\000\002\037\011" +
    "\000\002\107\002\000\002\037\011\000\002\040\006\000" +
    "\002\110\002\000\002\040\007\000\002\111\002\000\002" +
    "\040\007\000\002\042\004\000\002\042\005\000\002\112" +
    "\002\000\002\042\006\000\002\072\003\000\002\072\002" +
    "\000\002\041\004\000\002\041\004\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\046\004\000\002" +
    "\047\004\000\002\047\005\000\002\113\002\000\002\047" +
    "\005\000\002\114\002\000\002\047\006\000\002\047\005" +
    "\000\002\073\004\000\002\073\003\000\002\073\002\000" +
    "\002\045\006\000\002\115\002\000\002\045\006\000\002" +
    "\074\004\000\002\074\003\000\002\074\002\000\002\050" +
    "\004\000\002\075\004\000\002\116\002\000\002\075\005" +
    "\000\002\075\002\000\002\076\003\000\002\076\003\000" +
    "\002\026\005\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\062\005\000\002\063" +
    "\005\000\002\061\004\000\002\064\003\000\002\064\003" +
    "\000\002\065\005\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\071\003\000\002\071" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\012" +
    "\000\002\033\010\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\004\004\005\001\002\000\004\002\u011c\001" +
    "\002\000\004\103\006\001\002\000\014\005\011\007\ufffc" +
    "\014\ufffc\020\ufffc\021\ufffc\001\002\000\004\007\u0119\001" +
    "\002\000\012\007\ufff4\014\055\020\ufff4\021\ufff4\001\002" +
    "\000\006\003\013\103\014\001\002\000\004\002\000\001" +
    "\002\000\004\050\053\001\002\000\006\047\ufff6\051\021" +
    "\001\002\000\034\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014" +
    "\ufffd\015\ufffd\020\ufffd\021\ufffd\024\ufffd\026\ufffd\103\ufffd" +
    "\104\ufffd\105\ufffd\001\002\000\036\003\013\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\020\ufffb\021\ufffb" +
    "\024\ufffb\026\ufffb\103\014\104\ufffb\105\ufffb\001\002\000" +
    "\034\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa" +
    "\020\ufffa\021\ufffa\024\ufffa\026\ufffa\103\ufffa\104\ufffa\105" +
    "\ufffa\001\002\000\004\047\024\001\002\000\004\103\022" +
    "\001\002\000\006\047\ufff6\051\021\001\002\000\004\047" +
    "\ufff7\001\002\000\022\006\037\027\033\030\032\031\031" +
    "\032\026\033\034\034\035\035\030\001\002\000\010\007" +
    "\uff6f\050\uff6f\103\uff6f\001\002\000\010\007\uff66\050\uff66" +
    "\103\uff66\001\002\000\004\050\052\001\002\000\010\007" +
    "\uff65\050\uff65\103\uff65\001\002\000\010\007\uff67\050\uff67" +
    "\103\uff67\001\002\000\010\007\uff6a\050\uff6a\103\uff6a\001" +
    "\002\000\004\052\040\001\002\000\010\007\uff68\050\uff68" +
    "\103\uff68\001\002\000\010\007\uff69\050\uff69\103\uff69\001" +
    "\002\000\010\007\uff6e\050\uff6e\103\uff6e\001\002\000\010" +
    "\007\uff6b\050\uff6b\103\uff6b\001\002\000\004\036\041\001" +
    "\002\000\006\053\043\055\042\001\002\000\004\036\046" +
    "\001\002\000\004\016\044\001\002\000\022\006\037\027" +
    "\033\030\032\031\031\032\026\033\034\034\035\035\030" +
    "\001\002\000\010\007\uff6c\050\uff6c\103\uff6c\001\002\000" +
    "\004\053\047\001\002\000\004\016\050\001\002\000\022" +
    "\006\037\027\033\030\032\031\031\032\026\033\034\034" +
    "\035\035\030\001\002\000\010\007\uff6d\050\uff6d\103\uff6d" +
    "\001\002\000\036\003\ufff9\007\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\014\ufff9\015\ufff9\020\ufff9\021\ufff9\024\ufff9\026\ufff9" +
    "\103\ufff9\104\ufff9\105\ufff9\001\002\000\036\003\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\020\ufff8" +
    "\021\ufff8\024\ufff8\026\ufff8\103\ufff8\104\ufff8\105\ufff8\001" +
    "\002\000\010\007\uffe8\020\101\021\103\001\002\000\004" +
    "\103\056\001\002\000\006\003\062\044\063\001\002\000" +
    "\032\007\ufff3\010\ufff3\011\ufff3\012\ufff3\015\ufff3\020\ufff3" +
    "\021\ufff3\024\ufff3\026\ufff3\103\056\104\ufff3\105\ufff3\001" +
    "\002\000\032\007\ufff5\010\ufff5\011\ufff5\012\ufff5\015\ufff5" +
    "\020\ufff5\021\ufff5\024\ufff5\026\ufff5\103\ufff5\104\ufff5\105" +
    "\ufff5\001\002\000\032\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\015\ufff2\020\ufff2\021\ufff2\024\ufff2\026\ufff2\103\ufff2\104" +
    "\ufff2\105\ufff2\001\002\000\010\036\ufff0\037\ufff0\041\ufff0" +
    "\001\002\000\012\003\067\036\070\037\064\041\065\001" +
    "\002\000\004\050\uffeb\001\002\000\004\050\uffea\001\002" +
    "\000\004\050\073\001\002\000\004\050\uffee\001\002\000" +
    "\004\050\uffec\001\002\000\004\050\072\001\002\000\032" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\015\uffed\020\uffed\021" +
    "\uffed\024\uffed\026\uffed\103\uffed\104\uffed\105\uffed\001\002" +
    "\000\032\007\ufff1\010\ufff1\011\ufff1\012\ufff1\015\ufff1\020" +
    "\ufff1\021\ufff1\024\ufff1\026\ufff1\103\ufff1\104\ufff1\105\ufff1" +
    "\001\002\000\010\036\070\037\064\041\065\001\002\000" +
    "\004\050\076\001\002\000\032\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\015\uffef\020\uffef\021\uffef\024\uffef\026\uffef\103" +
    "\uffef\104\uffef\105\uffef\001\002\000\004\007\ufffe\001\002" +
    "\000\010\007\uffe6\020\uffe6\021\uffe6\001\002\000\004\103" +
    "\u010a\001\002\000\010\007\uffe7\020\uffe7\021\uffe7\001\002" +
    "\000\004\103\106\001\002\000\010\007\uffe8\020\101\021" +
    "\103\001\002\000\004\007\uffe9\001\002\000\006\003\110" +
    "\045\107\001\002\000\024\006\037\027\033\030\032\031" +
    "\031\032\026\033\034\034\035\035\030\046\uffdc\001\002" +
    "\000\004\007\uffe1\001\002\000\004\007\112\001\002\000" +
    "\030\005\011\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc" +
    "\024\ufffc\026\ufffc\103\ufffc\104\ufffc\105\ufffc\001\002\000" +
    "\010\007\uffe0\020\uffe0\021\uffe0\001\002\000\026\010\ufff4" +
    "\011\ufff4\012\ufff4\014\055\015\ufff4\024\ufff4\026\ufff4\103" +
    "\ufff4\104\ufff4\105\ufff4\001\002\000\024\010\uffd7\011\120" +
    "\012\134\015\116\024\141\026\123\103\122\104\130\105" +
    "\126\001\002\000\006\003\350\103\351\001\002\000\004" +
    "\050\347\001\002\000\004\045\331\001\002\000\004\010" +
    "\330\001\002\000\014\057\322\060\325\061\321\062\323" +
    "\063\326\001\002\000\006\003\307\045\306\001\002\000" +
    "\040\003\uffd7\010\uffd7\011\120\012\134\013\uffd7\015\116" +
    "\017\uffd7\024\141\026\123\036\uffd7\037\uffd7\040\uffd7\103" +
    "\122\104\130\105\126\001\002\000\004\050\uffd3\001\002" +
    "\000\006\003\267\045\266\001\002\000\040\003\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\017\uffd1\024\uffd1" +
    "\026\uffd1\036\uffd1\037\uffd1\040\uffd1\103\uffd1\104\uffd1\105" +
    "\uffd1\001\002\000\006\003\245\045\244\001\002\000\004" +
    "\050\uffd2\001\002\000\040\003\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\015\uffce\017\uffce\024\uffce\026\uffce\036\uffce" +
    "\037\uffce\040\uffce\103\uffce\104\uffce\105\uffce\001\002\000" +
    "\040\003\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd" +
    "\017\uffcd\024\uffcd\026\uffcd\036\uffcd\037\uffcd\040\uffcd\103" +
    "\uffcd\104\uffcd\105\uffcd\001\002\000\026\003\uffd7\011\120" +
    "\012\134\015\116\017\uffd7\024\141\026\123\103\122\104" +
    "\130\105\126\001\002\000\040\003\uffd6\010\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\015\uffd6\017\uffd6\024\uffd6\026\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\103\uffd6\104\uffd6\105\uffd6\001\002" +
    "\000\004\050\uffd4\001\002\000\040\003\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\015\uffd0\017\uffd0\024\uffd0\026\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\103\uffd0\104\uffd0\105\uffd0\001" +
    "\002\000\040\003\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\015\uffcf\017\uffcf\024\uffcf\026\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\103\uffcf\104\uffcf\105\uffcf\001\002\000\006\003\142" +
    "\103\143\001\002\000\004\010\uffc6\001\002\000\004\063" +
    "\144\001\002\000\022\036\150\037\154\040\161\041\145" +
    "\042\152\043\147\045\155\103\160\001\002\000\054\003" +
    "\uff60\023\uff60\025\uff60\044\uff60\046\uff60\050\uff60\051\uff60" +
    "\056\uff60\064\uff60\065\uff60\066\uff60\067\uff60\070\uff60\071" +
    "\uff60\072\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60" +
    "\100\uff60\001\002\000\054\003\uff8c\023\uff8c\025\uff8c\044" +
    "\uff8c\046\uff8c\050\uff8c\051\uff8c\056\uff8c\064\uff8c\065\uff8c" +
    "\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074" +
    "\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\001\002\000\054" +
    "\003\uff61\023\uff61\025\uff61\044\uff61\046\uff61\050\uff61\051" +
    "\uff61\056\uff61\064\uff61\065\uff61\066\uff61\067\uff61\070\uff61" +
    "\071\uff61\072\uff61\073\uff61\074\uff61\075\uff61\076\uff61\077" +
    "\uff61\100\uff61\001\002\000\054\003\uff64\023\uff64\025\uff64" +
    "\044\uff64\046\uff64\050\uff64\051\uff64\056\uff64\064\uff64\065" +
    "\uff64\066\uff64\067\uff64\070\uff64\071\uff64\072\uff64\073\uff64" +
    "\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64\001\002\000" +
    "\054\003\uff8e\023\uff8e\025\uff8e\044\uff8e\046\uff8e\050\uff8e" +
    "\051\uff8e\056\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e" +
    "\077\uff8e\100\uff8e\001\002\000\054\003\uff62\023\uff62\025" +
    "\uff62\044\uff62\046\uff62\050\uff62\051\uff62\056\uff62\064\uff62" +
    "\065\uff62\066\uff62\067\uff62\070\uff62\071\uff62\072\uff62\073" +
    "\uff62\074\uff62\075\uff62\076\uff62\077\uff62\100\uff62\001\002" +
    "\000\054\003\uff8d\023\uff8d\025\uff8d\044\uff8d\046\uff8d\050" +
    "\uff8d\051\uff8d\056\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076" +
    "\uff8d\077\uff8d\100\uff8d\001\002\000\054\003\uff63\023\uff63" +
    "\025\uff63\044\uff63\046\uff63\050\uff63\051\uff63\056\uff63\064" +
    "\uff63\065\uff63\066\uff63\067\uff63\070\uff63\071\uff63\072\uff63" +
    "\073\uff63\074\uff63\075\uff63\076\uff63\077\uff63\100\uff63\001" +
    "\002\000\022\036\150\037\154\040\161\041\145\042\152" +
    "\043\147\045\155\103\160\001\002\000\054\003\uff87\023" +
    "\uff87\025\uff87\044\uff87\046\uff87\050\uff87\051\uff87\056\uff87" +
    "\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072" +
    "\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077\uff87\100\uff87" +
    "\001\002\000\054\003\uff8f\023\uff8f\025\uff8f\044\uff8f\046" +
    "\uff8f\050\uff8f\051\uff8f\056\uff8f\064\uff8f\065\uff8f\066\uff8f" +
    "\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075" +
    "\uff8f\076\uff8f\077\uff8f\100\uff8f\001\002\000\060\003\uff88" +
    "\023\uff88\025\uff88\044\uff88\046\uff88\050\uff88\051\uff88\056" +
    "\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88" +
    "\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\077\uff88\100" +
    "\uff88\101\202\102\204\001\002\000\054\003\uff5f\023\uff5f" +
    "\025\uff5f\044\uff5f\046\uff5f\050\uff5f\051\uff5f\056\uff5f\064" +
    "\uff5f\065\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f" +
    "\073\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f\100\uff5f\001" +
    "\002\000\020\023\171\056\164\064\172\065\166\066\170" +
    "\067\163\070\167\001\002\000\022\036\uff81\037\uff81\040" +
    "\uff81\041\uff81\042\uff81\043\uff81\045\uff81\103\uff81\001\002" +
    "\000\022\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043" +
    "\uff85\045\uff85\103\uff85\001\002\000\022\036\150\037\154" +
    "\040\161\041\145\042\152\043\147\045\155\103\160\001" +
    "\002\000\022\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\045\uff83\103\uff83\001\002\000\022\036\uff80\037" +
    "\uff80\040\uff80\041\uff80\042\uff80\043\uff80\045\uff80\103\uff80" +
    "\001\002\000\022\036\uff82\037\uff82\040\uff82\041\uff82\042" +
    "\uff82\043\uff82\045\uff82\103\uff82\001\002\000\022\036\150" +
    "\037\154\040\161\041\145\042\152\043\147\045\155\103" +
    "\160\001\002\000\022\036\uff84\037\uff84\040\uff84\041\uff84" +
    "\042\uff84\043\uff84\045\uff84\103\uff84\001\002\000\020\025" +
    "\174\056\164\064\172\065\166\066\170\067\163\070\167" +
    "\001\002\000\004\007\175\001\002\000\024\010\uffd7\011" +
    "\120\012\134\015\116\024\141\026\123\103\122\104\130" +
    "\105\126\001\002\000\040\003\uffc7\010\uffc7\011\uffc7\012" +
    "\uffc7\013\uffc7\015\uffc7\017\uffc7\024\uffc7\026\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\103\uffc7\104\uffc7\105\uffc7\001\002\000" +
    "\004\010\200\001\002\000\040\003\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\015\uffc4\017\uffc4\024\uffc4\026\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\103\uffc4\104\uffc4\105\uffc4\001\002" +
    "\000\054\003\uff8a\023\uff8a\025\uff8a\044\uff8a\046\uff8a\050" +
    "\uff8a\051\uff8a\056\164\064\172\065\166\066\170\067\163" +
    "\070\167\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076" +
    "\uff8a\077\uff8a\100\uff8a\001\002\000\054\003\uff71\023\uff71" +
    "\025\uff71\044\uff71\046\uff71\050\uff71\051\uff71\056\uff71\064" +
    "\uff71\065\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71" +
    "\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71\001" +
    "\002\000\054\003\uff89\023\uff89\025\uff89\044\uff89\046\uff89" +
    "\050\uff89\051\uff89\056\uff89\064\uff89\065\uff89\066\uff89\067" +
    "\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89" +
    "\076\uff89\077\uff89\100\uff89\001\002\000\054\003\uff70\023" +
    "\uff70\025\uff70\044\uff70\046\uff70\050\uff70\051\uff70\056\uff70" +
    "\064\uff70\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072" +
    "\uff70\073\uff70\074\uff70\075\uff70\076\uff70\077\uff70\100\uff70" +
    "\001\002\000\020\046\206\056\164\064\172\065\166\066" +
    "\170\067\163\070\167\001\002\000\054\003\uff8b\023\uff8b" +
    "\025\uff8b\044\uff8b\046\uff8b\050\uff8b\051\uff8b\056\uff8b\064" +
    "\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b" +
    "\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\001" +
    "\002\000\004\010\210\001\002\000\040\003\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\015\uffc5\017\uffc5\024\uffc5\026" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\103\uffc5\104\uffc5\105\uffc5" +
    "\001\002\000\006\003\212\017\213\001\002\000\004\046" +
    "\uffbe\001\002\000\006\003\215\045\214\001\002\000\024" +
    "\003\236\036\150\037\154\040\161\041\145\042\152\043" +
    "\147\045\155\103\160\001\002\000\022\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc\103\uffbc\001" +
    "\002\000\022\036\150\037\154\040\161\041\145\042\152" +
    "\043\147\045\155\103\160\001\002\000\004\046\234\001" +
    "\002\000\040\044\224\056\164\064\172\065\166\066\170" +
    "\067\163\070\167\071\232\072\223\073\231\074\227\075" +
    "\230\076\226\077\225\100\222\001\002\000\022\036\150" +
    "\037\154\040\161\041\145\042\152\043\147\045\155\103" +
    "\160\001\002\000\022\036\uff72\037\uff72\040\uff72\041\uff72" +
    "\042\uff72\043\uff72\045\uff72\103\uff72\001\002\000\022\036" +
    "\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\045\uff76" +
    "\103\uff76\001\002\000\022\036\uff78\037\uff78\040\uff78\041" +
    "\uff78\042\uff78\043\uff78\045\uff78\103\uff78\001\002\000\022" +
    "\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\045" +
    "\uff73\103\uff73\001\002\000\022\036\uff74\037\uff74\040\uff74" +
    "\041\uff74\042\uff74\043\uff74\045\uff74\103\uff74\001\002\000" +
    "\022\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79" +
    "\045\uff79\103\uff79\001\002\000\022\036\uff75\037\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\045\uff75\103\uff75\001\002" +
    "\000\022\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\045\uff7a\103\uff7a\001\002\000\022\036\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\045\uff77\103\uff77\001" +
    "\002\000\020\046\uff86\056\164\064\172\065\166\066\170" +
    "\067\163\070\167\001\002\000\040\003\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\015\uffbb\017\uffbb\024\uffbb\026\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\103\uffbb\104\uffbb\105\uffbb\001" +
    "\002\000\004\046\241\001\002\000\004\046\uffba\001\002" +
    "\000\004\046\240\001\002\000\040\003\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\015\uffb9\017\uffb9\024\uffb9\026\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\103\uffb9\104\uffb9\105\uffb9\001" +
    "\002\000\040\003\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\015\uffbf\017\uffbf\024\uffbf\026\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\103\uffbf\104\uffbf\105\uffbf\001\002\000\004\046\243" +
    "\001\002\000\040\003\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\015\uffbd\017\uffbd\024\uffbd\026\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\103\uffbd\104\uffbd\105\uffbd\001\002\000\024\003" +
    "\253\036\150\037\154\040\161\041\145\042\152\043\147" +
    "\045\155\103\160\001\002\000\030\003\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\045\uff9c\046\uff9c" +
    "\050\uff9c\103\uff9c\001\002\000\030\003\253\036\150\037" +
    "\154\040\161\041\145\042\152\043\147\045\155\046\251" +
    "\050\uff98\103\160\001\002\000\004\050\uff9b\001\002\000" +
    "\010\003\256\046\uff93\051\257\001\002\000\004\050\uff99" +
    "\001\002\000\004\046\255\001\002\000\010\003\uff91\046" +
    "\uff91\051\uff91\001\002\000\024\003\uff92\046\uff92\051\uff92" +
    "\056\164\064\172\065\166\066\170\067\163\070\167\001" +
    "\002\000\004\050\uff9a\001\002\000\024\003\uff95\036\uff95" +
    "\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\045\uff95\103" +
    "\uff95\001\002\000\024\003\253\036\150\037\154\040\161" +
    "\041\145\042\152\043\147\045\155\103\160\001\002\000" +
    "\004\046\uff97\001\002\000\004\046\uff96\001\002\000\024" +
    "\003\253\036\150\037\154\040\161\041\145\042\152\043" +
    "\147\045\155\103\160\001\002\000\004\046\uff94\001\002" +
    "\000\004\046\265\001\002\000\004\050\uff9d\001\002\000" +
    "\010\003\276\046\300\103\277\001\002\000\010\046\uffa5" +
    "\050\uffa5\103\uffa5\001\002\000\004\050\uffa8\001\002\000" +
    "\010\046\274\050\uff9e\103\273\001\002\000\004\050\uffa4" +
    "\001\002\000\004\046\275\001\002\000\004\050\uff9f\001" +
    "\002\000\004\050\uffa0\001\002\000\010\046\uffa3\050\uffa3" +
    "\103\uffa3\001\002\000\006\003\301\046\302\001\002\000" +
    "\004\050\uffa7\001\002\000\004\050\uffa1\001\002\000\004" +
    "\050\uffa6\001\002\000\010\046\274\050\uff9e\103\273\001" +
    "\002\000\004\050\uffa2\001\002\000\040\003\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8\024\uffd8\026" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\103\uffd8\104\uffd8\105\uffd8" +
    "\001\002\000\022\036\150\037\154\040\161\041\145\042" +
    "\152\043\147\045\155\103\160\001\002\000\004\010\uffc2" +
    "\001\002\000\004\010\311\001\002\000\040\003\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\017\uffc1\024\uffc1" +
    "\026\uffc1\036\uffc1\037\uffc1\040\uffc1\103\uffc1\104\uffc1\105" +
    "\uffc1\001\002\000\004\046\313\001\002\000\004\025\314" +
    "\001\002\000\004\007\315\001\002\000\024\010\uffd7\011" +
    "\120\012\134\015\116\024\141\026\123\103\122\104\130" +
    "\105\126\001\002\000\040\003\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\015\uffc3\017\uffc3\024\uffc3\026\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\103\uffc3\104\uffc3\105\uffc3\001\002\000" +
    "\004\010\320\001\002\000\040\003\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\015\uffc0\017\uffc0\024\uffc0\026\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\103\uffc0\104\uffc0\105\uffc0\001\002" +
    "\000\022\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043" +
    "\uff7d\045\uff7d\103\uff7d\001\002\000\022\036\uff7f\037\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\043\uff7f\045\uff7f\103\uff7f\001" +
    "\002\000\022\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c" +
    "\043\uff7c\045\uff7c\103\uff7c\001\002\000\022\036\150\037" +
    "\154\040\161\041\145\042\152\043\147\045\155\103\160" +
    "\001\002\000\022\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042" +
    "\uff7e\043\uff7e\045\uff7e\103\uff7e\001\002\000\022\036\uff7b" +
    "\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\045\uff7b\103" +
    "\uff7b\001\002\000\020\050\uff90\056\164\064\172\065\166" +
    "\066\170\067\163\070\167\001\002\000\010\007\uffde\020" +
    "\uffde\021\uffde\001\002\000\022\036\150\037\154\040\161" +
    "\041\145\042\152\043\147\045\155\103\160\001\002\000" +
    "\004\046\uffcb\001\002\000\004\046\334\001\002\000\004" +
    "\022\335\001\002\000\004\007\336\001\002\000\024\010" +
    "\uffd7\011\120\012\134\015\116\024\141\026\123\103\122" +
    "\104\130\105\126\001\002\000\040\003\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\340\015\uffc8\017\uffc8\024\uffc8\026\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\103\uffc8\104\uffc8\105\uffc8\001" +
    "\002\000\004\007\342\001\002\000\040\003\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\015\uffcc\017\uffcc\024\uffcc\026" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\103\uffcc\104\uffcc\105\uffcc" +
    "\001\002\000\024\010\uffd7\011\120\012\134\015\116\024" +
    "\141\026\123\103\122\104\130\105\126\001\002\000\004" +
    "\010\344\001\002\000\040\003\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\015\uffc9\017\uffc9\024\uffc9\026\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\103\uffc9\104\uffc9\105\uffc9\001\002\000" +
    "\004\010\346\001\002\000\040\003\uffca\010\uffca\011\uffca" +
    "\012\uffca\013\uffca\015\uffca\017\uffca\024\uffca\026\uffca\036" +
    "\uffca\037\uffca\040\uffca\103\uffca\104\uffca\105\uffca\001\002" +
    "\000\040\003\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015" +
    "\uffd5\017\uffd5\024\uffd5\026\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\103\uffd5\104\uffd5\105\uffd5\001\002\000\004\016\uffb7\001" +
    "\002\000\006\003\352\016\353\001\002\000\014\003\uffb5" +
    "\013\uffb5\036\uffb5\037\uffb5\040\uffb5\001\002\000\014\003" +
    "\356\013\362\036\361\037\354\040\355\001\002\000\004" +
    "\047\uffab\001\002\000\004\047\uffaa\001\002\000\040\003" +
    "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\017\uffb1" +
    "\024\uffb1\026\uffb1\036\uffb1\037\uffb1\040\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\001\002\000\004\047\367\001\002\000\040" +
    "\003\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8\017" +
    "\uffb8\024\uffb8\026\uffb8\036\uffb8\037\uffb8\040\uffb8\103\uffb8" +
    "\104\uffb8\105\uffb8\001\002\000\004\047\uffa9\001\002\000" +
    "\004\047\366\001\002\000\040\003\uffd7\010\uffd7\011\120" +
    "\012\134\013\uffd7\015\116\017\uffd7\024\141\026\123\036" +
    "\uffd7\037\uffd7\040\uffd7\103\122\104\130\105\126\001\002" +
    "\000\040\003\356\010\uffb3\011\uffb3\012\uffb3\013\362\015" +
    "\uffb3\017\uffb3\024\uffb3\026\uffb3\036\361\037\354\040\355" +
    "\103\uffb3\104\uffb3\105\uffb3\001\002\000\040\003\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\017\uffb2\024\uffb2" +
    "\026\uffb2\036\uffb2\037\uffb2\040\uffb2\103\uffb2\104\uffb2\105" +
    "\uffb2\001\002\000\040\003\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\015\uffac\017\uffac\024\uffac\026\uffac\036\uffac\037" +
    "\uffac\040\uffac\103\uffac\104\uffac\105\uffac\001\002\000\040" +
    "\003\uffad\010\uffad\011\uffad\012\uffad\013\uffad\015\uffad\017" +
    "\uffad\024\uffad\026\uffad\036\uffad\037\uffad\040\uffad\103\uffad" +
    "\104\uffad\105\uffad\001\002\000\040\003\uffd7\010\uffd7\011" +
    "\120\012\134\013\uffd7\015\116\017\uffd7\024\141\026\123" +
    "\036\uffd7\037\uffd7\040\uffd7\103\122\104\130\105\126\001" +
    "\002\000\040\003\356\010\uffae\011\uffae\012\uffae\013\362" +
    "\015\uffae\017\uffae\024\uffae\026\uffae\036\361\037\354\040" +
    "\355\103\uffae\104\uffae\105\uffae\001\002\000\040\003\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\017\uffaf\024" +
    "\uffaf\026\uffaf\036\uffaf\037\uffaf\040\uffaf\103\uffaf\104\uffaf" +
    "\105\uffaf\001\002\000\040\003\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\015\uffb0\017\uffb0\024\uffb0\026\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\103\uffb0\104\uffb0\105\uffb0\001\002\000" +
    "\014\003\356\013\362\036\361\037\354\040\355\001\002" +
    "\000\040\003\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\015" +
    "\uffb4\017\uffb4\024\uffb4\026\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\103\uffb4\104\uffb4\105\uffb4\001\002\000\004\016\377\001" +
    "\002\000\014\003\356\013\362\036\361\037\354\040\355" +
    "\001\002\000\040\003\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\015\uffb6\017\uffb6\024\uffb6\026\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\103\uffb6\104\uffb6\105\uffb6\001\002\000\004\103" +
    "\u0106\001\002\000\004\046\uffdd\001\002\000\004\046\u0104" +
    "\001\002\000\004\007\112\001\002\000\010\007\uffe2\020" +
    "\uffe2\021\uffe2\001\002\000\006\046\uffd9\051\u0107\001\002" +
    "\000\022\006\037\027\033\030\032\031\031\032\026\033" +
    "\034\034\035\035\030\001\002\000\004\046\uffdb\001\002" +
    "\000\004\046\uffda\001\002\000\006\003\u010c\045\u010b\001" +
    "\002\000\024\006\037\027\033\030\032\031\031\032\026" +
    "\033\034\034\035\035\030\046\uffdc\001\002\000\004\007" +
    "\uffe4\001\002\000\004\007\u010e\001\002\000\010\007\uffe3" +
    "\020\uffe3\021\uffe3\001\002\000\004\046\u0110\001\002\000" +
    "\004\047\u0111\001\002\000\022\006\037\027\033\030\032" +
    "\031\031\032\026\033\034\034\035\035\030\001\002\000" +
    "\004\007\u0113\001\002\000\030\005\011\010\ufffc\011\ufffc" +
    "\012\ufffc\014\ufffc\015\ufffc\024\ufffc\026\ufffc\103\ufffc\104" +
    "\ufffc\105\ufffc\001\002\000\010\007\uffe5\020\uffe5\021\uffe5" +
    "\001\002\000\026\010\ufff4\011\ufff4\012\ufff4\014\055\015" +
    "\ufff4\024\ufff4\026\ufff4\103\ufff4\104\ufff4\105\ufff4\001\002" +
    "\000\024\010\uffd7\011\120\012\134\015\116\024\141\026" +
    "\123\103\122\104\130\105\126\001\002\000\004\010\u0118" +
    "\001\002\000\010\007\uffdf\020\uffdf\021\uffdf\001\002\000" +
    "\024\010\uffd7\011\120\012\134\015\116\024\141\026\123" +
    "\103\122\104\130\105\126\001\002\000\004\010\u011b\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\011\004\006\005\007\001\001" +
    "\000\002\001\001\000\004\006\053\001\001\000\006\007" +
    "\014\030\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\017\001\001\000\002\001\001\000\006\007" +
    "\016\030\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\022\001\001\000\002\001" +
    "\001\000\010\032\026\033\024\034\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\044\033\024\034" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\050\033\024\034\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\076\013\103\014\101\015\077\001\001\000\006\010" +
    "\057\031\056\001\001\000\002\001\001\000\006\010\060" +
    "\031\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\073\001\001\000\004\044\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\104\013\103\014\101\015\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\u0102\021" +
    "\u0101\032\u0100\033\024\034\035\001\001\000\004\102\110" +
    "\001\001\000\004\017\112\001\001\000\004\005\113\001" +
    "\001\000\002\001\001\000\004\006\114\001\001\000\032" +
    "\023\120\024\123\025\116\026\130\035\134\036\126\037" +
    "\136\040\137\045\124\046\135\054\131\056\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\323\001\001\000\002\001\001" +
    "\000\032\023\304\024\123\025\116\026\130\035\134\036" +
    "\126\037\136\040\137\045\124\046\135\054\131\056\132" +
    "\001\001\000\002\001\001\000\004\047\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\023\210\024\123\025" +
    "\116\026\130\035\134\036\126\037\136\040\137\045\124" +
    "\046\135\054\131\056\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\206\001\001\000\002\001\001\000" +
    "\016\027\155\060\161\061\145\062\152\063\150\064\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\155\060" +
    "\204\061\145\062\152\063\150\064\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\202\001\001\000" +
    "\002\001\001\000\004\066\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\027\155\060\200\061\145\062" +
    "\152\063\150\064\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\027\155\060\172\061" +
    "\145\062\152\063\150\064\156\001\001\000\002\001\001" +
    "\000\004\066\164\001\001\000\004\055\175\001\001\000" +
    "\032\023\176\024\123\025\116\026\130\035\134\036\126" +
    "\037\136\040\137\045\124\046\135\054\131\056\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\105\241\001\001\000\002\001\001\000\020" +
    "\027\155\060\217\061\145\062\152\063\150\064\156\065" +
    "\234\001\001\000\004\106\215\001\001\000\020\027\155" +
    "\060\217\061\145\062\152\063\150\064\156\065\216\001" +
    "\001\000\002\001\001\000\006\066\164\070\220\001\001" +
    "\000\016\027\155\060\232\061\145\062\152\063\150\064" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\027\155\050\263\060\253\061\145\062\152" +
    "\063\150\064\156\076\247\001\001\000\004\115\245\001" +
    "\001\000\024\027\155\050\251\060\253\061\145\062\152" +
    "\063\150\064\156\074\246\076\247\001\001\000\002\001" +
    "\001\000\004\075\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\164\001\001\000" +
    "\002\001\001\000\004\116\261\001\001\000\022\027\155" +
    "\050\260\060\253\061\145\062\152\063\150\064\156\076" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\027\155\050\262\060\253\061\145\062\152\063\150\064" +
    "\156\076\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\113\270\001" +
    "\001\000\002\001\001\000\004\073\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\114\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\027\155\060\217\061\145\062\152\063\150\064\156\065" +
    "\311\001\001\000\004\104\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\315\001\001\000\032\023\316\024\123\025\116" +
    "\026\130\035\134\036\126\037\136\040\137\045\124\046" +
    "\135\054\131\056\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\027\155\060\326\061\145" +
    "\062\152\063\150\064\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\164\001\001\000\002\001\001" +
    "\000\022\027\155\053\332\060\217\061\145\062\152\063" +
    "\150\064\156\065\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\336\001\001\000" +
    "\032\023\344\024\123\025\116\026\130\035\134\036\126" +
    "\037\136\040\137\045\124\046\135\054\131\056\132\001" +
    "\001\000\004\052\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\023\342\024\123\025\116\026\130\035" +
    "\134\036\126\037\136\040\137\045\124\046\135\054\131" +
    "\056\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\375\001\001\000\002\001\001\000\004\111\373\001" +
    "\001\000\010\041\362\042\357\043\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\112\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\023\363\024\123\025\116\026\130\035" +
    "\134\036\126\037\136\040\137\045\124\046\135\054\131" +
    "\056\132\001\001\000\010\041\362\042\364\043\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\023\370\024\123\025\116\026\130\035\134\036" +
    "\126\037\136\040\137\045\124\046\135\054\131\056\132" +
    "\001\001\000\012\041\362\042\371\043\356\072\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\041\362" +
    "\042\374\043\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\041\362\042\377\043\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0104\001\001\000\002\001\001\000\004" +
    "\022\u0107\001\001\000\012\021\u0108\032\u0100\033\024\034" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\u010e\021\u0101\032\u0100\033\024\034" +
    "\035\001\001\000\004\101\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\u0111\033\024\034\035\001\001\000\004\016\u0113" +
    "\001\001\000\004\005\u0114\001\001\000\002\001\001\000" +
    "\004\006\u0115\001\001\000\032\023\u0116\024\123\025\116" +
    "\026\130\035\134\036\126\037\136\040\137\045\124\046" +
    "\135\054\131\056\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\023\u0119\024\123\025\116\026\130\035" +
    "\134\036\126\037\136\040\137\045\124\046\135\054\131" +
    "\056\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String errorActual = "";
    
    
    public void report_fatal_error(String message, Object info)
    {
        System.err.println("Error fatal. Imposible recuperarse.\n");
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) {}
	
    public void syntax_error(Symbol st)
    {
        if (cur_token.value != null)
        {
            if (cur_token.sym == sym.error)
            {
                errorActual += "Lexer Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right + " -------- ";
                //report_error(errorActual, null);
                //report_error("Lexer Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right, null);
                
            }
            else
            {
                errorActual += "Syntax Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right + " -------- ";
                //report_error(errorActual, null);
                //report_error("Syntax Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right, null);
            }
        }
       
    }


    public void errorMensaje(String msg)
    {
        //System.err.println(msg);
        errorActual += msg;
        report_error(errorActual, null);
        errorActual = "";
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LITERAL ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LITERAL ::= _flotante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LITERAL ::= _false 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LITERAL ::= _true 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // LITERAL ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LITERAL ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO_SIMPLE ::= _real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO_SIMPLE ::= _shortint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPO_SIMPLE ::= _longint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPO_SIMPLE ::= _char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPO_SIMPLE ::= _boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPO_SIMPLE ::= _int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPO_SIMPLE ::= _string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPO_COMPUESTO ::= _array _bra_aper _entero _bra_cerr _of TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_COMPUESTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TIPO_COMPUESTO ::= _array _bra_aper _entero _rango_dos_puntos _entero _bra_cerr _of TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_COMPUESTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TIPO_DATO ::= TIPO_SIMPLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TIPO_DATO ::= TIPO_COMPUESTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERADOR_UNARIO ::= _op_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERADOR_UNARIO ::= _op_inc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERADOR_BOOLEAN ::= _NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERADOR_BOOLEAN ::= _AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERADOR_BOOLEAN ::= _OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERADOR_BOOLEAN ::= _distinto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERADOR_BOOLEAN ::= _mayor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERADOR_BOOLEAN ::= _mayor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERADOR_BOOLEAN ::= _igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERADOR_BOOLEAN ::= _menor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERADOR_BOOLEAN ::= _menor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERADOR_ARITMETICO_ASIGN ::= _asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERADOR_ARITMETICO_ASIGN ::= _op_mult_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERADOR_ARITMETICO_ASIGN ::= _op_div_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERADOR_ARITMETICO_ASIGN ::= _op_menos_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERADOR_ARITMETICO_ASIGN ::= _op_mas_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERADOR_ARITMETICO ::= _op_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERADOR_ARITMETICO ::= _op_mod 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERADOR_ARITMETICO ::= _op_division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERADOR_ARITMETICO ::= _op_multi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERADOR_ARITMETICO ::= _op_resta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERADOR_ARITMETICO ::= _op_suma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION_CONDICION ::= EXPRESION OPERADOR_BOOLEAN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_CONDICION",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION_BASE ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION_BASE ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION_UNARIA ::= _id OPERADOR_UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION_BINARIA ::= EXPRESION OPERADOR_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BINARIA",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION_COMPUESTA ::= _parentesisAbre EXPRESION _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_COMPUESTA",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= EXPRESION_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= EXPRESION_BINARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= EXPRESION_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ASIGNACION ::= _id OPERADOR_ARITMETICO_ASIGN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONTENIDO_WRITE ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.errorMensaje("Error en sentencia WRITE, parametro no valido");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONTENIDO_WRITE ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMETROS_WRITE_Aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE_Aux",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETROS_WRITE_Aux ::= error NT$15 PARAMETROS_WRITE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE_Aux",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$15 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia WRITE, falta ',' ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMETROS_WRITE_Aux ::= _coma PARAMETROS_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE_Aux",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMETROS_WRITE ::= CONTENIDO_WRITE PARAMETROS_WRITE_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCION_WRITE_Err ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE_Err",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCION_WRITE_Err ::= _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE_Err",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCION_WRITE_Err ::= PARAMETROS_WRITE _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE_Err",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCION_WRITE ::= _write error NT$14 FUNCION_WRITE_Err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$14 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia WRITE, falto abrir parentesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCION_WRITE ::= _write _parentesisAbre PARAMETROS_WRITE _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCION_READ_AUX_Err ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX_Err",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCION_READ_AUX_Err ::= _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX_Err",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCION_READ_AUX_Err ::= _id _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX_Err",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNCION_READ_AUX ::= _parentesisAbre _id error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.errorMensaje("Error en sentencia READ, falta cerrar patentesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNCION_READ_AUX ::= _parentesisAbre error NT$13 FUNCION_READ_AUX_Err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$13 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia READ, Problemas con los parametros de la instruccion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCION_READ_AUX ::= error NT$12 FUNCION_READ_AUX_Err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$12 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia READ, falto abrir parentesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCION_READ_AUX ::= _parentesisAbre _id _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCION_READ_AUX ::= _parentesisAbre _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNCION_READ ::= _read FUNCION_READ_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONSTANTE_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONSTANTE_CASE ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONSTANTE_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASE ::= _else _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASE ::= CONSTANTE_CASE _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASES_err ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_err",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASES_err ::= CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_err",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASES ::= error NT$11 CUERPO_INSTRUCCIONES CASES_err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en opcion de sentencia CASE, CONSTANTE invalida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASES ::= CASE CUERPO_INSTRUCCIONES CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASES ::= CASE CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_CASE ::= _case _id error NT$10 CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$10 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia CASE, se espera la Palabra Reservada OF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_CASE ::= _case error NT$9 _of CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia CASE, IDENTIFICADOR invalido");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_CASE ::= _case _id _of CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until _parentesisAbre error NT$8 _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$8 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia REPEAT, Expresion Condicional NO Valida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until error NT$7 EXPRESION_CONDICION _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$7 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia REPEAT, Falta '(' en la Expresion Condicional");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES error NT$6 _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia REPEAT, Falta Palabra Reservada UNTIL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until _parentesisAbre EXPRESION_CONDICION _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE_WHILE ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INICIO_WHILE ::= _while error NT$5 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$5 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Existe un error dentro del WHILE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INICIO_WHILE ::= _while _parentesisAbre EXPRESION_CONDICION _parentesisCierra _do BLOQUE_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE_FOR ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INICIO_FOR ::= _for error NT$4 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_FOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Existe un error dentro del FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INICIO_FOR ::= _for _id _asignacion EXPRESION _to EXPRESION _do BLOQUE_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_FOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE_ELSE ::= _else _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE_IF ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= EXPRESION_CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_IF ::= _if _parentesisAbre CONDICION _parentesisCierra _then BLOQUE_IF BLOQUE_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESTRUCTURA_CONTROL ::= INICIO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESTRUCTURA_CONTROL ::= INICIO_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ESTRUCTURA_CONTROL ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ESTRUCTURA_CONTROL ::= SENTENCIA_REPEAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ESTRUCTURA_CONTROL ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= FUNCION_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= FUNCION_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= INSTRUCCION _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPO_INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPO_INSTRUCCIONES ::= SENTENCIA CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROS_Aux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROS_Aux2 ::= _coma PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROS_Aux ::= TIPO_DATO _id PARAMETROS_Aux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETROS ::= PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTRUCTURA_PROCEDIMIENTO ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROCEDIMIENTO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESTRUCTURA_FUNCION ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_PROCEDIMIENTO ::= _procedure _id error NT$3 ESTRUCTURA_PROCEDIMIENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_PROCEDIMIENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Mala definición del procedimiento");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_PROCEDIMIENTO ::= _procedure _id _parentesisAbre PARAMETROS _parentesisCierra ESTRUCTURA_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_PROCEDIMIENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_FUNCION ::= _function _id error NT$2 _begin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Mala definición de la función");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_FUNCION ::= _function _id _parentesisAbre PARAMETROS _parentesisCierra _dos_puntos TIPO_DATO ESTRUCTURA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACIONES_FUNC_PROC ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACIONES_FUNC_PROC ::= FUNCION_O_PROCEDIMIENTO DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LITERAL_CASE ::= _flotante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LITERAL_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LITERAL_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONSTANTE ::= _id _igual error NT$1 _punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Error en la declaración de constante");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONSTANTE ::= _id error NT$0 LITERAL_CASE _punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en la declaración de constante");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONSTANTE ::= _id _igual LITERAL_CASE _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION_CONSTANTES ::= CONSTANTE DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_CONSTANTES ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_DECLARACION_CONSTANTES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_DECLARACION_CONSTANTES ::= _const DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_ID_CONSECUTIVO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_ID_CONSECUTIVO ::= _coma _id DECLARACION_ID_CONSECUTIVO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLE ::= error _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= _id DECLARACION_ID_CONSECUTIVO _dos_puntos TIPO_DATO _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_VARIABLES ::= VARIABLE DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_VARIABLES ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_DECLARACION_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_DECLARACION_VARIABLES ::= _var DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_PROGRAMA ::= DECLARACIONES _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO_PROGRAMA ::= _program _id BLOQUE_PROGRAMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

