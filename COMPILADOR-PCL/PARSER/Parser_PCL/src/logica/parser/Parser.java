
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 30 12:42:43 CST 2016
//----------------------------------------------------

package logica.parser;

import java.util.ArrayList;
import java_cup.runtime.*;
import logica.semantico.registros.*;
import logica.semantico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 30 12:42:43 CST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\271\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\004\005\000\002\005\004\000\002\005\002" +
    "\000\002\007\003\000\002\007\004\000\002\102\002\000" +
    "\002\007\005\000\002\103\002\000\002\104\002\000\002" +
    "\012\011\000\002\105\002\000\002\010\006\000\002\010" +
    "\002\000\002\006\004\000\002\006\002\000\002\011\003" +
    "\000\002\011\004\000\002\106\002\000\002\107\002\000" +
    "\002\013\010\000\002\110\002\000\002\013\006\000\002" +
    "\014\004\000\002\111\002\000\002\014\005\000\002\014" +
    "\002\000\002\015\003\000\002\015\003\000\002\112\002" +
    "\000\002\113\002\000\002\114\002\000\002\016\015\000" +
    "\002\115\002\000\002\016\006\000\002\020\005\000\002" +
    "\116\002\000\002\020\006\000\002\017\003\000\002\021" +
    "\003\000\002\021\002\000\002\117\002\000\002\022\006" +
    "\000\002\023\004\000\002\023\002\000\002\075\004\000" +
    "\002\075\002\000\002\076\003\000\002\076\004\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\011\000" +
    "\002\120\002\000\002\030\006\000\002\045\003\000\002" +
    "\043\006\000\002\044\006\000\002\044\002\000\002\046" +
    "\012\000\002\121\002\000\002\046\006\000\002\047\005" +
    "\000\002\050\010\000\002\122\002\000\002\050\006\000" +
    "\002\051\005\000\002\031\010\000\002\123\002\000\002" +
    "\031\007\000\002\124\002\000\002\031\011\000\002\125" +
    "\002\000\002\031\011\000\002\032\006\000\002\126\002" +
    "\000\002\032\007\000\002\127\002\000\002\032\007\000" +
    "\002\034\004\000\002\034\005\000\002\130\002\000\002" +
    "\034\006\000\002\064\003\000\002\064\002\000\002\033" +
    "\004\000\002\033\004\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\040\004\000\002\041\004\000" +
    "\002\041\005\000\002\131\002\000\002\041\005\000\002" +
    "\132\002\000\002\041\006\000\002\041\005\000\002\065" +
    "\004\000\002\065\003\000\002\065\002\000\002\037\006" +
    "\000\002\133\002\000\002\037\006\000\002\066\004\000" +
    "\002\066\003\000\002\066\002\000\002\042\004\000\002" +
    "\067\004\000\002\134\002\000\002\067\005\000\002\067" +
    "\002\000\002\070\003\000\002\070\003\000\002\135\002" +
    "\000\002\101\007\000\002\026\004\000\002\026\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\005\000\002" +
    "\025\002\000\002\136\002\000\002\025\005\000\002\100" +
    "\005\000\002\100\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\054\005\000\002\055\005\000\002\053\004\000\002" +
    "\056\003\000\002\056\003\000\002\057\005\000\002\057" +
    "\005\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\063\003\000\002\063\003\000\002" +
    "\071\003\000\002\071\003\000\002\072\012\000\002\072" +
    "\010\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\003\000\002\074" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\004\004\005\001\002\000\004\002\u0130\001" +
    "\002\000\004\103\006\001\002\000\016\003\ufffc\005\011" +
    "\007\ufffc\014\ufffc\020\ufffc\021\ufffc\001\002\000\004\007" +
    "\152\001\002\000\014\003\ufff0\007\ufff0\014\061\020\ufff0" +
    "\021\ufff0\001\002\000\006\003\013\103\014\001\002\000" +
    "\004\002\000\001\002\000\006\003\ufff9\103\ufff9\001\002" +
    "\000\006\047\ufff7\051\ufff7\001\002\000\036\003\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd\020\ufffd" +
    "\021\ufffd\024\ufffd\026\ufffd\103\ufffd\104\ufffd\105\ufffd\001" +
    "\002\000\036\003\013\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\014\ufffb\015\ufffb\020\ufffb\021\ufffb\024\ufffb\026\ufffb\103" +
    "\014\104\ufffb\105\ufffb\001\002\000\036\003\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\020\ufffa\021" +
    "\ufffa\024\ufffa\026\ufffa\103\ufffa\104\ufffa\105\ufffa\001\002" +
    "\000\006\047\ufff2\051\021\001\002\000\004\103\053\001" +
    "\002\000\004\047\023\001\002\000\022\006\035\027\032" +
    "\030\030\031\031\032\025\033\033\034\034\035\027\001" +
    "\002\000\014\003\uff59\005\uff59\007\uff59\050\uff59\103\uff59" +
    "\001\002\000\014\003\uff50\005\uff50\007\uff50\050\uff50\103" +
    "\uff50\001\002\000\004\050\ufff6\001\002\000\014\003\uff4f" +
    "\005\uff4f\007\uff4f\050\uff4f\103\uff4f\001\002\000\014\003" +
    "\uff54\005\uff54\007\uff54\050\uff54\103\uff54\001\002\000\014" +
    "\003\uff51\005\uff51\007\uff51\050\uff51\103\uff51\001\002\000" +
    "\004\052\037\001\002\000\014\003\uff52\005\uff52\007\uff52" +
    "\050\uff52\103\uff52\001\002\000\014\003\uff53\005\uff53\007" +
    "\uff53\050\uff53\103\uff53\001\002\000\014\003\uff55\005\uff55" +
    "\007\uff55\050\uff55\103\uff55\001\002\000\014\003\uff58\005" +
    "\uff58\007\uff58\050\uff58\103\uff58\001\002\000\004\036\040" +
    "\001\002\000\006\053\042\055\041\001\002\000\004\036" +
    "\045\001\002\000\004\016\043\001\002\000\022\006\035" +
    "\027\032\030\030\031\031\032\025\033\033\034\034\035" +
    "\027\001\002\000\014\003\uff56\005\uff56\007\uff56\050\uff56" +
    "\103\uff56\001\002\000\004\053\046\001\002\000\004\016" +
    "\047\001\002\000\022\006\035\027\032\030\030\031\031" +
    "\032\025\033\033\034\034\035\027\001\002\000\014\003" +
    "\uff57\005\uff57\007\uff57\050\uff57\103\uff57\001\002\000\004" +
    "\050\052\001\002\000\036\003\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\020\ufff5\021\ufff5\024\ufff5" +
    "\026\ufff5\103\ufff5\104\ufff5\105\ufff5\001\002\000\006\047" +
    "\ufff4\051\ufff4\001\002\000\006\047\ufff2\051\021\001\002" +
    "\000\004\047\ufff3\001\002\000\006\003\013\103\014\001" +
    "\002\000\036\003\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\014\ufff8\015\ufff8\020\ufff8\021\ufff8\024\ufff8\026\ufff8\103" +
    "\ufff8\104\ufff8\105\ufff8\001\002\000\012\003\110\007\uffe5" +
    "\020\107\021\112\001\002\000\006\003\062\103\063\001" +
    "\002\000\016\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\001\002\000\004\044\uffed\001\002\000\014\003" +
    "\062\007\uffef\020\uffef\021\uffef\103\063\001\002\000\012" +
    "\003\ufff1\007\ufff1\020\ufff1\021\ufff1\001\002\000\012\003" +
    "\uffee\007\uffee\020\uffee\021\uffee\001\002\000\004\044\070" +
    "\001\002\000\016\036\076\037\072\040\075\041\073\042" +
    "\077\043\074\001\002\000\004\050\uffec\001\002\000\072" +
    "\003\uff4d\023\uff4d\025\uff4d\036\uff4d\037\uff4d\040\uff4d\041" +
    "\uff4d\042\uff4d\043\uff4d\044\uff4d\046\uff4d\050\uff4d\051\uff4d" +
    "\056\uff4d\064\uff4d\065\uff4d\066\uff4d\067\uff4d\070\uff4d\071" +
    "\uff4d\072\uff4d\073\uff4d\074\uff4d\075\uff4d\076\uff4d\077\uff4d" +
    "\100\uff4d\103\uff4d\001\002\000\072\003\uff4a\023\uff4a\025" +
    "\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a" +
    "\044\uff4a\046\uff4a\050\uff4a\051\uff4a\056\uff4a\064\uff4a\065" +
    "\uff4a\066\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a\073\uff4a" +
    "\074\uff4a\075\uff4a\076\uff4a\077\uff4a\100\uff4a\103\uff4a\001" +
    "\002\000\072\003\uff4b\023\uff4b\025\uff4b\036\uff4b\037\uff4b" +
    "\040\uff4b\041\uff4b\042\uff4b\043\uff4b\044\uff4b\046\uff4b\050" +
    "\uff4b\051\uff4b\056\uff4b\064\uff4b\065\uff4b\066\uff4b\067\uff4b" +
    "\070\uff4b\071\uff4b\072\uff4b\073\uff4b\074\uff4b\075\uff4b\076" +
    "\uff4b\077\uff4b\100\uff4b\103\uff4b\001\002\000\072\003\uff49" +
    "\023\uff49\025\uff49\036\uff49\037\uff49\040\uff49\041\uff49\042" +
    "\uff49\043\uff49\044\uff49\046\uff49\050\uff49\051\uff49\056\uff49" +
    "\064\uff49\065\uff49\066\uff49\067\uff49\070\uff49\071\uff49\072" +
    "\uff49\073\uff49\074\uff49\075\uff49\076\uff49\077\uff49\100\uff49" +
    "\103\uff49\001\002\000\072\003\uff4e\023\uff4e\025\uff4e\036" +
    "\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e" +
    "\046\uff4e\050\uff4e\051\uff4e\056\uff4e\064\uff4e\065\uff4e\066" +
    "\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e\073\uff4e\074\uff4e" +
    "\075\uff4e\076\uff4e\077\uff4e\100\uff4e\103\uff4e\001\002\000" +
    "\072\003\uff4c\023\uff4c\025\uff4c\036\uff4c\037\uff4c\040\uff4c" +
    "\041\uff4c\042\uff4c\043\uff4c\044\uff4c\046\uff4c\050\uff4c\051" +
    "\uff4c\056\uff4c\064\uff4c\065\uff4c\066\uff4c\067\uff4c\070\uff4c" +
    "\071\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c\076\uff4c\077" +
    "\uff4c\100\uff4c\103\uff4c\001\002\000\004\050\101\001\002" +
    "\000\014\003\uffeb\007\uffeb\020\uffeb\021\uffeb\103\uffeb\001" +
    "\002\000\016\036\076\037\072\040\075\041\073\042\077" +
    "\043\074\001\002\000\004\050\104\001\002\000\014\003" +
    "\uffe9\007\uffe9\020\uffe9\021\uffe9\103\uffe9\001\002\000\004" +
    "\007\ufffe\001\002\000\012\003\uffe3\007\uffe3\020\uffe3\021" +
    "\uffe3\001\002\000\006\003\117\103\uffe2\001\002\000\012" +
    "\003\uffe7\007\uffe7\020\uffe7\021\uffe7\001\002\000\012\003" +
    "\uffe4\007\uffe4\020\uffe4\021\uffe4\001\002\000\012\003\uffd9" +
    "\007\uffd9\020\uffd9\021\uffd9\001\002\000\012\003\110\007" +
    "\uffe5\020\107\021\112\001\002\000\004\007\uffe8\001\002" +
    "\000\012\003\110\007\uffe5\020\107\021\112\001\002\000" +
    "\004\007\uffe6\001\002\000\010\003\uffde\005\uffde\007\uffde" +
    "\001\002\000\004\103\121\001\002\000\004\045\uffe1\001" +
    "\002\000\004\045\123\001\002\000\024\006\035\027\032" +
    "\030\030\031\031\032\025\033\033\034\034\035\027\046" +
    "\uffd7\001\002\000\004\103\143\001\002\000\004\046\uffd8" +
    "\001\002\000\004\046\127\001\002\000\004\047\130\001" +
    "\002\000\022\006\035\027\032\030\030\031\031\032\025" +
    "\033\033\034\034\035\027\001\002\000\010\003\uffe0\005" +
    "\uffe0\007\uffe0\001\002\000\010\003\134\005\011\007\ufffc" +
    "\001\002\000\012\003\uffdf\007\uffdf\020\uffdf\021\uffdf\001" +
    "\002\000\004\007\uffdb\001\002\000\004\007\136\001\002" +
    "\000\004\010\137\001\002\000\012\003\uffdc\007\uffdc\020" +
    "\uffdc\021\uffdc\001\002\000\004\007\141\001\002\000\004" +
    "\010\142\001\002\000\012\003\uffda\007\uffda\020\uffda\021" +
    "\uffda\001\002\000\006\046\uffd6\051\uffd6\001\002\000\006" +
    "\046\uffd3\051\145\001\002\000\022\006\035\027\032\030" +
    "\030\031\031\032\025\033\033\034\034\035\027\001\002" +
    "\000\004\046\uffd5\001\002\000\004\046\uffd4\001\002\000" +
    "\010\003\134\005\011\007\ufffc\001\002\000\012\003\uffdd" +
    "\007\uffdd\020\uffdd\021\uffdd\001\002\000\026\003\172\010" +
    "\uffd1\011\156\012\173\015\153\024\200\026\160\103\157" +
    "\104\165\105\163\001\002\000\006\003\u0117\103\u0118\001" +
    "\002\000\004\050\u0116\001\002\000\004\010\u0115\001\002" +
    "\000\006\003\u0104\045\u0103\001\002\000\016\045\uff87\057" +
    "\375\060\u0100\061\374\062\376\063\u0101\001\002\000\006" +
    "\003\362\045\361\001\002\000\040\003\172\010\uffd1\011" +
    "\156\012\173\013\uffd1\015\153\017\uffd1\024\200\026\160" +
    "\036\uffd1\037\uffd1\040\uffd1\103\157\104\165\105\163\001" +
    "\002\000\004\050\uffcb\001\002\000\006\003\342\045\341" +
    "\001\002\000\040\003\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\015\uffca\017\uffca\024\uffca\026\uffca\036\uffca\037\uffca" +
    "\040\uffca\103\uffca\104\uffca\105\uffca\001\002\000\006\003" +
    "\320\045\317\001\002\000\004\050\uffce\001\002\000\004" +
    "\050\uffcd\001\002\000\040\003\uffc7\010\uffc7\011\uffc7\012" +
    "\uffc7\013\uffc7\015\uffc7\017\uffc7\024\uffc7\026\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\103\uffc7\104\uffc7\105\uffc7\001\002\000" +
    "\040\003\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6" +
    "\017\uffc6\024\uffc6\026\uffc6\036\uffc6\037\uffc6\040\uffc6\103" +
    "\uffc6\104\uffc6\105\uffc6\001\002\000\004\050\uff7c\001\002" +
    "\000\026\003\172\011\156\012\173\015\153\017\uffd1\024" +
    "\200\026\160\103\157\104\165\105\163\001\002\000\040" +
    "\003\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\017" +
    "\uffd0\024\uffd0\026\uffd0\036\uffd0\037\uffd0\040\uffd0\103\uffd0" +
    "\104\uffd0\105\uffd0\001\002\000\004\050\uffcc\001\002\000" +
    "\040\003\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8" +
    "\017\uffc8\024\uffc8\026\uffc8\036\uffc8\037\uffc8\040\uffc8\103" +
    "\uffc8\104\uffc8\105\uffc8\001\002\000\040\003\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\015\uffc9\017\uffc9\024\uffc9\026" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\103\uffc9\104\uffc9\105\uffc9" +
    "\001\002\000\006\003\201\103\202\001\002\000\004\010" +
    "\uffbd\001\002\000\004\063\203\001\002\000\022\036\076" +
    "\037\072\040\075\041\073\042\077\043\074\045\210\103" +
    "\213\001\002\000\054\003\uff78\023\uff78\025\uff78\044\uff78" +
    "\046\uff78\050\uff78\051\uff78\056\uff78\064\uff78\065\uff78\066" +
    "\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78" +
    "\075\uff78\076\uff78\077\uff78\100\uff78\001\002\000\054\003" +
    "\uff79\023\uff79\025\uff79\044\uff79\046\uff79\050\uff79\051\uff79" +
    "\056\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071" +
    "\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79\077\uff79" +
    "\100\uff79\001\002\000\054\003\uff7a\023\uff7a\025\uff7a\044" +
    "\uff7a\046\uff7a\050\uff7a\051\uff7a\056\uff7a\064\uff7a\065\uff7a" +
    "\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074" +
    "\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\001\002\000\054" +
    "\003\uff72\023\uff72\025\uff72\044\uff72\046\uff72\050\uff72\051" +
    "\uff72\056\uff72\064\uff72\065\uff72\066\uff72\067\uff72\070\uff72" +
    "\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72\076\uff72\077" +
    "\uff72\100\uff72\001\002\000\022\036\076\037\072\040\075" +
    "\041\073\042\077\043\074\045\210\103\213\001\002\000" +
    "\054\003\uff77\023\uff77\025\uff77\044\uff77\046\uff77\050\uff77" +
    "\051\uff77\056\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070" +
    "\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77" +
    "\077\uff77\100\uff77\001\002\000\054\003\uff7b\023\uff7b\025" +
    "\uff7b\044\uff7b\046\uff7b\050\uff7b\051\uff7b\056\uff7b\064\uff7b" +
    "\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073" +
    "\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\001\002" +
    "\000\062\003\uff73\023\uff73\025\uff73\044\uff73\045\uff87\046" +
    "\uff73\050\uff73\051\uff73\056\uff73\064\uff73\065\uff73\066\uff73" +
    "\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075" +
    "\uff73\076\uff73\077\uff73\100\uff73\101\235\102\236\001\002" +
    "\000\020\023\223\056\217\064\224\065\220\066\222\067" +
    "\215\070\221\001\002\000\022\036\uff6b\037\uff6b\040\uff6b" +
    "\041\uff6b\042\uff6b\043\uff6b\045\uff6b\103\uff6b\001\002\000" +
    "\022\036\076\037\072\040\075\041\073\042\077\043\074" +
    "\045\210\103\213\001\002\000\022\036\uff6f\037\uff6f\040" +
    "\uff6f\041\uff6f\042\uff6f\043\uff6f\045\uff6f\103\uff6f\001\002" +
    "\000\022\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043" +
    "\uff6d\045\uff6d\103\uff6d\001\002\000\022\036\uff6a\037\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\043\uff6a\045\uff6a\103\uff6a\001" +
    "\002\000\022\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\045\uff6c\103\uff6c\001\002\000\022\036\076\037" +
    "\072\040\075\041\073\042\077\043\074\045\210\103\213" +
    "\001\002\000\022\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042" +
    "\uff6e\043\uff6e\045\uff6e\103\uff6e\001\002\000\020\025\226" +
    "\056\217\064\224\065\220\066\222\067\215\070\221\001" +
    "\002\000\004\007\227\001\002\000\026\003\172\010\uffd1" +
    "\011\156\012\173\015\153\024\200\026\160\103\157\104" +
    "\165\105\163\001\002\000\040\003\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\015\uffbe\017\uffbe\024\uffbe\026\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\103\uffbe\104\uffbe\105\uffbe\001\002" +
    "\000\004\010\232\001\002\000\040\003\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\015\uffbb\017\uffbb\024\uffbb\026\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\103\uffbb\104\uffbb\105\uffbb\001" +
    "\002\000\054\003\uff75\023\uff75\025\uff75\044\uff75\046\uff75" +
    "\050\uff75\051\uff75\056\217\064\224\065\220\066\222\067" +
    "\215\070\221\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75" +
    "\076\uff75\077\uff75\100\uff75\001\002\000\054\003\uff74\023" +
    "\uff74\025\uff74\044\uff74\046\uff74\050\uff74\051\uff74\056\uff74" +
    "\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072" +
    "\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74" +
    "\001\002\000\054\003\uff5b\023\uff5b\025\uff5b\044\uff5b\046" +
    "\uff5b\050\uff5b\051\uff5b\056\uff5b\064\uff5b\065\uff5b\066\uff5b" +
    "\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075" +
    "\uff5b\076\uff5b\077\uff5b\100\uff5b\001\002\000\054\003\uff5a" +
    "\023\uff5a\025\uff5a\044\uff5a\046\uff5a\050\uff5a\051\uff5a\056" +
    "\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a" +
    "\072\uff5a\073\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100" +
    "\uff5a\001\002\000\004\045\240\001\002\000\026\003\245" +
    "\036\076\037\072\040\075\041\073\042\077\043\074\046" +
    "\uff80\051\247\103\246\001\002\000\004\046\255\001\002" +
    "\000\026\003\245\036\076\037\072\040\075\041\073\042" +
    "\077\043\074\046\uff80\051\247\103\246\001\002\000\004" +
    "\046\uff84\001\002\000\026\003\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\046\uff82\051\uff82\103\uff82" +
    "\001\002\000\010\003\uff7f\046\uff7f\051\uff7f\001\002\000" +
    "\026\003\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\046\uff83\051\uff83\103\uff83\001\002\000\020\036" +
    "\076\037\072\040\075\041\073\042\077\043\074\103\246" +
    "\001\002\000\010\003\245\046\uff80\051\247\001\002\000" +
    "\004\046\uff81\001\002\000\010\003\245\046\uff80\051\247" +
    "\001\002\000\004\046\uff7e\001\002\000\004\046\uff85\001" +
    "\002\000\054\003\uff86\023\uff86\025\uff86\044\uff86\046\uff86" +
    "\050\uff86\051\uff86\056\uff86\064\uff86\065\uff86\066\uff86\067" +
    "\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86" +
    "\076\uff86\077\uff86\100\uff86\001\002\000\020\046\257\056" +
    "\217\064\224\065\220\066\222\067\215\070\221\001\002" +
    "\000\054\003\uff76\023\uff76\025\uff76\044\uff76\046\uff76\050" +
    "\uff76\051\uff76\056\uff76\064\uff76\065\uff76\066\uff76\067\uff76" +
    "\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075\uff76\076" +
    "\uff76\077\uff76\100\uff76\001\002\000\004\010\261\001\002" +
    "\000\040\003\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015" +
    "\uffbc\017\uffbc\024\uffbc\026\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\103\uffbc\104\uffbc\105\uffbc\001\002\000\006\003\263\017" +
    "\264\001\002\000\004\046\uffb5\001\002\000\006\003\266" +
    "\045\265\001\002\000\024\003\311\036\076\037\072\040" +
    "\075\041\073\042\077\043\074\045\210\103\213\001\002" +
    "\000\022\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\045\uffb3\103\uffb3\001\002\000\022\036\076\037\072" +
    "\040\075\041\073\042\077\043\074\045\210\103\213\001" +
    "\002\000\004\046\307\001\002\000\042\003\302\044\274" +
    "\056\217\064\224\065\220\066\222\067\215\070\221\071" +
    "\304\072\300\073\276\074\272\075\273\076\301\077\275" +
    "\100\277\001\002\000\022\036\uff63\037\uff63\040\uff63\041" +
    "\uff63\042\uff63\043\uff63\045\uff63\103\uff63\001\002\000\022" +
    "\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\045" +
    "\uff5f\103\uff5f\001\002\000\022\036\uff62\037\uff62\040\uff62" +
    "\041\uff62\042\uff62\043\uff62\045\uff62\103\uff62\001\002\000" +
    "\022\036\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d" +
    "\045\uff5d\103\uff5d\001\002\000\022\036\uff64\037\uff64\040" +
    "\uff64\041\uff64\042\uff64\043\uff64\045\uff64\103\uff64\001\002" +
    "\000\022\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043" +
    "\uff5c\045\uff5c\103\uff5c\001\002\000\022\036\uff60\037\uff60" +
    "\040\uff60\041\uff60\042\uff60\043\uff60\045\uff60\103\uff60\001" +
    "\002\000\022\036\uff5e\037\uff5e\040\uff5e\041\uff5e\042\uff5e" +
    "\043\uff5e\045\uff5e\103\uff5e\001\002\000\022\036\076\037" +
    "\072\040\075\041\073\042\077\043\074\045\210\103\213" +
    "\001\002\000\022\036\076\037\072\040\075\041\073\042" +
    "\077\043\074\045\210\103\213\001\002\000\022\036\uff61" +
    "\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61\045\uff61\103" +
    "\uff61\001\002\000\020\046\uff71\056\217\064\224\065\220" +
    "\066\222\067\215\070\221\001\002\000\020\046\uff70\056" +
    "\217\064\224\065\220\066\222\067\215\070\221\001\002" +
    "\000\040\003\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\015" +
    "\uffb2\017\uffb2\024\uffb2\026\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\103\uffb2\104\uffb2\105\uffb2\001\002\000\004\046\314\001" +
    "\002\000\004\046\uffb1\001\002\000\004\046\313\001\002" +
    "\000\040\003\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015" +
    "\uffb0\017\uffb0\024\uffb0\026\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\103\uffb0\104\uffb0\105\uffb0\001\002\000\040\003\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6\017\uffb6\024\uffb6" +
    "\026\uffb6\036\uffb6\037\uffb6\040\uffb6\103\uffb6\104\uffb6\105" +
    "\uffb6\001\002\000\004\046\316\001\002\000\040\003\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\015\uffb4\017\uffb4\024" +
    "\uffb4\026\uffb4\036\uffb4\037\uffb4\040\uffb4\103\uffb4\104\uffb4" +
    "\105\uffb4\001\002\000\024\003\326\036\076\037\072\040" +
    "\075\041\073\042\077\043\074\045\210\103\213\001\002" +
    "\000\030\003\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\045\uff93\046\uff93\050\uff93\103\uff93\001\002" +
    "\000\030\003\326\036\076\037\072\040\075\041\073\042" +
    "\077\043\074\045\210\046\324\050\uff8f\103\213\001\002" +
    "\000\004\050\uff92\001\002\000\010\003\331\046\uff8a\051" +
    "\332\001\002\000\004\050\uff90\001\002\000\004\046\330" +
    "\001\002\000\010\003\uff88\046\uff88\051\uff88\001\002\000" +
    "\024\003\uff89\046\uff89\051\uff89\056\217\064\224\065\220" +
    "\066\222\067\215\070\221\001\002\000\004\050\uff91\001" +
    "\002\000\024\003\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\045\uff8c\103\uff8c\001\002\000\024\003" +
    "\326\036\076\037\072\040\075\041\073\042\077\043\074" +
    "\045\210\103\213\001\002\000\004\046\uff8e\001\002\000" +
    "\004\046\uff8d\001\002\000\024\003\326\036\076\037\072" +
    "\040\075\041\073\042\077\043\074\045\210\103\213\001" +
    "\002\000\004\046\uff8b\001\002\000\004\046\340\001\002" +
    "\000\004\050\uff94\001\002\000\010\003\351\046\353\103" +
    "\352\001\002\000\010\046\uff9c\050\uff9c\103\uff9c\001\002" +
    "\000\004\050\uff9f\001\002\000\010\046\347\050\uff95\103" +
    "\346\001\002\000\004\050\uff9b\001\002\000\004\046\350" +
    "\001\002\000\004\050\uff96\001\002\000\004\050\uff97\001" +
    "\002\000\010\046\uff9a\050\uff9a\103\uff9a\001\002\000\006" +
    "\003\354\046\355\001\002\000\004\050\uff9e\001\002\000" +
    "\004\050\uff98\001\002\000\004\050\uff9d\001\002\000\010" +
    "\046\347\050\uff95\103\346\001\002\000\004\050\uff99\001" +
    "\002\000\040\003\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\015\uffd2\017\uffd2\024\uffd2\026\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\103\uffd2\104\uffd2\105\uffd2\001\002\000\022\036\076" +
    "\037\072\040\075\041\073\042\077\043\074\045\210\103" +
    "\213\001\002\000\004\010\uffb9\001\002\000\004\010\364" +
    "\001\002\000\040\003\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\015\uffb8\017\uffb8\024\uffb8\026\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\103\uffb8\104\uffb8\105\uffb8\001\002\000\004\046" +
    "\366\001\002\000\004\025\367\001\002\000\004\007\370" +
    "\001\002\000\026\003\172\010\uffd1\011\156\012\173\015" +
    "\153\024\200\026\160\103\157\104\165\105\163\001\002" +
    "\000\040\003\uffba\010\uffba\011\uffba\012\uffba\013\uffba\015" +
    "\uffba\017\uffba\024\uffba\026\uffba\036\uffba\037\uffba\040\uffba" +
    "\103\uffba\104\uffba\105\uffba\001\002\000\004\010\373\001" +
    "\002\000\040\003\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\015\uffb7\017\uffb7\024\uffb7\026\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\001\002\000\022\036\uff67" +
    "\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67\045\uff67\103" +
    "\uff67\001\002\000\022\036\uff69\037\uff69\040\uff69\041\uff69" +
    "\042\uff69\043\uff69\045\uff69\103\uff69\001\002\000\022\036" +
    "\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\045\uff66" +
    "\103\uff66\001\002\000\022\036\076\037\072\040\075\041" +
    "\073\042\077\043\074\045\210\103\213\001\002\000\022" +
    "\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\045" +
    "\uff68\103\uff68\001\002\000\022\036\uff65\037\uff65\040\uff65" +
    "\041\uff65\042\uff65\043\uff65\045\uff65\103\uff65\001\002\000" +
    "\020\050\uff7d\056\217\064\224\065\220\066\222\067\215" +
    "\070\221\001\002\000\022\036\076\037\072\040\075\041" +
    "\073\042\077\043\074\045\210\103\213\001\002\000\004" +
    "\010\uffc4\001\002\000\004\010\u0106\001\002\000\040\003" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3\017\uffc3" +
    "\024\uffc3\026\uffc3\036\uffc3\037\uffc3\040\uffc3\103\uffc3\104" +
    "\uffc3\105\uffc3\001\002\000\004\046\uffc2\001\002\000\004" +
    "\046\u0109\001\002\000\004\022\u010a\001\002\000\004\007" +
    "\u010b\001\002\000\030\003\ufffc\005\011\010\ufffc\011\ufffc" +
    "\012\ufffc\015\ufffc\024\ufffc\026\ufffc\103\ufffc\104\ufffc\105" +
    "\ufffc\001\002\000\040\003\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\u010d\015\uffbf\017\uffbf\024\uffbf\026\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\103\uffbf\104\uffbf\105\uffbf\001\002\000\004" +
    "\007\u010f\001\002\000\040\003\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\015\uffc5\017\uffc5\024\uffc5\026\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\103\uffc5\104\uffc5\105\uffc5\001\002\000" +
    "\026\003\172\010\uffd1\011\156\012\173\015\153\024\200" +
    "\026\160\103\157\104\165\105\163\001\002\000\004\010" +
    "\u0111\001\002\000\040\003\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\015\uffc0\017\uffc0\024\uffc0\026\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\103\uffc0\104\uffc0\105\uffc0\001\002\000\026" +
    "\003\172\010\uffd1\011\156\012\173\015\153\024\200\026" +
    "\160\103\157\104\165\105\163\001\002\000\004\010\u0114" +
    "\001\002\000\040\003\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\015\uffc1\017\uffc1\024\uffc1\026\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\103\uffc1\104\uffc1\105\uffc1\001\002\000\004\002" +
    "\uffff\001\002\000\040\003\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\015\uffcf\017\uffcf\024\uffcf\026\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\103\uffcf\104\uffcf\105\uffcf\001\002\000\004" +
    "\016\uffae\001\002\000\006\003\u011a\016\u0119\001\002\000" +
    "\014\003\u011e\013\u0122\036\u0121\037\u011c\040\u011d\001\002" +
    "\000\014\003\uffac\013\uffac\036\uffac\037\uffac\040\uffac\001" +
    "\002\000\014\003\u011e\013\u0122\036\u0121\037\u011c\040\u011d" +
    "\001\002\000\004\047\uffa2\001\002\000\004\047\uffa1\001" +
    "\002\000\040\003\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\015\uffa8\017\uffa8\024\uffa8\026\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\103\uffa8\104\uffa8\105\uffa8\001\002\000\004\047\u0127" +
    "\001\002\000\040\003\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\015\uffab\017\uffab\024\uffab\026\uffab\036\uffab\037\uffab" +
    "\040\uffab\103\uffab\104\uffab\105\uffab\001\002\000\004\047" +
    "\uffa0\001\002\000\004\047\u0126\001\002\000\040\003\172" +
    "\010\uffd1\011\156\012\173\013\uffd1\015\153\017\uffd1\024" +
    "\200\026\160\036\uffd1\037\uffd1\040\uffd1\103\157\104\165" +
    "\105\163\001\002\000\040\003\u011e\010\uffaa\011\uffaa\012" +
    "\uffaa\013\u0122\015\uffaa\017\uffaa\024\uffaa\026\uffaa\036\u0121" +
    "\037\u011c\040\u011d\103\uffaa\104\uffaa\105\uffaa\001\002\000" +
    "\040\003\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\015\uffa9" +
    "\017\uffa9\024\uffa9\026\uffa9\036\uffa9\037\uffa9\040\uffa9\103" +
    "\uffa9\104\uffa9\105\uffa9\001\002\000\040\003\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\015\uffa3\017\uffa3\024\uffa3\026" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\103\uffa3\104\uffa3\105\uffa3" +
    "\001\002\000\040\003\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\015\uffa4\017\uffa4\024\uffa4\026\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\103\uffa4\104\uffa4\105\uffa4\001\002\000\040\003" +
    "\172\010\uffd1\011\156\012\173\013\uffd1\015\153\017\uffd1" +
    "\024\200\026\160\036\uffd1\037\uffd1\040\uffd1\103\157\104" +
    "\165\105\163\001\002\000\040\003\u011e\010\uffa5\011\uffa5" +
    "\012\uffa5\013\u0122\015\uffa5\017\uffa5\024\uffa5\026\uffa5\036" +
    "\u0121\037\u011c\040\u011d\103\uffa5\104\uffa5\105\uffa5\001\002" +
    "\000\040\003\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\015" +
    "\uffa6\017\uffa6\024\uffa6\026\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\103\uffa6\104\uffa6\105\uffa6\001\002\000\040\003\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\017\uffa7\024\uffa7" +
    "\026\uffa7\036\uffa7\037\uffa7\040\uffa7\103\uffa7\104\uffa7\105" +
    "\uffa7\001\002\000\040\003\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\015\uffaf\017\uffaf\024\uffaf\026\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\103\uffaf\104\uffaf\105\uffaf\001\002\000\004" +
    "\016\u012e\001\002\000\014\003\u011e\013\u0122\036\u0121\037" +
    "\u011c\040\u011d\001\002\000\040\003\uffad\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\015\uffad\017\uffad\024\uffad\026\uffad\036" +
    "\uffad\037\uffad\040\uffad\103\uffad\104\uffad\105\uffad\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\011\004\006\005\007\001\001" +
    "\000\002\001\001\000\004\006\057\001\001\000\006\007" +
    "\014\012\015\001\001\000\002\001\001\000\004\102\055" +
    "\001\001\000\004\103\017\001\001\000\002\001\001\000" +
    "\006\007\016\012\015\001\001\000\002\001\001\000\004" +
    "\010\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\071\025\072\023\073\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\071\043\072\023\073" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\071\047\072\023\073\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\053\001\001\000\004\010\054\001\001\000\002\001" +
    "\001\000\006\007\056\012\015\001\001\000\002\001\001" +
    "\000\012\014\104\015\112\016\110\017\105\001\001\000" +
    "\006\011\064\013\063\001\001\000\004\110\101\001\001" +
    "\000\004\106\066\001\001\000\006\011\065\013\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\070\001\001\000\004\107\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\112\117\001\001\000\004\111\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\113\015" +
    "\112\016\110\017\105\001\001\000\002\001\001\000\012" +
    "\014\115\015\112\016\110\017\105\001\001\000\002\001" +
    "\001\000\004\115\147\001\001\000\002\001\001\000\004" +
    "\113\121\001\001\000\002\001\001\000\014\021\125\022" +
    "\124\071\123\072\023\073\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\071\130\072\023\073\035\001\001\000\004\114\131" +
    "\001\001\000\006\005\134\020\132\001\001\000\002\001" +
    "\001\000\004\116\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\143\001\001\000\004" +
    "\023\145\001\001\000\012\022\146\071\123\072\023\073" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\134\020\150\001\001\000\002\001\001\000\034\027" +
    "\173\030\163\031\176\032\175\037\161\040\174\046\167" +
    "\050\170\075\154\076\160\077\153\100\166\101\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\376\135\236\001\001\000" +
    "\002\001\001\000\034\027\173\030\163\031\176\032\175" +
    "\037\161\040\174\046\167\050\170\075\357\076\160\077" +
    "\153\100\166\101\165\001\001\000\002\001\001\000\004" +
    "\041\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\027\173\030\163\031" +
    "\176\032\175\037\161\040\174\046\167\050\170\075\261" +
    "\076\160\077\153\100\166\101\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\257\001\001\000\002\001" +
    "\001\000\020\052\213\053\203\054\204\055\205\056\211" +
    "\074\206\101\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\052\255" +
    "\053\203\054\204\055\205\056\211\074\206\101\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\063\233" +
    "\135\236\001\001\000\004\060\215\001\001\000\002\001" +
    "\001\000\020\052\232\053\203\054\204\055\205\056\211" +
    "\074\206\101\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\052\224" +
    "\053\203\054\204\055\205\056\211\074\206\101\210\001" +
    "\001\000\002\001\001\000\004\060\215\001\001\000\004" +
    "\047\227\001\001\000\034\027\173\030\163\031\176\032" +
    "\175\037\161\040\174\046\167\050\170\075\230\076\160" +
    "\077\153\100\166\101\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\241\025\242\026\240\074\243" +
    "\001\001\000\002\001\001\000\012\024\241\025\242\026" +
    "\253\074\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\136\251\001\001\000\002\001\001\000\006\024" +
    "\247\074\243\001\001\000\004\025\250\001\001\000\002" +
    "\001\001\000\004\025\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\314\001\001\000\002\001\001" +
    "\000\022\052\270\053\203\054\204\055\205\056\211\057" +
    "\307\074\206\101\210\001\001\000\004\124\266\001\001" +
    "\000\022\052\270\053\203\054\204\055\205\056\211\057" +
    "\267\074\206\101\210\001\001\000\002\001\001\000\006" +
    "\060\215\062\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\052\305\053\203\054\204\055\205\056\211\074\206" +
    "\101\210\001\001\000\020\052\304\053\203\054\204\055" +
    "\205\056\211\074\206\101\210\001\001\000\002\001\001" +
    "\000\004\060\215\001\001\000\004\060\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\125\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\042\336\052\326" +
    "\053\203\054\204\055\205\056\211\070\322\074\206\101" +
    "\210\001\001\000\004\133\320\001\001\000\026\042\324" +
    "\052\326\053\203\054\204\055\205\056\211\066\321\070" +
    "\322\074\206\101\210\001\001\000\002\001\001\000\004" +
    "\067\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\215\001\001\000\002\001\001" +
    "\000\004\134\334\001\001\000\024\042\333\052\326\053" +
    "\203\054\204\055\205\056\211\070\322\074\206\101\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\042" +
    "\335\052\326\053\203\054\204\055\205\056\211\070\322" +
    "\074\206\101\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\131\343" +
    "\001\001\000\002\001\001\000\004\065\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\132\355\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\052\270\053\203\054\204\055\205\056\211\057\364" +
    "\074\206\101\210\001\001\000\004\122\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\370\001\001\000\034\027\173\030" +
    "\163\031\176\032\175\037\161\040\174\046\167\050\170" +
    "\075\371\076\160\077\153\100\166\101\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\052" +
    "\u0101\053\203\054\204\055\205\056\211\074\206\101\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\215\001\001\000\024\045\u0107\052\270\053\203\054\204" +
    "\055\205\056\211\057\u0106\074\206\101\210\001\001\000" +
    "\004\120\u0104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u010b\001\001\000\004\005\u0111\001\001\000\004" +
    "\044\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\027\173\030\163\031\176\032\175\037\161\040\174" +
    "\046\167\050\170\075\u010f\076\160\077\153\100\166\101" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\027\173\030\163\031\176\032\175\037\161\040\174\046" +
    "\167\050\170\075\u0112\076\160\077\153\100\166\101\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\126\u012c\001\001\000\002" +
    "\001\001\000\010\033\u0122\034\u012b\035\u011e\001\001\000" +
    "\004\127\u011a\001\001\000\010\033\u0122\034\u011f\035\u011e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\130" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\027\173\030\163\031" +
    "\176\032\175\037\161\040\174\046\167\050\170\075\u0123" +
    "\076\160\077\153\100\166\101\165\001\001\000\010\033" +
    "\u0122\034\u0124\035\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\027\173\030\163\031" +
    "\176\032\175\037\161\040\174\046\167\050\170\075\u0128" +
    "\076\160\077\153\100\166\101\165\001\001\000\012\033" +
    "\u0122\034\u0129\035\u011e\064\u012a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\u0122\034\u012e\035\u011e\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String errorActual = "";
    public boolean estaProcesandoFuncsProcs = false;
    PilaSemantica<Simbolo> pila_semantica = new PilaSemantica();
    TablaSimbolos tabla_simbolos = new TablaSimbolos();
    PilaSemantica<Simbolo> pila_temp = new PilaSemantica();
    
    public void reportarErrorSemantico(String msg) 
    {
        System.err.println("Semantic error: " + msg);
        System.out.println();
    }
    
    public void report_fatal_error(String message, Object info)
    {
        System.err.println("Error fatal. Imposible recuperarse.\n");
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) {}
	
    public void syntax_error(Symbol st)
    {
        report_error("Algo: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right , null);
        if (cur_token.value != null)
        {
            if (cur_token.sym == sym.error)
            {
                errorActual += "Lexer Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right + " -------- ";
                //report_error(errorActual, null);
            }
            else
            {
                errorActual += "Syntax Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right + " -------- ";
                //report_error(errorActual,null);
    
            }
        }
        //errorActual = "";
    }


    public void errorMensaje(String msg)
    {
        errorActual += msg;
        report_error(errorActual, null);   
        errorActual = "";
    }

    public void guardarVar_TS()
    {
        String tipo = (String) pila_semantica.pop().value; 
        while(pila_semantica.peek().sym == roles.VARIABLE || !pila_semantica.isEmpty())
        {
            Variable_Simbolo var = (Variable_Simbolo) pila_semantica.pop(); 
            if(!this.estaProcesandoFuncsProcs)
            {
                var.setEsGlobal(true);
                var.setTipo(tipo);
                boolean res = this.tabla_simbolos.insertarSimbolo((String) var.value, var);

                if (res == false)
                {
                    reportarErrorSemantico("Variable " + (String) var.value+ " ya declarada");
                }
            }
            if (pila_semantica.size()==0) break;  
        }
    }

    public void guardarConst_TS()
    {
        Object valor = pila_semantica.pop().value;
        while(pila_semantica.peek().sym == roles.CONSTANTE || !pila_semantica.isEmpty())
        {
            if (!this.estaProcesandoFuncsProcs)
            {
                Variable_Simbolo var = (Variable_Simbolo) pila_semantica.pop(); 
                var.setEsGlobal(true);
                var.setValor(valor);
                boolean inserto = this.tabla_simbolos.insertarSimbolo((String) var.value, var);
                
                if (!inserto)
                {
                    reportarErrorSemantico("Constante " + (String) var.value+ " ya declarada");
                }
            }
            if (pila_semantica.size() == 0) break;
        }
    }

    public void guardarFuncion_TS()
    {
        int contParametros = 0;
        Object valorRetorno = pila_semantica.pop().value;
        int index = pila_semantica.buscar(logica.semantico.registros.Funcion_Simbolo.class);
        String nombreFuncion = pila_semantica.get(index).getNombre();
        while(pila_semantica.peek().sym == roles.PARAMETRO)
        {
            Simbolo_Parametro param = (Simbolo_Parametro)pila_semantica.pop();
            param.setFuncion(nombreFuncion);
            contParametros ++;
            param.setPosParametro(contParametros);
            tabla_simbolos.insertarSimbolo(param.getNombre() + "#" + contParametros, param);
            
        }
        Funcion_Simbolo funcion = (Funcion_Simbolo) pila_semantica.pop();
        funcion.setCant_Parametros(contParametros);
        funcion.setValorRetorno((String) valorRetorno);
        
        boolean seInsertó = tabla_simbolos.insertarSimbolo(nombreFuncion, funcion);
        
        if (!seInsertó)
        {
            reportarErrorSemantico("Función "+nombreFuncion+" ya declarada "+
                    "línea " + funcion.left + " columna " + funcion.right );
        }  
    }
    
    // MÉTODOS DE RECORDAR -----------------------------------------------------
    public void recordarID(int left, int right, Object token)
    {
        pila_semantica.push(new Variable_Simbolo(roles.VARIABLE,left, right,token));
    }
    public void recordarTipo(int left, int right, Object tokenTipo)
    {
        pila_semantica.push(new Generico_Simbolo(roles.TIPO,left, right, tokenTipo));
    }
    public void recordarID_Constante(int left, int right, Object token)
    {
        pila_semantica.push(new Variable_Simbolo(roles.CONSTANTE,left, right,token)); // el token es el id encontrado
    }
    public void recordarLiteral(int left, int right, Object tokenLiteral)
    {
        pila_semantica.push(new Generico_Simbolo(roles.LITERAL,left, right,tokenLiteral)); // el token es el id encontrado
    }
    public void recordarNombreFuncion(int left, int right, Object tokenNombre)
    {
        Funcion_Simbolo funcion = new Funcion_Simbolo(roles.FUNCION,left, right, null);
        funcion.setNombre((String)tokenNombre);
        pila_semantica.push(funcion);
    }
    public void recordarParametro(Object tokenTipo, int idLeft, int idRight, Object idToken)
    {
        Simbolo_Parametro para = new Simbolo_Parametro(roles.PARAMETRO, idLeft,idRight,null);
        para.setNombre((String)idToken);
        para.setTipo((String) tokenTipo);
        pila_semantica.push(para);
    }
    public void verificarInvocacion()
    {
        Funcion_Simbolo func = (Funcion_Simbolo)this.pila_semantica.pop();
        Funcion_Simbolo f =(Funcion_Simbolo) this.tabla_simbolos.buscar(func.getNombre());
        
        if (f != null)
        {
            if (f.getCant_Parametros() == this.pila_temp.size())
            {
                
            }
            else
            {
                this.reportarErrorSemantico("La función " + func.getNombre() + "(fila: " + func.left + " , columna: " + func.right + ") no recibe esata cantidad de parámetros");
            }
        }
        else
        {
            this.reportarErrorSemantico("La función " + func.getNombre() + "(fila: " + func.left + " , columna: " + func.right + ") no está definida");
        } 
        this.pila_temp.clear();
    }
    // MÉTODOS DE RECORDAR - TEMPORALMENTE -------------------------------------
    public void recordarConstanteLlamada(int left, int right, Object token)
    {
        this.pila_temp.push(new Generico_Simbolo(roles.LITERAL,left, right, token));
    }
    public void recordarParametroIDLlamada(int left, int right, Object token)
    {
        Generico_Simbolo s = new Generico_Simbolo(roles.PARAMETRO, left, right, null);
        s.setNombre((String) token);
        this.pila_temp.push(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // LITERAL ::= _caracter 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // LITERAL ::= _flotante 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Float.parseFloat((String)fl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // LITERAL ::= _false 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Boolean.parseBoolean((String)f);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // LITERAL ::= _true 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =  Boolean.parseBoolean((String)t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // LITERAL ::= _hilera 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = h;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // LITERAL ::= _entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Integer.parseInt((String)e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPO_SIMPLE ::= _real 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPO_SIMPLE ::= _shortint 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPO_SIMPLE ::= _longint 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPO_SIMPLE ::= _char 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPO_SIMPLE ::= _boolean 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TIPO_SIMPLE ::= _int 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPO_SIMPLE ::= _string 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TIPO_COMPUESTO ::= _array _bra_aper _entero _bra_cerr _of TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_COMPUESTO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TIPO_COMPUESTO ::= _array _bra_aper _entero _rango_dos_puntos _entero _bra_cerr _of TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_COMPUESTO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TIPO_DATO ::= TIPO_SIMPLE 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ts;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TIPO_DATO ::= TIPO_COMPUESTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OPERADOR_UNARIO ::= _op_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OPERADOR_UNARIO ::= _op_inc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OPERADOR_BOOLEAN ::= _NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OPERADOR_BOOLEAN ::= _AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OPERADOR_BOOLEAN ::= _OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OPERADOR_BOOLEAN ::= _distinto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OPERADOR_BOOLEAN ::= _mayor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OPERADOR_BOOLEAN ::= _mayor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OPERADOR_BOOLEAN ::= _igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OPERADOR_BOOLEAN ::= _menor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPERADOR_BOOLEAN ::= _menor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPERADOR_ARITMETICO_ASIGN ::= _asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPERADOR_ARITMETICO_ASIGN ::= _op_mult_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPERADOR_ARITMETICO_ASIGN ::= _op_div_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPERADOR_ARITMETICO_ASIGN ::= _op_menos_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPERADOR_ARITMETICO_ASIGN ::= _op_mas_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPERADOR_ARITMETICO ::= _op_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPERADOR_ARITMETICO ::= _op_mod 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPERADOR_ARITMETICO ::= _op_division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERADOR_ARITMETICO ::= _op_multi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERADOR_ARITMETICO ::= _op_resta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERADOR_ARITMETICO ::= _op_suma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION_CONDICION ::= EXPRESION error EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_CONDICION",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION_CONDICION ::= EXPRESION OPERADOR_BOOLEAN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_CONDICION",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION_BASE ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION_BASE ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION_UNARIA ::= _id OPERADOR_UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION_BINARIA ::= EXPRESION OPERADOR_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BINARIA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION_COMPUESTA ::= _parentesisAbre EXPRESION _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_COMPUESTA",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= INVOCACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= EXPRESION_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= EXPRESION_BINARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= EXPRESION_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNACION ::= error 
            {
              Object RESULT =null;
		parser.errorMensaje("Error en la declaración ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNACION ::= _id OPERADOR_ARITMETICO_ASIGN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PARAMETRO_INVOCACION_CON ::= error NT$28 PARAMETRO_INVOCACION_CON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_INVOCACION_CON",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$28 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Mala invocación de la función");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PARAMETRO_INVOCACION_CON ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_INVOCACION_CON",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARAMETRO_INVOCACION_CON ::= _coma PARAMETRO_INVOCACION PARAMETRO_INVOCACION_CON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_INVOCACION_CON",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAMETRO_INVOCACION ::= LITERAL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.recordarConstanteLlamada(lleft, lright, l);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_INVOCACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAMETRO_INVOCACION ::= _id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.recordarParametroIDLlamada(ileft,iright,i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO_INVOCACION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LISTA_PARAMETROS ::= PARAMETRO_INVOCACION_CON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LISTA_PARAMETROS ::= PARAMETRO_INVOCACION LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INVOCACION_FUNCION ::= _id NT$27 _parentesisAbre LISTA_PARAMETROS _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
                                            this.parser.verificarInvocacion();

                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INVOCACION_FUNCION",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$27 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.recordarNombreFuncion(idleft, idright, id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO_WRITE ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.errorMensaje("Error en sentencia WRITE, parametro no valido");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTENIDO_WRITE ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAMETROS_WRITE_Aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE_Aux",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAMETROS_WRITE_Aux ::= error NT$26 PARAMETROS_WRITE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE_Aux",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$26 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia WRITE, falta ',' ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMETROS_WRITE_Aux ::= _coma PARAMETROS_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE_Aux",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMETROS_WRITE ::= CONTENIDO_WRITE PARAMETROS_WRITE_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNCION_WRITE_Err ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE_Err",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCION_WRITE_Err ::= _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE_Err",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCION_WRITE_Err ::= PARAMETROS_WRITE _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE_Err",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNCION_WRITE ::= _write error NT$25 FUNCION_WRITE_Err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$25 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia WRITE, falto abrir parentesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCION_WRITE ::= _write _parentesisAbre PARAMETROS_WRITE _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCION_READ_AUX_Err ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX_Err",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCION_READ_AUX_Err ::= _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX_Err",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCION_READ_AUX_Err ::= _id _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX_Err",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCION_READ_AUX ::= _parentesisAbre _id error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.errorMensaje("Error en sentencia READ, falta cerrar patentesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCION_READ_AUX ::= _parentesisAbre error NT$24 FUNCION_READ_AUX_Err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$24 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia READ, Problemas con los parametros de la instruccion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCION_READ_AUX ::= error NT$23 FUNCION_READ_AUX_Err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$23 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia READ, falto abrir parentesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCION_READ_AUX ::= _parentesisAbre _id _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCION_READ_AUX ::= _parentesisAbre _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCION_READ ::= _read FUNCION_READ_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONSTANTE_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONSTANTE_CASE ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONSTANTE_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CASE ::= _else _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CASE ::= CONSTANTE_CASE _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASES_err ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_err",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASES_err ::= CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_err",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASES ::= error NT$22 CUERPO_INSTRUCCIONES CASES_err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$22 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en opcion de sentencia CASE, CONSTANTE invalida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASES ::= CASE CUERPO_INSTRUCCIONES CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASES ::= CASE CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_CASE ::= _case _id error NT$21 CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$21 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia CASE, se espera la Palabra Reservada OF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_CASE ::= _case error NT$20 _of CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$20 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia CASE, IDENTIFICADOR invalido");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_CASE ::= _case _id _of CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until _parentesisAbre error NT$19 _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$19 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia REPEAT, Expresion Condicional NO Valida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until error NT$18 EXPRESION_CONDICION _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$18 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia REPEAT, Falta '(' en la Expresion Condicional");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES error NT$17 _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$17 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia REPEAT, Falta Palabra Reservada UNTIL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until _parentesisAbre EXPRESION_CONDICION _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE_WHILE ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INICIO_WHILE ::= _while error NT$16 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$16 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Existe un error dentro del WHILE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INICIO_WHILE ::= _while _parentesisAbre EXPRESION_CONDICION _parentesisCierra _do BLOQUE_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE_FOR ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INICIO_FOR ::= _for error NT$15 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_FOR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$15 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Existe un error dentro del FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INICIO_FOR ::= _for _id _asignacion EXPRESION _to EXPRESION _do BLOQUE_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_FOR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUE_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE_ELSE ::= _else _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE_IF ::= _begin BLOQUE_DECLARACION_VARIABLES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION ::= EXPRESION_CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_IF ::= _if error NT$14 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$14 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Existe un error dentro del IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_IF ::= _if _parentesisAbre CONDICION _parentesisCierra _then BLOQUE_IF BLOQUE_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ESTRUCTURA_CONTROL ::= INICIO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ESTRUCTURA_CONTROL ::= INICIO_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ESTRUCTURA_CONTROL ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ESTRUCTURA_CONTROL ::= SENTENCIA_REPEAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ESTRUCTURA_CONTROL ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCION ::= FUNCION_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCION ::= FUNCION_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCION ::= INVOCACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= INSTRUCCION _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPO_INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPO_INSTRUCCIONES ::= SENTENCIA CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMETROS_Aux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETROS_Aux2 ::= _coma PARAMETROS_Aux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETROS_Aux1 ::= TIPO_DATO _id NT$13 PARAMETROS_Aux2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipoParametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipoParametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tipoParametro = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idParametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idParametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idParametro = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$13 ::= 
            {
              Object RESULT =null;
		int tipoParametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipoParametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipoParametro = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idParametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idParametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idParametro = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                        parser.recordarParametro(tipoParametro, tipoParametroleft, tipoParametroright, idParametro);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROS ::= PARAMETROS_Aux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_PROCEDIMIENTO ::= _procedure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_PROCEDIMIENTO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESTRUCTURA_FUNCION ::= error NT$12 _begin _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$12 ::= 
            {
              Object RESULT =null;
System.out.println("Error");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ESTRUCTURA_FUNCION ::= BLOQUE_DECLARACION_VARIABLES _begin _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_FUNCION ::= _function error NT$11 ESTRUCTURA_FUNCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$11 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Mala declaración de la función"); parser.pila_semantica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_FUNCION ::= _function NT$8 _id NT$9 _parentesisAbre PARAMETROS _parentesisCierra _dos_puntos TIPO_DATO NT$10 ESTRUCTURA_FUNCION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                        parser.recordarTipo(tleft, tright, t);
                                        parser.guardarFuncion_TS(); 
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                        parser.recordarNombreFuncion(fleft, fright, f);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$8 ::= 
            {
              Object RESULT =null;

                                        parser.estaProcesandoFuncsProcs = true;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACIONES_FUNC_PROC ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACIONES_FUNC_PROC ::= error NT$7 DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Algo donde no debería estar");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACIONES_FUNC_PROC ::= FUNCION_O_PROCEDIMIENTO DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONSTANTE ::= error NT$6 LITERAL _punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Error en la declaración de la constante");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONSTANTE ::= _id NT$4 _igual LITERAL NT$5 _punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                            parser.recordarLiteral(lleft, lright, l);
                                            parser.guardarConst_TS();
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                            parser.recordarID_Constante(ileft, iright, i);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_CONSTANTE ::= CONSTANTE DECLARACION_CONSTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_CONSTANTE ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE_DECLARACION_CONSTANTES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE_DECLARACION_CONSTANTES ::= _const DECLARACION_CONSTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DCL_VAR_CONSECUTIVA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DCL_VAR_CONSECUTIVA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DCL_VAR_CONSECUTIVA ::= _coma _id NT$3 DCL_VAR_CONSECUTIVA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DCL_VAR_CONSECUTIVA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                            parser.recordarID(ileft, iright, i);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE ::= _id NT$1 DCL_VAR_CONSECUTIVA _dos_puntos TIPO_DATO NT$2 _punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                            parser.recordarTipo(tleft, tright, t);
                                            parser.guardarVar_TS();
                                            
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                                           parser.recordarID(ileft, iright, i);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_VARIABLE ::= error NT$0 DECLARACION_VARIABLE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Error en la declaración de la variable :(");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_VARIABLE ::= VARIABLE DECLARACION_VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_VARIABLE ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_DECLARACION_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_DECLARACION_VARIABLES ::= _var DECLARACION_VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_PROGRAMA ::= DECLARACIONES _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO_PROGRAMA ::= _program _id BLOQUE_PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("Terminó " + parser.tabla_simbolos);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

