
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 12 11:18:00 CST 2016
//----------------------------------------------------

package logica.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 12 11:18:00 CST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\004\005\000\002\005\004\000\002\005\002" +
    "\000\002\007\003\000\002\007\004\000\002\030\007\000" +
    "\002\011\005\000\002\011\002\000\002\006\004\000\002" +
    "\006\002\000\002\010\003\000\002\010\004\000\002\031" +
    "\006\000\002\044\003\000\002\044\003\000\002\012\004" +
    "\000\002\012\002\000\002\013\003\000\002\013\003\000" +
    "\002\014\012\000\002\015\010\000\002\016\007\000\002" +
    "\017\007\000\002\020\003\000\002\020\002\000\002\021" +
    "\005\000\002\022\004\000\002\022\002\000\002\023\004" +
    "\000\002\023\002\000\002\024\003\000\002\024\004\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\011\000\002\054\003" +
    "\000\002\052\005\000\002\053\006\000\002\053\002\000" +
    "\002\055\012\000\002\056\005\000\002\057\006\000\002" +
    "\060\005\000\002\037\006\000\002\040\006\000\002\042" +
    "\004\000\002\042\005\000\002\041\004\000\002\041\004" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\046\004\000\002\047\004\000\002\047\005\000\002" +
    "\045\006\000\002\050\003\000\002\050\005\000\002\051" +
    "\003\000\002\051\003\000\002\026\005\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\063\005\000" +
    "\002\064\005\000\002\065\003\000\002\065\003\000\002" +
    "\066\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\012\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\004\005\001\002\000\004\002\305\001" +
    "\002\000\014\005\010\007\ufffc\014\ufffc\020\ufffc\021\ufffc" +
    "\001\002\000\004\007\302\001\002\000\012\007\ufff5\014" +
    "\047\020\ufff5\021\ufff5\001\002\000\004\071\012\001\002" +
    "\000\004\002\000\001\002\000\006\047\ufff7\051\017\001" +
    "\002\000\034\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd" +
    "\015\ufffd\020\ufffd\021\ufffd\024\ufffd\026\ufffd\071\ufffd\072" +
    "\ufffd\073\ufffd\001\002\000\034\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\014\ufffb\015\ufffb\020\ufffb\021\ufffb\024\ufffb\026" +
    "\ufffb\071\012\072\ufffb\073\ufffb\001\002\000\034\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\020\ufffa\021" +
    "\ufffa\024\ufffa\026\ufffa\071\ufffa\072\ufffa\073\ufffa\001\002" +
    "\000\004\047\022\001\002\000\004\071\020\001\002\000" +
    "\006\047\ufff7\051\017\001\002\000\004\047\ufff8\001\002" +
    "\000\022\006\034\027\031\030\030\031\027\032\024\033" +
    "\032\034\033\035\026\001\002\000\010\007\uffa8\050\uffa8" +
    "\071\uffa8\001\002\000\010\007\uffa0\050\uffa0\071\uffa0\001" +
    "\002\000\004\050\045\001\002\000\010\007\uff9f\050\uff9f" +
    "\071\uff9f\001\002\000\010\007\uffa1\050\uffa1\071\uffa1\001" +
    "\002\000\010\007\uffa4\050\uffa4\071\uffa4\001\002\000\004" +
    "\052\036\001\002\000\010\007\uffa2\050\uffa2\071\uffa2\001" +
    "\002\000\010\007\uffa3\050\uffa3\071\uffa3\001\002\000\010" +
    "\007\uffa5\050\uffa5\071\uffa5\001\002\000\010\007\uffa7\050" +
    "\uffa7\071\uffa7\001\002\000\004\036\037\001\002\000\004" +
    "\055\040\001\002\000\004\036\041\001\002\000\004\053" +
    "\042\001\002\000\004\016\043\001\002\000\022\006\034" +
    "\027\031\030\030\031\027\032\024\033\032\034\033\035" +
    "\026\001\002\000\010\007\uffa6\050\uffa6\071\uffa6\001\002" +
    "\000\034\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\020\ufff9\021\ufff9\024\ufff9\026\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\001\002\000\010\007\uffee\020\062\021\065\001" +
    "\002\000\004\071\050\001\002\000\004\044\054\001\002" +
    "\000\032\007\ufff4\010\ufff4\011\ufff4\012\ufff4\015\ufff4\020" +
    "\ufff4\021\ufff4\024\ufff4\026\ufff4\071\050\072\ufff4\073\ufff4" +
    "\001\002\000\032\007\ufff6\010\ufff6\011\ufff6\012\ufff6\015" +
    "\ufff6\020\ufff6\021\ufff6\024\ufff6\026\ufff6\071\ufff6\072\ufff6" +
    "\073\ufff6\001\002\000\032\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\015\ufff3\020\ufff3\021\ufff3\024\ufff3\026\ufff3\071\ufff3" +
    "\072\ufff3\073\ufff3\001\002\000\006\036\057\037\055\001" +
    "\002\000\004\050\ufff0\001\002\000\004\050\060\001\002" +
    "\000\004\050\ufff1\001\002\000\032\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\015\ufff2\020\ufff2\021\ufff2\024\ufff2\026\ufff2" +
    "\071\ufff2\072\ufff2\073\ufff2\001\002\000\004\007\ufffe\001" +
    "\002\000\004\071\266\001\002\000\010\007\uffec\020\uffec" +
    "\021\uffec\001\002\000\010\007\uffed\020\uffed\021\uffed\001" +
    "\002\000\004\071\070\001\002\000\010\007\uffee\020\062" +
    "\021\065\001\002\000\004\007\uffef\001\002\000\004\045" +
    "\071\001\002\000\024\006\034\027\031\030\030\031\027" +
    "\032\024\033\032\034\033\035\026\046\uffe6\001\002\000" +
    "\004\046\uffe7\001\002\000\004\071\262\001\002\000\004" +
    "\046\075\001\002\000\004\007\076\001\002\000\030\005" +
    "\010\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\024\ufffc" +
    "\026\ufffc\071\ufffc\072\ufffc\073\ufffc\001\002\000\010\007" +
    "\uffea\020\uffea\021\uffea\001\002\000\026\010\ufff5\011\ufff5" +
    "\012\ufff5\014\047\015\ufff5\024\ufff5\026\ufff5\071\ufff5\072" +
    "\ufff5\073\ufff5\001\002\000\024\010\uffe1\011\104\012\120" +
    "\015\102\024\125\026\107\071\106\072\114\073\112\001" +
    "\002\000\004\071\245\001\002\000\004\050\244\001\002" +
    "\000\004\045\226\001\002\000\004\010\225\001\002\000" +
    "\014\057\217\060\222\061\216\062\220\063\223\001\002" +
    "\000\004\071\210\001\002\000\036\010\uffe1\011\104\012" +
    "\120\013\uffe1\015\102\017\uffe1\024\125\026\107\036\uffe1" +
    "\037\uffe1\040\uffe1\071\106\072\114\073\112\001\002\000" +
    "\004\050\uffdd\001\002\000\004\045\202\001\002\000\036" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\017\uffdb\024" +
    "\uffdb\026\uffdb\036\uffdb\037\uffdb\040\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\001\002\000\004\045\172\001\002\000\004\050" +
    "\uffdc\001\002\000\036\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\015\uffd8\017\uffd8\024\uffd8\026\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\071\uffd8\072\uffd8\073\uffd8\001\002\000\036\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\015\uffd7\017\uffd7\024\uffd7\026" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\071\uffd7\072\uffd7\073\uffd7" +
    "\001\002\000\024\011\104\012\120\015\102\017\uffe1\024" +
    "\125\026\107\071\106\072\114\073\112\001\002\000\036" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\017\uffe0\024" +
    "\uffe0\026\uffe0\036\uffe0\037\uffe0\040\uffe0\071\uffe0\072\uffe0" +
    "\073\uffe0\001\002\000\004\050\uffde\001\002\000\036\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\017\uffd9\024\uffd9" +
    "\026\uffd9\036\uffd9\037\uffd9\040\uffd9\071\uffd9\072\uffd9\073" +
    "\uffd9\001\002\000\036\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\015\uffda\017\uffda\024\uffda\026\uffda\036\uffda\037\uffda\040" +
    "\uffda\071\uffda\072\uffda\073\uffda\001\002\000\004\071\126" +
    "\001\002\000\004\063\127\001\002\000\004\071\130\001" +
    "\002\000\004\023\131\001\002\000\004\071\132\001\002" +
    "\000\004\025\133\001\002\000\004\007\134\001\002\000" +
    "\024\010\uffe1\011\104\012\120\015\102\024\125\026\107" +
    "\071\106\072\114\073\112\001\002\000\036\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\015\uffd1\017\uffd1\024\uffd1\026\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\071\uffd1\072\uffd1\073\uffd1\001" +
    "\002\000\004\010\137\001\002\000\036\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\015\uffd0\017\uffd0\024\uffd0\026\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\071\uffd0\072\uffd0\073\uffd0\001\002" +
    "\000\004\017\141\001\002\000\022\036\144\037\150\040" +
    "\156\041\143\042\146\043\142\045\151\071\155\001\002" +
    "\000\056\010\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b\017" +
    "\uff9b\024\uff9b\026\uff9b\036\uff9b\037\uff9b\040\uff9b\046\uff9b" +
    "\050\uff9b\056\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070" +
    "\uff9b\071\uff9b\072\uff9b\073\uff9b\001\002\000\056\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\015\uff9a\017\uff9a\024\uff9a\026" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\046\uff9a\050\uff9a\056\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\001\002\000\056\010\uff9e\011\uff9e\012\uff9e" +
    "\013\uff9e\015\uff9e\017\uff9e\024\uff9e\026\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\046\uff9e\050\uff9e\056\uff9e\064\uff9e\065\uff9e" +
    "\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\001" +
    "\002\000\056\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9" +
    "\017\uffb9\024\uffb9\026\uffb9\036\uffb9\037\uffb9\040\uffb9\046" +
    "\uffb9\050\uffb9\056\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\073\uffb9\001\002\000\056\010" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\015\uff9c\017\uff9c\024\uff9c" +
    "\026\uff9c\036\uff9c\037\uff9c\040\uff9c\046\uff9c\050\uff9c\056" +
    "\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c" +
    "\072\uff9c\073\uff9c\001\002\000\056\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\015\uffba\017\uffba\024\uffba\026\uffba\036\uffba" +
    "\037\uffba\040\uffba\046\uffba\050\uffba\056\uffba\064\uffba\065" +
    "\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba" +
    "\001\002\000\056\010\uff9d\011\uff9d\012\uff9d\013\uff9d\015" +
    "\uff9d\017\uff9d\024\uff9d\026\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\046\uff9d\050\uff9d\056\uff9d\064\uff9d\065\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\001\002\000\022" +
    "\036\144\037\150\040\156\041\143\042\146\043\142\045" +
    "\151\071\155\001\002\000\056\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\015\uffb5\017\uffb5\024\uffb5\026\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\046\uffb5\050\uffb5\056\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\001" +
    "\002\000\036\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd" +
    "\017\uffcd\024\uffcd\026\uffcd\036\uffcd\037\uffcd\040\uffcd\071" +
    "\uffcd\072\uffcd\073\uffcd\001\002\000\056\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\015\uffbb\017\uffbb\024\uffbb\026\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\046\uffbb\050\uffbb\056\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073" +
    "\uffbb\001\002\000\056\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\015\uffb6\017\uffb6\024\uffb6\026\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\046\uffb6\050\uffb6\056\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\001\002\000" +
    "\056\010\uff99\011\uff99\012\uff99\013\uff99\015\uff99\017\uff99" +
    "\024\uff99\026\uff99\036\uff99\037\uff99\040\uff99\046\uff99\050" +
    "\uff99\056\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99" +
    "\071\uff99\072\uff99\073\uff99\001\002\000\052\010\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\015\uffb4\017\uffb4\024\uffb4\026\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\056\162\064\166\065\163\066" +
    "\165\067\160\070\164\071\uffb4\072\uffb4\073\uffb4\001\002" +
    "\000\022\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\045\uffaf\071\uffaf\001\002\000\022\036\144\037\150" +
    "\040\156\041\143\042\146\043\142\045\151\071\155\001" +
    "\002\000\022\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\045\uffb3\071\uffb3\001\002\000\022\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\045\uffb1\071\uffb1" +
    "\001\002\000\022\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\045\uffae\071\uffae\001\002\000\022\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\045\uffb0\071" +
    "\uffb0\001\002\000\022\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\045\uffb2\071\uffb2\001\002\000\056\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\017\uffb7\024\uffb7" +
    "\026\uffb7\036\uffb7\037\uffb7\040\uffb7\046\uffb7\050\uffb7\056" +
    "\162\064\166\065\163\066\165\067\160\070\164\071\uffb7" +
    "\072\uffb7\073\uffb7\001\002\000\020\046\171\056\162\064" +
    "\166\065\163\066\165\067\160\070\164\001\002\000\056" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8\017\uffb8\024" +
    "\uffb8\026\uffb8\036\uffb8\037\uffb8\040\uffb8\046\uffb8\050\uffb8" +
    "\056\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\001\002\000\006\037\173\071\174" +
    "\001\002\000\006\046\uffbd\051\uffbd\001\002\000\006\046" +
    "\uffbe\051\uffbe\001\002\000\004\046\201\001\002\000\006" +
    "\046\uffc0\051\177\001\002\000\006\037\173\071\174\001" +
    "\002\000\004\046\uffbf\001\002\000\004\050\uffc1\001\002" +
    "\000\006\046\205\071\204\001\002\000\004\050\uffc4\001" +
    "\002\000\004\046\206\001\002\000\004\050\uffc3\001\002" +
    "\000\004\050\uffc2\001\002\000\036\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\015\uffe2\017\uffe2\024\uffe2\026\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\071\uffe2\072\uffe2\073\uffe2\001\002\000" +
    "\004\025\211\001\002\000\004\007\212\001\002\000\024" +
    "\010\uffe1\011\104\012\120\015\102\024\125\026\107\071" +
    "\106\072\114\073\112\001\002\000\036\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\015\uffcf\017\uffcf\024\uffcf\026\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\071\uffcf\072\uffcf\073\uffcf\001\002" +
    "\000\004\010\215\001\002\000\036\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\015\uffce\017\uffce\024\uffce\026\uffce\036\uffce" +
    "\037\uffce\040\uffce\071\uffce\072\uffce\073\uffce\001\002\000" +
    "\022\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\045\uffab\071\uffab\001\002\000\022\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\045\uffad\071\uffad\001\002" +
    "\000\022\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\045\uffaa\071\uffaa\001\002\000\022\036\144\037\150" +
    "\040\156\041\143\042\146\043\142\045\151\071\155\001" +
    "\002\000\022\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\045\uffac\071\uffac\001\002\000\022\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\045\uffa9\071\uffa9" +
    "\001\002\000\020\050\uffbc\056\162\064\166\065\163\066" +
    "\165\067\160\070\164\001\002\000\010\007\uffe8\020\uffe8" +
    "\021\uffe8\001\002\000\004\071\230\001\002\000\004\046" +
    "\231\001\002\000\004\046\uffd5\001\002\000\004\022\232" +
    "\001\002\000\004\007\233\001\002\000\024\010\uffe1\011" +
    "\104\012\120\015\102\024\125\026\107\071\106\072\114" +
    "\073\112\001\002\000\036\010\uffd2\011\uffd2\012\uffd2\013" +
    "\235\015\uffd2\017\uffd2\024\uffd2\026\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\071\uffd2\072\uffd2\073\uffd2\001\002\000\004\007" +
    "\237\001\002\000\036\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\015\uffd6\017\uffd6\024\uffd6\026\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\071\uffd6\072\uffd6\073\uffd6\001\002\000\024\010\uffe1" +
    "\011\104\012\120\015\102\024\125\026\107\071\106\072" +
    "\114\073\112\001\002\000\004\010\241\001\002\000\036" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\017\uffd3\024" +
    "\uffd3\026\uffd3\036\uffd3\037\uffd3\040\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\001\002\000\004\010\243\001\002\000\036\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\017\uffd4\024\uffd4" +
    "\026\uffd4\036\uffd4\037\uffd4\040\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\001\002\000\036\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\015\uffdf\017\uffdf\024\uffdf\026\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\071\uffdf\072\uffdf\073\uffdf\001\002\000\004\016\246" +
    "\001\002\000\012\013\254\036\253\037\247\040\250\001" +
    "\002\000\004\047\uffc7\001\002\000\004\047\uffc6\001\002" +
    "\000\004\047\261\001\002\000\036\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\015\uffcc\017\uffcc\024\uffcc\026\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\071\uffcc\072\uffcc\073\uffcc\001\002\000" +
    "\004\047\uffc5\001\002\000\004\047\260\001\002\000\036" +
    "\010\uffe1\011\104\012\120\013\uffe1\015\102\017\uffe1\024" +
    "\125\026\107\036\uffe1\037\uffe1\040\uffe1\071\106\072\114" +
    "\073\112\001\002\000\036\010\uffcb\011\uffcb\012\uffcb\013" +
    "\254\015\uffcb\017\uffcb\024\uffcb\026\uffcb\036\253\037\247" +
    "\040\250\071\uffcb\072\uffcb\073\uffcb\001\002\000\036\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\015\uffca\017\uffca\024\uffca" +
    "\026\uffca\036\uffca\037\uffca\040\uffca\071\uffca\072\uffca\073" +
    "\uffca\001\002\000\036\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\015\uffc8\017\uffc8\024\uffc8\026\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\001\002\000\036\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\015\uffc9\017\uffc9\024\uffc9\026" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\071\uffc9\072\uffc9\073\uffc9" +
    "\001\002\000\006\046\uffe3\051\263\001\002\000\022\006" +
    "\034\027\031\030\030\031\027\032\024\033\032\034\033" +
    "\035\026\001\002\000\004\046\uffe5\001\002\000\004\046" +
    "\uffe4\001\002\000\004\045\267\001\002\000\024\006\034" +
    "\027\031\030\030\031\027\032\024\033\032\034\033\035" +
    "\026\046\uffe6\001\002\000\004\046\271\001\002\000\004" +
    "\047\272\001\002\000\022\006\034\027\031\030\030\031" +
    "\027\032\024\033\032\034\033\035\026\001\002\000\004" +
    "\007\274\001\002\000\030\005\010\010\ufffc\011\ufffc\012" +
    "\ufffc\014\ufffc\015\ufffc\024\ufffc\026\ufffc\071\ufffc\072\ufffc" +
    "\073\ufffc\001\002\000\010\007\uffeb\020\uffeb\021\uffeb\001" +
    "\002\000\026\010\ufff5\011\ufff5\012\ufff5\014\047\015\ufff5" +
    "\024\ufff5\026\ufff5\071\ufff5\072\ufff5\073\ufff5\001\002\000" +
    "\024\010\uffe1\011\104\012\120\015\102\024\125\026\107" +
    "\071\106\072\114\073\112\001\002\000\004\010\301\001" +
    "\002\000\010\007\uffe9\020\uffe9\021\uffe9\001\002\000\024" +
    "\010\uffe1\011\104\012\120\015\102\024\125\026\107\071" +
    "\106\072\114\073\112\001\002\000\004\010\304\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\010\004\005\005\006\001\001\000\002\001\001" +
    "\000\004\006\045\001\001\000\006\007\012\030\013\001" +
    "\001\000\002\001\001\000\004\011\015\001\001\000\002" +
    "\001\001\000\006\007\014\030\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\020" +
    "\001\001\000\002\001\001\000\010\032\024\033\022\034" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\043\033\022\034\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\060\013\065" +
    "\014\063\015\062\001\001\000\006\010\051\031\050\001" +
    "\001\000\002\001\001\000\006\010\052\031\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\066\013\065\014\063\015\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\073\021\071\032\072" +
    "\033\022\034\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\076\001\001\000\004" +
    "\005\077\001\001\000\002\001\001\000\004\006\100\001" +
    "\001\000\032\023\104\024\107\025\102\026\114\035\120" +
    "\036\112\037\123\040\122\045\110\046\121\055\115\057" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\220\001\001\000" +
    "\002\001\001\000\032\023\206\024\107\025\102\026\114" +
    "\035\120\036\112\037\123\040\122\045\110\046\121\055" +
    "\115\057\116\001\001\000\002\001\001\000\004\047\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\023\137" +
    "\024\107\025\102\026\114\035\120\036\112\037\123\040" +
    "\122\045\110\046\121\055\115\057\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\134\001\001\000\032\023\135\024\107\025\102" +
    "\026\114\035\120\036\112\037\123\040\122\045\110\046" +
    "\121\055\115\057\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\151\061\156\063\144\064\146\065\153\066\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\027\151\061\167\063\144\064\146\065" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\160\001\001\000\002\001\001\000\014\027\151\061\166" +
    "\063\144\064\146\065\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\160\001\001\000\004\070\160\001" +
    "\001\000\002\001\001\000\006\050\174\051\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\050\177\051\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\212\001" +
    "\001\000\032\023\213\024\107\025\102\026\114\035\120" +
    "\036\112\037\123\040\122\045\110\046\121\055\115\057" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\027\151\061\223\063\144\064\146\065\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\160\001\001\000\002\001\001\000\004\054\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\233\001\001\000\032\023\241\024\107\025\102" +
    "\026\114\035\120\036\112\037\123\040\122\045\110\046" +
    "\121\055\115\057\116\001\001\000\004\053\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\023\237\024" +
    "\107\025\102\026\114\035\120\036\112\037\123\040\122" +
    "\045\110\046\121\055\115\057\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\254\042" +
    "\251\043\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\023\255\024\107\025\102\026\114" +
    "\035\120\036\112\037\123\040\122\045\110\046\121\055" +
    "\115\057\116\001\001\000\010\041\254\042\256\043\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\263\001\001\000\012\021\264\032\072" +
    "\033\022\034\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\267\021\071\032\072" +
    "\033\022\034\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\272\033\022\034\034\001\001\000\004" +
    "\016\274\001\001\000\004\005\275\001\001\000\002\001" +
    "\001\000\004\006\276\001\001\000\032\023\277\024\107" +
    "\025\102\026\114\035\120\036\112\037\123\040\122\045" +
    "\110\046\121\055\115\057\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\023\302\024\107\025\102\026" +
    "\114\035\120\036\112\037\123\040\122\045\110\046\121" +
    "\055\115\057\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
    public void report_fatal_error(String message, Object info)
    {
        System.err.println("Error fatal. Imposible recuperarse.\n");
    }

    public void unrecovered_syntax_error(Symbol cur_token) {}
	
    public void syntax_error(Symbol st)
    {
        report_error("Syntax Error: "+ st.value + ". Linea: " + st.left + ". Columna: " + st.right + ". \n ", null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LITERAL ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LITERAL ::= _flotante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LITERAL ::= _false 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LITERAL ::= _true 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LITERAL ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LITERAL ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO_SIMPLE ::= _real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO_SIMPLE ::= _shortint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO_SIMPLE ::= _longint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPO_SIMPLE ::= _char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO_SIMPLE ::= _boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO_SIMPLE ::= _int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO_SIMPLE ::= _string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO_COMPUESTO ::= _array _bra_aper _entero _rango_dos_puntos _entero _bra_cerr _of TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_COMPUESTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO_DATO ::= TIPO_SIMPLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO_DATO ::= TIPO_COMPUESTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADOR_ARITMETICO_ASIGN ::= _asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADOR_ARITMETICO_ASIGN ::= _op_mult_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADOR_ARITMETICO_ASIGN ::= _op_div_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADOR_ARITMETICO_ASIGN ::= _op_menos_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADOR_ARITMETICO_ASIGN ::= _op_mas_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADOR_ARITMETICO ::= _op_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADOR_ARITMETICO ::= _op_mod 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADOR_ARITMETICO ::= _op_division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADOR_ARITMETICO ::= _op_multi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADOR_ARITMETICO ::= _op_resta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADOR_ARITMETICO ::= _op_suma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION_CONDICION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_CONDICION",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION_BASE ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION_BASE ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION_BINARIA ::= EXPRESION OPERADOR_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BINARIA",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION_COMPUESTA ::= _parentesisAbre EXPRESION _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_COMPUESTA",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION_BINARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION ::= _id OPERADOR_ARITMETICO_ASIGN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTENIDO_WRITE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTENIDO_WRITE ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROS_WRITE ::= CONTENIDO_WRITE _coma PARAMETROS_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROS_WRITE ::= CONTENIDO_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCION_WRITE ::= _write _parentesisAbre PARAMETROS_WRITE _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCION_READ_AUX ::= _parentesisAbre _id _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION_READ_AUX ::= _parentesisAbre _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION_READ ::= _read FUNCION_READ_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONSTANTE_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONSTANTE_CASE ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONSTANTE_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASE ::= _else _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASE ::= CONSTANTE_CASE _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASES ::= CASE CUERPO_INSTRUCCIONES CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASES ::= CASE CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_CASE ::= _case _id _of CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until EXPRESION_CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE_WHILE ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INICIO_WHILE ::= _while _id _do BLOQUE_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE_FOR ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INICIO_FOR ::= _for _id _asignacion _id _to _id _do BLOQUE_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_FOR",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE_ELSE ::= _else _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE_IF ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICION ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_IF ::= _if _parentesisAbre CONDICION _parentesisCierra _then BLOQUE_IF BLOQUE_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ESTRUCTURA_CONTROL ::= INICIO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ESTRUCTURA_CONTROL ::= INICIO_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ESTRUCTURA_CONTROL ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESTRUCTURA_CONTROL ::= SENTENCIA_REPEAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESTRUCTURA_CONTROL ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= FUNCION_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= FUNCION_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= INSTRUCCION _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_INSTRUCCIONES ::= SENTENCIA CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETROS_Aux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS_Aux2 ::= _coma PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS_Aux ::= TIPO_DATO _id PARAMETROS_Aux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS ::= PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ESTRUCTURA_PROCEDIMIENTO ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROCEDIMIENTO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ESTRUCTURA_FUNCION ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_PROCEDIMIENTO ::= _procedure _id _parentesisAbre PARAMETROS _parentesisCierra ESTRUCTURA_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_PROCEDIMIENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_FUNCION ::= _function _id _parentesisAbre PARAMETROS _parentesisCierra _dos_puntos TIPO_DATO ESTRUCTURA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES_FUNC_PROC ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES_FUNC_PROC ::= FUNCION_O_PROCEDIMIENTO DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LITERAL_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LITERAL_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONSTANTE ::= _id _igual LITERAL_CASE _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_CONSTANTES ::= CONSTANTE DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_CONSTANTES ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_DECLARACION_CONSTANTES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE_DECLARACION_CONSTANTES ::= _const DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_ID_CONSECUTIVO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_ID_CONSECUTIVO ::= _coma _id DECLARACION_ID_CONSECUTIVO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= _id DECLARACION_ID_CONSECUTIVO _dos_puntos TIPO_DATO _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_VARIABLES ::= VARIABLE DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_VARIABLES ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_DECLARACION_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_DECLARACION_VARIABLES ::= _var DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_PROGRAMA ::= DECLARACIONES _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO_PROGRAMA ::= _program BLOQUE_PROGRAMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

