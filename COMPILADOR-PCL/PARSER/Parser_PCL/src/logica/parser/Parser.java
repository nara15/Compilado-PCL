
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 14 00:47:36 CST 2016
//----------------------------------------------------

package logica.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 14 00:47:36 CST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\004\005\000\002\005\004\000\002\005\002" +
    "\000\002\007\003\000\002\007\004\000\002\030\007\000" +
    "\002\030\004\000\002\011\005\000\002\011\002\000\002" +
    "\006\004\000\002\006\002\000\002\010\003\000\002\010" +
    "\004\000\002\031\006\000\002\073\002\000\002\031\007" +
    "\000\002\031\006\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\012\004\000\002\012\002\000\002" +
    "\013\003\000\002\013\003\000\002\014\012\000\002\015" +
    "\010\000\002\016\007\000\002\017\007\000\002\020\003" +
    "\000\002\020\002\000\002\021\005\000\002\022\004\000" +
    "\002\022\002\000\002\023\004\000\002\023\002\000\002" +
    "\024\003\000\002\024\004\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\036\011\000\002\074\002\000\002\036\012\000\002" +
    "\054\003\000\002\052\005\000\002\053\006\000\002\053" +
    "\002\000\002\055\012\000\002\056\005\000\002\057\006" +
    "\000\002\060\005\000\002\037\006\000\002\040\006\000" +
    "\002\042\004\000\002\042\005\000\002\041\004\000\002" +
    "\041\004\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\046\004\000\002\047\004\000\002\047\005" +
    "\000\002\045\006\000\002\050\003\000\002\050\005\000" +
    "\002\051\003\000\002\051\003\000\002\026\005\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\063\005\000\002\064\005\000\002\062\004" +
    "\000\002\065\003\000\002\065\003\000\002\066\005\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\072\003\000\002\072\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\012\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\004\004\005\001\002\000\004\002\343\001" +
    "\002\000\014\005\010\007\ufffc\014\ufffc\020\ufffc\021\ufffc" +
    "\001\002\000\004\007\340\001\002\000\012\007\ufff4\014" +
    "\051\020\ufff4\021\ufff4\001\002\000\006\003\012\103\013" +
    "\001\002\000\004\002\000\001\002\000\004\050\047\001" +
    "\002\000\006\047\ufff6\051\020\001\002\000\034\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd\020\ufffd\021" +
    "\ufffd\024\ufffd\026\ufffd\103\ufffd\104\ufffd\105\ufffd\001\002" +
    "\000\036\003\012\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014" +
    "\ufffb\015\ufffb\020\ufffb\021\ufffb\024\ufffb\026\ufffb\103\013" +
    "\104\ufffb\105\ufffb\001\002\000\034\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\014\ufffa\015\ufffa\020\ufffa\021\ufffa\024\ufffa" +
    "\026\ufffa\103\ufffa\104\ufffa\105\ufffa\001\002\000\004\047" +
    "\023\001\002\000\004\103\021\001\002\000\006\047\ufff6" +
    "\051\020\001\002\000\004\047\ufff7\001\002\000\022\006" +
    "\036\027\032\030\031\031\030\032\025\033\033\034\034" +
    "\035\027\001\002\000\010\007\uff94\050\uff94\103\uff94\001" +
    "\002\000\010\007\uff8c\050\uff8c\103\uff8c\001\002\000\004" +
    "\050\046\001\002\000\010\007\uff8b\050\uff8b\103\uff8b\001" +
    "\002\000\010\007\uff8d\050\uff8d\103\uff8d\001\002\000\010" +
    "\007\uff90\050\uff90\103\uff90\001\002\000\004\052\037\001" +
    "\002\000\010\007\uff8e\050\uff8e\103\uff8e\001\002\000\010" +
    "\007\uff8f\050\uff8f\103\uff8f\001\002\000\010\007\uff93\050" +
    "\uff93\103\uff93\001\002\000\010\007\uff91\050\uff91\103\uff91" +
    "\001\002\000\004\036\040\001\002\000\004\055\041\001" +
    "\002\000\004\036\042\001\002\000\004\053\043\001\002" +
    "\000\004\016\044\001\002\000\022\006\036\027\032\030" +
    "\031\031\030\032\025\033\033\034\034\035\027\001\002" +
    "\000\010\007\uff92\050\uff92\103\uff92\001\002\000\036\003" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9" +
    "\020\ufff9\021\ufff9\024\ufff9\026\ufff9\103\ufff9\104\ufff9\105" +
    "\ufff9\001\002\000\036\003\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\014\ufff8\015\ufff8\020\ufff8\021\ufff8\024\ufff8\026" +
    "\ufff8\103\ufff8\104\ufff8\105\ufff8\001\002\000\010\007\uffe9" +
    "\020\074\021\076\001\002\000\004\103\052\001\002\000" +
    "\006\003\056\044\057\001\002\000\032\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\015\ufff3\020\ufff3\021\ufff3\024\ufff3\026" +
    "\ufff3\103\052\104\ufff3\105\ufff3\001\002\000\032\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\015\ufff5\020\ufff5\021\ufff5\024" +
    "\ufff5\026\ufff5\103\ufff5\104\ufff5\105\ufff5\001\002\000\032" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2\020\ufff2\021" +
    "\ufff2\024\ufff2\026\ufff2\103\ufff2\104\ufff2\105\ufff2\001\002" +
    "\000\010\036\ufff0\037\ufff0\041\ufff0\001\002\000\012\003" +
    "\063\036\064\037\061\041\060\001\002\000\004\050\uffeb" +
    "\001\002\000\004\050\uffec\001\002\000\004\050\066\001" +
    "\002\000\004\050\065\001\002\000\004\050\uffed\001\002" +
    "\000\032\007\uffee\010\uffee\011\uffee\012\uffee\015\uffee\020" +
    "\uffee\021\uffee\024\uffee\026\uffee\103\uffee\104\uffee\105\uffee" +
    "\001\002\000\032\007\ufff1\010\ufff1\011\ufff1\012\ufff1\015" +
    "\ufff1\020\ufff1\021\ufff1\024\ufff1\026\ufff1\103\ufff1\104\ufff1" +
    "\105\ufff1\001\002\000\010\036\064\037\061\041\060\001" +
    "\002\000\004\050\071\001\002\000\032\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\015\uffef\020\uffef\021\uffef\024\uffef\026" +
    "\uffef\103\uffef\104\uffef\105\uffef\001\002\000\004\007\ufffe" +
    "\001\002\000\010\007\uffe7\020\uffe7\021\uffe7\001\002\000" +
    "\004\103\324\001\002\000\010\007\uffe8\020\uffe8\021\uffe8" +
    "\001\002\000\004\103\101\001\002\000\010\007\uffe9\020" +
    "\074\021\076\001\002\000\004\007\uffea\001\002\000\004" +
    "\045\102\001\002\000\024\006\036\027\032\030\031\031" +
    "\030\032\025\033\033\034\034\035\027\046\uffe1\001\002" +
    "\000\004\103\320\001\002\000\004\046\uffe2\001\002\000" +
    "\004\046\106\001\002\000\004\007\107\001\002\000\030" +
    "\005\010\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\024" +
    "\ufffc\026\ufffc\103\ufffc\104\ufffc\105\ufffc\001\002\000\010" +
    "\007\uffe5\020\uffe5\021\uffe5\001\002\000\026\010\ufff4\011" +
    "\ufff4\012\ufff4\014\051\015\ufff4\024\ufff4\026\ufff4\103\ufff4" +
    "\104\ufff4\105\ufff4\001\002\000\024\010\uffdc\011\115\012" +
    "\131\015\113\024\136\026\120\103\117\104\125\105\123" +
    "\001\002\000\004\103\303\001\002\000\004\050\302\001" +
    "\002\000\004\045\256\001\002\000\004\010\255\001\002" +
    "\000\014\057\247\060\251\061\246\062\250\063\253\001" +
    "\002\000\022\036\144\037\150\040\155\041\143\042\145" +
    "\043\141\045\151\103\154\001\002\000\036\010\uffdc\011" +
    "\115\012\131\013\uffdc\015\113\017\uffdc\024\136\026\120" +
    "\036\uffdc\037\uffdc\040\uffdc\103\117\104\125\105\123\001" +
    "\002\000\004\050\uffd8\001\002\000\004\045\232\001\002" +
    "\000\036\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\017" +
    "\uffd6\024\uffd6\026\uffd6\036\uffd6\037\uffd6\040\uffd6\103\uffd6" +
    "\104\uffd6\105\uffd6\001\002\000\004\045\222\001\002\000" +
    "\004\050\uffd7\001\002\000\036\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\015\uffd3\017\uffd3\024\uffd3\026\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\103\uffd3\104\uffd3\105\uffd3\001\002\000\036" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\017\uffd2\024" +
    "\uffd2\026\uffd2\036\uffd2\037\uffd2\040\uffd2\103\uffd2\104\uffd2" +
    "\105\uffd2\001\002\000\024\011\115\012\131\015\113\017" +
    "\uffdc\024\136\026\120\103\117\104\125\105\123\001\002" +
    "\000\036\010\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\017" +
    "\uffdb\024\uffdb\026\uffdb\036\uffdb\037\uffdb\040\uffdb\103\uffdb" +
    "\104\uffdb\105\uffdb\001\002\000\004\050\uffd9\001\002\000" +
    "\036\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\017\uffd4" +
    "\024\uffd4\026\uffd4\036\uffd4\037\uffd4\040\uffd4\103\uffd4\104" +
    "\uffd4\105\uffd4\001\002\000\036\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\015\uffd5\017\uffd5\024\uffd5\026\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\103\uffd5\104\uffd5\105\uffd5\001\002\000\004" +
    "\103\137\001\002\000\004\063\140\001\002\000\022\036" +
    "\144\037\150\040\155\041\143\042\145\043\141\045\151" +
    "\103\154\001\002\000\104\010\uff87\011\uff87\012\uff87\013" +
    "\uff87\015\uff87\017\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\036\uff87\037\uff87\040\uff87\044\uff87\046\uff87\050\uff87\056" +
    "\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077\uff87\100" +
    "\uff87\103\uff87\104\uff87\105\uff87\001\002\000\104\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\015\uffb1\017\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\036\uffb1\037\uffb1\040\uffb1\044\uffb1" +
    "\046\uffb1\050\uffb1\056\uffb1\064\uffb1\065\uffb1\066\uffb1\067" +
    "\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1" +
    "\076\uffb1\077\uffb1\100\uffb1\103\uffb1\104\uffb1\105\uffb1\001" +
    "\002\000\104\010\uff86\011\uff86\012\uff86\013\uff86\015\uff86" +
    "\017\uff86\023\uff86\024\uff86\025\uff86\026\uff86\036\uff86\037" +
    "\uff86\040\uff86\044\uff86\046\uff86\050\uff86\056\uff86\064\uff86" +
    "\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073" +
    "\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\103\uff86" +
    "\104\uff86\105\uff86\001\002\000\104\010\uff8a\011\uff8a\012" +
    "\uff8a\013\uff8a\015\uff8a\017\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\036\uff8a\037\uff8a\040\uff8a\044\uff8a\046\uff8a\050" +
    "\uff8a\056\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a" +
    "\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077" +
    "\uff8a\100\uff8a\103\uff8a\104\uff8a\105\uff8a\001\002\000\104" +
    "\010\uff88\011\uff88\012\uff88\013\uff88\015\uff88\017\uff88\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\036\uff88\037\uff88\040\uff88" +
    "\044\uff88\046\uff88\050\uff88\056\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88" +
    "\075\uff88\076\uff88\077\uff88\100\uff88\103\uff88\104\uff88\105" +
    "\uff88\001\002\000\104\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\015\uffb3\017\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\044\uffb3\046\uffb3\050\uffb3\056\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072" +
    "\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\103\uffb3\104\uffb3\105\uffb3\001\002\000\104\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\015\uffb2\017\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\036\uffb2\037\uffb2\040\uffb2\044\uffb2\046" +
    "\uffb2\050\uffb2\056\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2" +
    "\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076" +
    "\uffb2\077\uffb2\100\uffb2\103\uffb2\104\uffb2\105\uffb2\001\002" +
    "\000\104\010\uff89\011\uff89\012\uff89\013\uff89\015\uff89\017" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\036\uff89\037\uff89" +
    "\040\uff89\044\uff89\046\uff89\050\uff89\056\uff89\064\uff89\065" +
    "\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073\uff89" +
    "\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89\103\uff89\104" +
    "\uff89\105\uff89\001\002\000\022\036\144\037\150\040\155" +
    "\041\143\042\145\043\141\045\151\103\154\001\002\000" +
    "\104\010\uffac\011\uffac\012\uffac\013\uffac\015\uffac\017\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\036\uffac\037\uffac\040" +
    "\uffac\044\uffac\046\uffac\050\uffac\056\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074" +
    "\uffac\075\uffac\076\uffac\077\uffac\100\uffac\103\uffac\104\uffac" +
    "\105\uffac\001\002\000\104\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\015\uffb4\017\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\044\uffb4\046\uffb4\050\uffb4\056" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4" +
    "\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100" +
    "\uffb4\103\uffb4\104\uffb4\105\uffb4\001\002\000\110\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\015\uffad\017\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\036\uffad\037\uffad\040\uffad\044\uffad" +
    "\046\uffad\050\uffad\056\uffad\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad" +
    "\076\uffad\077\uffad\100\uffad\101\177\102\200\103\uffad\104" +
    "\uffad\105\uffad\001\002\000\104\010\uff85\011\uff85\012\uff85" +
    "\013\uff85\015\uff85\017\uff85\023\uff85\024\uff85\025\uff85\026" +
    "\uff85\036\uff85\037\uff85\040\uff85\044\uff85\046\uff85\050\uff85" +
    "\056\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071" +
    "\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85" +
    "\100\uff85\103\uff85\104\uff85\105\uff85\001\002\000\020\023" +
    "\164\056\160\064\166\065\162\066\165\067\157\070\163" +
    "\001\002\000\022\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\045\uffa6\103\uffa6\001\002\000\022\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\045\uffaa\103" +
    "\uffaa\001\002\000\022\036\144\037\150\040\155\041\143" +
    "\042\145\043\141\045\151\103\154\001\002\000\022\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\045\uffa8" +
    "\103\uffa8\001\002\000\022\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\045\uffa5\103\uffa5\001\002\000\022" +
    "\036\144\037\150\040\155\041\143\042\145\043\141\045" +
    "\151\103\154\001\002\000\022\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\045\uffa7\103\uffa7\001\002\000" +
    "\022\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\045\uffa9\103\uffa9\001\002\000\020\025\170\056\160\064" +
    "\166\065\162\066\165\067\157\070\163\001\002\000\004" +
    "\007\171\001\002\000\024\010\uffdc\011\115\012\131\015" +
    "\113\024\136\026\120\103\117\104\125\105\123\001\002" +
    "\000\036\010\uffca\011\uffca\012\uffca\013\uffca\015\uffca\017" +
    "\uffca\024\uffca\026\uffca\036\uffca\037\uffca\040\uffca\103\uffca" +
    "\104\uffca\105\uffca\001\002\000\004\010\174\001\002\000" +
    "\036\010\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9\017\uffc9" +
    "\024\uffc9\026\uffc9\036\uffc9\037\uffc9\040\uffc9\103\uffc9\104" +
    "\uffc9\105\uffc9\001\002\000\104\010\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\015\uffaf\017\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\044\uffaf\046\uffaf\050\uffaf" +
    "\056\160\064\166\065\162\066\165\067\157\070\163\071" +
    "\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\100\uffaf\103\uffaf\104\uffaf\105\uffaf\001\002\000\104\010" +
    "\uffae\011\uffae\012\uffae\013\uffae\015\uffae\017\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\036\uffae\037\uffae\040\uffae\044" +
    "\uffae\046\uffae\050\uffae\056\uffae\064\uffae\065\uffae\066\uffae" +
    "\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075" +
    "\uffae\076\uffae\077\uffae\100\uffae\103\uffae\104\uffae\105\uffae" +
    "\001\002\000\104\010\uff96\011\uff96\012\uff96\013\uff96\015" +
    "\uff96\017\uff96\023\uff96\024\uff96\025\uff96\026\uff96\036\uff96" +
    "\037\uff96\040\uff96\044\uff96\046\uff96\050\uff96\056\uff96\064" +
    "\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96" +
    "\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\103" +
    "\uff96\104\uff96\105\uff96\001\002\000\104\010\uff95\011\uff95" +
    "\012\uff95\013\uff95\015\uff95\017\uff95\023\uff95\024\uff95\025" +
    "\uff95\026\uff95\036\uff95\037\uff95\040\uff95\044\uff95\046\uff95" +
    "\050\uff95\056\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070" +
    "\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95" +
    "\077\uff95\100\uff95\103\uff95\104\uff95\105\uff95\001\002\000" +
    "\020\046\202\056\160\064\166\065\162\066\165\067\157" +
    "\070\163\001\002\000\104\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\015\uffb0\017\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\044\uffb0\046\uffb0\050\uffb0\056" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0" +
    "\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100" +
    "\uffb0\103\uffb0\104\uffb0\105\uffb0\001\002\000\004\017\204" +
    "\001\002\000\022\036\144\037\150\040\155\041\143\042" +
    "\145\043\141\045\151\103\154\001\002\000\036\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\015\uffc6\017\uffc6\024\uffc6\026" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\103\uffc6\104\uffc6\105\uffc6" +
    "\001\002\000\040\044\212\056\160\064\166\065\162\066" +
    "\165\067\157\070\163\071\220\072\211\073\217\074\215" +
    "\075\216\076\214\077\213\100\210\001\002\000\022\036" +
    "\144\037\150\040\155\041\143\042\145\043\141\045\151" +
    "\103\154\001\002\000\022\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\045\uff97\103\uff97\001\002\000\022" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\045" +
    "\uff9b\103\uff9b\001\002\000\022\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\045\uff9d\103\uff9d\001\002\000" +
    "\022\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\045\uff98\103\uff98\001\002\000\022\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\045\uff99\103\uff99\001\002" +
    "\000\022\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\045\uff9e\103\uff9e\001\002\000\022\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\045\uff9a\103\uff9a\001" +
    "\002\000\022\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\045\uff9f\103\uff9f\001\002\000\022\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\045\uff9c\103\uff9c" +
    "\001\002\000\056\010\uffab\011\uffab\012\uffab\013\uffab\015" +
    "\uffab\017\uffab\024\uffab\025\uffab\026\uffab\036\uffab\037\uffab" +
    "\040\uffab\046\uffab\056\160\064\166\065\162\066\165\067" +
    "\157\070\163\103\uffab\104\uffab\105\uffab\001\002\000\006" +
    "\037\223\103\224\001\002\000\006\046\uffb6\051\uffb6\001" +
    "\002\000\006\046\uffb7\051\uffb7\001\002\000\004\046\231" +
    "\001\002\000\006\046\uffb9\051\227\001\002\000\006\037" +
    "\223\103\224\001\002\000\004\046\uffb8\001\002\000\004" +
    "\050\uffba\001\002\000\006\046\235\103\234\001\002\000" +
    "\004\050\uffbd\001\002\000\004\046\236\001\002\000\004" +
    "\050\uffbc\001\002\000\004\050\uffbb\001\002\000\036\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\024\uffdd" +
    "\026\uffdd\036\uffdd\037\uffdd\040\uffdd\103\uffdd\104\uffdd\105" +
    "\uffdd\001\002\000\004\025\241\001\002\000\004\007\242" +
    "\001\002\000\024\010\uffdc\011\115\012\131\015\113\024" +
    "\136\026\120\103\117\104\125\105\123\001\002\000\036" +
    "\010\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8\017\uffc8\024" +
    "\uffc8\026\uffc8\036\uffc8\037\uffc8\040\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\001\002\000\004\010\245\001\002\000\036\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\017\uffc7\024\uffc7" +
    "\026\uffc7\036\uffc7\037\uffc7\040\uffc7\103\uffc7\104\uffc7\105" +
    "\uffc7\001\002\000\022\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\045\uffa2\103\uffa2\001\002\000\022\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\045\uffa4" +
    "\103\uffa4\001\002\000\022\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\045\uffa1\103\uffa1\001\002\000\022" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\045" +
    "\uffa3\103\uffa3\001\002\000\022\036\144\037\150\040\155" +
    "\041\143\042\145\043\141\045\151\103\154\001\002\000" +
    "\022\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\045\uffa0\103\uffa0\001\002\000\020\050\uffb5\056\160\064" +
    "\166\065\162\066\165\067\157\070\163\001\002\000\010" +
    "\007\uffe3\020\uffe3\021\uffe3\001\002\000\024\003\260\036" +
    "\144\037\150\040\155\041\143\042\145\043\141\045\151" +
    "\103\154\001\002\000\004\046\uffce\001\002\000\004\046" +
    "\uffd0\001\002\000\004\046\262\001\002\000\004\022\263" +
    "\001\002\000\004\007\264\001\002\000\024\010\uffdc\011" +
    "\115\012\131\015\113\024\136\026\120\103\117\104\125" +
    "\105\123\001\002\000\036\010\uffcb\011\uffcb\012\uffcb\013" +
    "\266\015\uffcb\017\uffcb\024\uffcb\026\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\103\uffcb\104\uffcb\105\uffcb\001\002\000\004\007" +
    "\270\001\002\000\036\010\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\015\uffd1\017\uffd1\024\uffd1\026\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\103\uffd1\104\uffd1\105\uffd1\001\002\000\024\010\uffdc" +
    "\011\115\012\131\015\113\024\136\026\120\103\117\104" +
    "\125\105\123\001\002\000\004\010\272\001\002\000\036" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\017\uffcc\024" +
    "\uffcc\026\uffcc\036\uffcc\037\uffcc\040\uffcc\103\uffcc\104\uffcc" +
    "\105\uffcc\001\002\000\004\010\274\001\002\000\036\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd\017\uffcd\024\uffcd" +
    "\026\uffcd\036\uffcd\037\uffcd\040\uffcd\103\uffcd\104\uffcd\105" +
    "\uffcd\001\002\000\004\046\276\001\002\000\004\022\277" +
    "\001\002\000\004\007\264\001\002\000\036\010\uffcb\011" +
    "\uffcb\012\uffcb\013\266\015\uffcb\017\uffcb\024\uffcb\026\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\103\uffcb\104\uffcb\105\uffcb\001" +
    "\002\000\036\010\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf" +
    "\017\uffcf\024\uffcf\026\uffcf\036\uffcf\037\uffcf\040\uffcf\103" +
    "\uffcf\104\uffcf\105\uffcf\001\002\000\036\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\015\uffda\017\uffda\024\uffda\026\uffda\036" +
    "\uffda\037\uffda\040\uffda\103\uffda\104\uffda\105\uffda\001\002" +
    "\000\004\016\304\001\002\000\012\013\312\036\311\037" +
    "\305\040\306\001\002\000\004\047\uffc0\001\002\000\004" +
    "\047\uffbf\001\002\000\004\047\317\001\002\000\036\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\017\uffc5\024\uffc5" +
    "\026\uffc5\036\uffc5\037\uffc5\040\uffc5\103\uffc5\104\uffc5\105" +
    "\uffc5\001\002\000\004\047\uffbe\001\002\000\004\047\316" +
    "\001\002\000\036\010\uffdc\011\115\012\131\013\uffdc\015" +
    "\113\017\uffdc\024\136\026\120\036\uffdc\037\uffdc\040\uffdc" +
    "\103\117\104\125\105\123\001\002\000\036\010\uffc4\011" +
    "\uffc4\012\uffc4\013\312\015\uffc4\017\uffc4\024\uffc4\026\uffc4" +
    "\036\311\037\305\040\306\103\uffc4\104\uffc4\105\uffc4\001" +
    "\002\000\036\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3" +
    "\017\uffc3\024\uffc3\026\uffc3\036\uffc3\037\uffc3\040\uffc3\103" +
    "\uffc3\104\uffc3\105\uffc3\001\002\000\036\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\015\uffc1\017\uffc1\024\uffc1\026\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\103\uffc1\104\uffc1\105\uffc1\001\002" +
    "\000\036\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\017" +
    "\uffc2\024\uffc2\026\uffc2\036\uffc2\037\uffc2\040\uffc2\103\uffc2" +
    "\104\uffc2\105\uffc2\001\002\000\006\046\uffde\051\321\001" +
    "\002\000\022\006\036\027\032\030\031\031\030\032\025" +
    "\033\033\034\034\035\027\001\002\000\004\046\uffe0\001" +
    "\002\000\004\046\uffdf\001\002\000\004\045\325\001\002" +
    "\000\024\006\036\027\032\030\031\031\030\032\025\033" +
    "\033\034\034\035\027\046\uffe1\001\002\000\004\046\327" +
    "\001\002\000\004\047\330\001\002\000\022\006\036\027" +
    "\032\030\031\031\030\032\025\033\033\034\034\035\027" +
    "\001\002\000\004\007\332\001\002\000\030\005\010\010" +
    "\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\024\ufffc\026\ufffc" +
    "\103\ufffc\104\ufffc\105\ufffc\001\002\000\010\007\uffe6\020" +
    "\uffe6\021\uffe6\001\002\000\026\010\ufff4\011\ufff4\012\ufff4" +
    "\014\051\015\ufff4\024\ufff4\026\ufff4\103\ufff4\104\ufff4\105" +
    "\ufff4\001\002\000\024\010\uffdc\011\115\012\131\015\113" +
    "\024\136\026\120\103\117\104\125\105\123\001\002\000" +
    "\004\010\337\001\002\000\010\007\uffe4\020\uffe4\021\uffe4" +
    "\001\002\000\024\010\uffdc\011\115\012\131\015\113\024" +
    "\136\026\120\103\117\104\125\105\123\001\002\000\004" +
    "\010\342\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\010\004\005\005\006\001\001\000\002\001\001" +
    "\000\004\006\047\001\001\000\006\007\013\030\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\016" +
    "\001\001\000\002\001\001\000\006\007\015\030\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\021\001\001\000\002\001\001\000\010\032" +
    "\025\033\023\034\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\044\033\023\034" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\071\013\076\014\074\015\072\001" +
    "\001\000\006\010\053\031\052\001\001\000\002\001\001" +
    "\000\006\010\054\031\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\066\001\001\000\004\044\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\077\013\076\014\074\015\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\104\021\103\032" +
    "\102\033\023\034\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\107\001\001\000" +
    "\004\005\110\001\001\000\002\001\001\000\004\006\111" +
    "\001\001\000\032\023\115\024\120\025\113\026\125\035" +
    "\131\036\123\037\134\040\133\045\121\046\132\055\126" +
    "\057\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\251\001\001" +
    "\000\020\027\151\061\205\062\141\063\146\064\145\065" +
    "\152\066\237\001\001\000\032\023\236\024\120\025\113" +
    "\026\125\035\131\036\123\037\134\040\133\045\121\046" +
    "\132\055\126\057\127\001\001\000\002\001\001\000\004" +
    "\047\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\023\202\024\120\025\113\026\125\035\131\036\123\037" +
    "\134\040\133\045\121\046\132\055\126\057\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\027\151\061\155\062\141\063\146\064\145\065\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\027\151\061\200" +
    "\062\141\063\146\064\145\065\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\175\001\001\000\002" +
    "\001\001\000\004\067\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\027\151\061\174\062\141\063\146" +
    "\064\145\065\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\027\151\061\166\062\141\063\146\064\145" +
    "\065\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\160\001\001\000\004\056\171\001\001\000\032" +
    "\023\172\024\120\025\113\026\125\035\131\036\123\037" +
    "\134\040\133\045\121\046\132\055\126\057\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\027\151\061\205\062\141" +
    "\063\146\064\145\065\152\066\204\001\001\000\002\001" +
    "\001\000\006\067\160\071\206\001\001\000\016\027\151" +
    "\061\220\062\141\063\146\064\145\065\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\160" +
    "\001\001\000\006\050\224\051\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\227\051\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\242\001\001\000\032" +
    "\023\243\024\120\025\113\026\125\035\131\036\123\037" +
    "\134\040\133\045\121\046\132\055\126\057\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\027\151\061\253\062\141\063\146\064" +
    "\145\065\152\001\001\000\002\001\001\000\004\067\160" +
    "\001\001\000\002\001\001\000\022\027\151\054\260\061" +
    "\205\062\141\063\146\064\145\065\152\066\256\001\001" +
    "\000\002\001\001\000\004\074\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\264\001\001\000\032" +
    "\023\272\024\120\025\113\026\125\035\131\036\123\037" +
    "\134\040\133\045\121\046\132\055\126\057\127\001\001" +
    "\000\004\053\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\023\270\024\120\025\113\026\125\035\131" +
    "\036\123\037\134\040\133\045\121\046\132\055\126\057" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\277\001\001\000\004\053\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\312\042\307\043\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\023\313\024\120" +
    "\025\113\026\125\035\131\036\123\037\134\040\133\045" +
    "\121\046\132\055\126\057\127\001\001\000\010\041\312" +
    "\042\314\043\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\321\001\001\000\012" +
    "\021\322\032\102\033\023\034\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\325" +
    "\021\103\032\102\033\023\034\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\330\033\023\034\034" +
    "\001\001\000\004\016\332\001\001\000\004\005\333\001" +
    "\001\000\002\001\001\000\004\006\334\001\001\000\032" +
    "\023\335\024\120\025\113\026\125\035\131\036\123\037" +
    "\134\040\133\045\121\046\132\055\126\057\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\023\340\024" +
    "\120\025\113\026\125\035\131\036\123\037\134\040\133" +
    "\045\121\046\132\055\126\057\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_fatal_error(String message, Object info)
    {
        System.err.println("Error fatal. Imposible recuperarse.\n");
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) {}
	
    public void syntax_error(Symbol st)
    {
        report_error("Syntax Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right, null);
    }


    public void errorMensaje(String msg)
    {
        System.err.println(msg);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LITERAL ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LITERAL ::= _flotante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LITERAL ::= _false 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LITERAL ::= _true 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LITERAL ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LITERAL ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO_SIMPLE ::= _real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPO_SIMPLE ::= _shortint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIPO_SIMPLE ::= _longint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIPO_SIMPLE ::= _char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TIPO_SIMPLE ::= _boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TIPO_SIMPLE ::= _int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIPO_SIMPLE ::= _string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIPO_COMPUESTO ::= _array _bra_aper _entero _rango_dos_puntos _entero _bra_cerr _of TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_COMPUESTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO_DATO ::= TIPO_SIMPLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO_DATO ::= TIPO_COMPUESTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERADOR_UNARIO ::= _op_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERADOR_UNARIO ::= _op_inc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERADOR_BOOLEAN ::= _NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPERADOR_BOOLEAN ::= _AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPERADOR_BOOLEAN ::= _OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERADOR_BOOLEAN ::= _distinto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERADOR_BOOLEAN ::= _mayor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERADOR_BOOLEAN ::= _mayor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERADOR_BOOLEAN ::= _igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERADOR_BOOLEAN ::= _menor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERADOR_BOOLEAN ::= _menor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERADOR_ARITMETICO_ASIGN ::= _asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADOR_ARITMETICO_ASIGN ::= _op_mult_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADOR_ARITMETICO_ASIGN ::= _op_div_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADOR_ARITMETICO_ASIGN ::= _op_menos_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERADOR_ARITMETICO_ASIGN ::= _op_mas_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERADOR_ARITMETICO ::= _op_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERADOR_ARITMETICO ::= _op_mod 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADOR_ARITMETICO ::= _op_division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADOR_ARITMETICO ::= _op_multi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADOR_ARITMETICO ::= _op_resta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADOR_ARITMETICO ::= _op_suma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_CONDICION ::= EXPRESION OPERADOR_BOOLEAN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_CONDICION",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_BASE ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION_BASE ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION_UNARIA ::= _id OPERADOR_UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION_BINARIA ::= EXPRESION OPERADOR_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BINARIA",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_COMPUESTA ::= _parentesisAbre EXPRESION _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_COMPUESTA",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION_BINARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACION ::= _id OPERADOR_ARITMETICO_ASIGN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTENIDO_WRITE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO_WRITE ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMETROS_WRITE ::= CONTENIDO_WRITE _coma PARAMETROS_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETROS_WRITE ::= CONTENIDO_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCION_WRITE ::= _write _parentesisAbre PARAMETROS_WRITE _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCION_READ_AUX ::= _parentesisAbre _id _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION_READ_AUX ::= _parentesisAbre _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCION_READ ::= _read FUNCION_READ_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONSTANTE_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONSTANTE_CASE ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONSTANTE_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASE ::= _else _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASE ::= CONSTANTE_CASE _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASES ::= CASE CUERPO_INSTRUCCIONES CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASES ::= CASE CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_CASE ::= _case _id _of CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until EXPRESION_CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE_WHILE ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INICIO_WHILE ::= _while EXPRESION_CONDICION _do BLOQUE_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE_FOR ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INICIO_FOR ::= _for _id _asignacion EXPRESION _to EXPRESION _do BLOQUE_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_FOR",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE_ELSE ::= _else _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE_IF ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= EXPRESION_CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_IF ::= _if _parentesisAbre error NT$1 _parentesisCierra _then BLOQUE_IF BLOQUE_ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Hay algo en el if");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_IF ::= _if _parentesisAbre CONDICION _parentesisCierra _then BLOQUE_IF BLOQUE_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ESTRUCTURA_CONTROL ::= INICIO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTRUCTURA_CONTROL ::= INICIO_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESTRUCTURA_CONTROL ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESTRUCTURA_CONTROL ::= SENTENCIA_REPEAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ESTRUCTURA_CONTROL ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= FUNCION_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= FUNCION_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= INSTRUCCION _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_INSTRUCCIONES ::= SENTENCIA CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETROS_Aux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS_Aux2 ::= _coma PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS_Aux ::= TIPO_DATO _id PARAMETROS_Aux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS ::= PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ESTRUCTURA_PROCEDIMIENTO ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROCEDIMIENTO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESTRUCTURA_FUNCION ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_PROCEDIMIENTO ::= _procedure _id _parentesisAbre PARAMETROS _parentesisCierra ESTRUCTURA_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_PROCEDIMIENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_FUNCION ::= _function _id _parentesisAbre PARAMETROS _parentesisCierra _dos_puntos TIPO_DATO ESTRUCTURA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACIONES_FUNC_PROC ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACIONES_FUNC_PROC ::= FUNCION_O_PROCEDIMIENTO DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LITERAL_CASE ::= _flotante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LITERAL_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LITERAL_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONSTANTE ::= _id _igual error _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONSTANTE ::= _id error NT$0 LITERAL_CASE _punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Lo declaró mal tonto");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONSTANTE ::= _id _igual LITERAL_CASE _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION_CONSTANTES ::= CONSTANTE DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_CONSTANTES ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_DECLARACION_CONSTANTES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_DECLARACION_CONSTANTES ::= _const DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_ID_CONSECUTIVO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_ID_CONSECUTIVO ::= _coma _id DECLARACION_ID_CONSECUTIVO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLE ::= error _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= _id DECLARACION_ID_CONSECUTIVO _dos_puntos TIPO_DATO _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_VARIABLES ::= VARIABLE DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_VARIABLES ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_DECLARACION_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_DECLARACION_VARIABLES ::= _var DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_PROGRAMA ::= DECLARACIONES _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO_PROGRAMA ::= _program BLOQUE_PROGRAMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

