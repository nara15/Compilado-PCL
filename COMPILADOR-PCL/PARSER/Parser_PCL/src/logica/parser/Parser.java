
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 18 12:04:52 CST 2016
//----------------------------------------------------

package logica.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 18 12:04:52 CST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\250\000\002\002\004\000\002\002\005\000\002\077" +
    "\002\000\002\002\006\000\002\003\006\000\002\004\005" +
    "\000\002\005\004\000\002\005\002\000\002\007\003\000" +
    "\002\007\004\000\002\030\007\000\002\100\002\000\002" +
    "\030\005\000\002\011\005\000\002\011\002\000\002\006" +
    "\004\000\002\006\002\000\002\010\003\000\002\010\004" +
    "\000\002\031\006\000\002\101\002\000\002\031\007\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\012\004\000\002\012\002\000\002\013\003\000\002\013" +
    "\003\000\002\014\012\000\002\102\002\000\002\014\005" +
    "\000\002\015\010\000\002\103\002\000\002\015\007\000" +
    "\002\016\007\000\002\017\007\000\002\020\003\000\002" +
    "\020\002\000\002\021\005\000\002\022\004\000\002\022" +
    "\002\000\002\023\004\000\002\023\002\000\002\024\003" +
    "\000\002\024\004\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\011\000\002\104\002\000\002\036\006\000\002\053\003" +
    "\000\002\051\006\000\002\052\006\000\002\052\002\000" +
    "\002\054\012\000\002\105\002\000\002\054\006\000\002" +
    "\055\005\000\002\056\010\000\002\106\002\000\002\056" +
    "\006\000\002\057\005\000\002\037\010\000\002\107\002" +
    "\000\002\037\007\000\002\110\002\000\002\037\011\000" +
    "\002\111\002\000\002\037\011\000\002\040\006\000\002" +
    "\112\002\000\002\040\007\000\002\113\002\000\002\040" +
    "\007\000\002\042\004\000\002\042\005\000\002\114\002" +
    "\000\002\042\006\000\002\072\003\000\002\072\002\000" +
    "\002\041\004\000\002\041\004\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\046\004\000\002\047" +
    "\004\000\002\047\005\000\002\115\002\000\002\047\005" +
    "\000\002\116\002\000\002\047\006\000\002\047\005\000" +
    "\002\073\004\000\002\073\003\000\002\073\002\000\002" +
    "\045\006\000\002\117\002\000\002\045\006\000\002\074" +
    "\004\000\002\074\003\000\002\074\002\000\002\050\004" +
    "\000\002\075\004\000\002\120\002\000\002\075\005\000" +
    "\002\075\002\000\002\076\003\000\002\076\003\000\002" +
    "\026\005\000\002\026\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\062\005" +
    "\000\002\063\005\000\002\061\004\000\002\064\003\000" +
    "\002\064\003\000\002\065\005\000\002\065\005\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\071\003\000\002\071\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\012\000\002\033\010\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\004\004\005\001\002\000\004\002\u0124\001" +
    "\002\000\006\003\006\103\007\001\002\000\016\003\uffff" +
    "\005\uffff\007\uffff\014\uffff\020\uffff\021\uffff\001\002\000" +
    "\016\003\ufffa\005\012\007\ufffa\014\ufffa\020\ufffa\021\ufffa" +
    "\001\002\000\004\007\u011f\001\002\000\014\003\ufff1\007" +
    "\ufff1\014\057\020\ufff1\021\ufff1\001\002\000\006\003\014" +
    "\103\015\001\002\000\004\002\000\001\002\000\004\050" +
    "\ufff6\001\002\000\006\047\ufff3\051\022\001\002\000\036" +
    "\003\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015" +
    "\ufffb\020\ufffb\021\ufffb\024\ufffb\026\ufffb\103\ufffb\104\ufffb" +
    "\105\ufffb\001\002\000\036\003\014\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\014\ufff9\015\ufff9\020\ufff9\021\ufff9\024\ufff9" +
    "\026\ufff9\103\015\104\ufff9\105\ufff9\001\002\000\036\003" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8" +
    "\020\ufff8\021\ufff8\024\ufff8\026\ufff8\103\ufff8\104\ufff8\105" +
    "\ufff8\001\002\000\004\047\025\001\002\000\004\103\023" +
    "\001\002\000\006\047\ufff3\051\022\001\002\000\004\047" +
    "\ufff4\001\002\000\022\006\037\027\034\030\032\031\033" +
    "\032\027\033\035\034\036\035\031\001\002\000\010\007" +
    "\uff6a\050\uff6a\103\uff6a\001\002\000\010\007\uff61\050\uff61" +
    "\103\uff61\001\002\000\004\050\053\001\002\000\010\007" +
    "\uff60\050\uff60\103\uff60\001\002\000\010\007\uff65\050\uff65" +
    "\103\uff65\001\002\000\010\007\uff62\050\uff62\103\uff62\001" +
    "\002\000\004\052\041\001\002\000\010\007\uff63\050\uff63" +
    "\103\uff63\001\002\000\010\007\uff64\050\uff64\103\uff64\001" +
    "\002\000\010\007\uff66\050\uff66\103\uff66\001\002\000\010" +
    "\007\uff69\050\uff69\103\uff69\001\002\000\004\036\042\001" +
    "\002\000\006\053\043\055\044\001\002\000\004\016\051" +
    "\001\002\000\004\036\045\001\002\000\004\053\046\001" +
    "\002\000\004\016\047\001\002\000\022\006\037\027\034" +
    "\030\032\031\033\032\027\033\035\034\036\035\031\001" +
    "\002\000\010\007\uff68\050\uff68\103\uff68\001\002\000\022" +
    "\006\037\027\034\030\032\031\033\032\027\033\035\034" +
    "\036\035\031\001\002\000\010\007\uff67\050\uff67\103\uff67" +
    "\001\002\000\036\003\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\014\ufff7\015\ufff7\020\ufff7\021\ufff7\024\ufff7\026\ufff7" +
    "\103\ufff7\104\ufff7\105\ufff7\001\002\000\004\050\055\001" +
    "\002\000\036\003\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\014\ufff5\015\ufff5\020\ufff5\021\ufff5\024\ufff5\026\ufff5\103" +
    "\ufff5\104\ufff5\105\ufff5\001\002\000\012\003\101\007\uffe7" +
    "\020\077\021\103\001\002\000\004\103\060\001\002\000" +
    "\006\003\064\044\065\001\002\000\034\003\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\015\ufff0\020\ufff0\021\ufff0\024" +
    "\ufff0\026\ufff0\103\060\104\ufff0\105\ufff0\001\002\000\034" +
    "\003\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2\020" +
    "\ufff2\021\ufff2\024\ufff2\026\ufff2\103\ufff2\104\ufff2\105\ufff2" +
    "\001\002\000\034\003\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\015\uffef\020\uffef\021\uffef\024\uffef\026\uffef\103\uffef" +
    "\104\uffef\105\uffef\001\002\000\010\036\uffed\037\uffed\041" +
    "\uffed\001\002\000\010\036\071\037\066\041\067\001\002" +
    "\000\004\050\uffea\001\002\000\004\050\uffe9\001\002\000" +
    "\004\050\072\001\002\000\004\050\uffeb\001\002\000\034" +
    "\003\uffee\007\uffee\010\uffee\011\uffee\012\uffee\015\uffee\020" +
    "\uffee\021\uffee\024\uffee\026\uffee\103\uffee\104\uffee\105\uffee" +
    "\001\002\000\010\036\071\037\066\041\067\001\002\000" +
    "\004\050\075\001\002\000\034\003\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\015\uffec\020\uffec\021\uffec\024\uffec\026" +
    "\uffec\103\uffec\104\uffec\105\uffec\001\002\000\004\007\ufffc" +
    "\001\002\000\004\103\u0113\001\002\000\012\003\uffe5\007" +
    "\uffe5\020\uffe5\021\uffe5\001\002\000\004\010\uffe3\001\002" +
    "\000\012\003\uffe6\007\uffe6\020\uffe6\021\uffe6\001\002\000" +
    "\004\103\106\001\002\000\012\003\101\007\uffe7\020\077" +
    "\021\103\001\002\000\004\007\uffe8\001\002\000\006\003" +
    "\110\045\107\001\002\000\024\006\037\027\034\030\032" +
    "\031\033\032\027\033\035\034\036\035\031\046\uffdb\001" +
    "\002\000\004\010\uffe0\001\002\000\004\010\112\001\002" +
    "\000\012\003\uffdf\007\uffdf\020\uffdf\021\uffdf\001\002\000" +
    "\004\103\u010d\001\002\000\004\046\uffdc\001\002\000\004" +
    "\046\116\001\002\000\004\007\117\001\002\000\032\003" +
    "\ufffa\005\012\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa" +
    "\024\ufffa\026\ufffa\103\ufffa\104\ufffa\105\ufffa\001\002\000" +
    "\012\003\uffe1\007\uffe1\020\uffe1\021\uffe1\001\002\000\030" +
    "\003\ufff1\010\ufff1\011\ufff1\012\ufff1\014\057\015\ufff1\024" +
    "\ufff1\026\ufff1\103\ufff1\104\ufff1\105\ufff1\001\002\000\026" +
    "\003\141\010\uffd6\011\125\012\142\015\123\024\147\026" +
    "\130\103\127\104\135\105\133\001\002\000\006\003\364" +
    "\103\365\001\002\000\004\050\363\001\002\000\006\003" +
    "\342\045\341\001\002\000\004\010\340\001\002\000\014" +
    "\057\331\060\335\061\332\062\333\063\336\001\002\000" +
    "\006\003\317\045\316\001\002\000\040\003\141\010\uffd6" +
    "\011\125\012\142\013\uffd6\015\123\017\uffd6\024\147\026" +
    "\130\036\uffd6\037\uffd6\040\uffd6\103\127\104\135\105\133" +
    "\001\002\000\004\050\uffd2\001\002\000\006\003\277\045" +
    "\276\001\002\000\040\003\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\015\uffd0\017\uffd0\024\uffd0\026\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\103\uffd0\104\uffd0\105\uffd0\001\002\000\006" +
    "\003\255\045\254\001\002\000\004\050\uffd1\001\002\000" +
    "\040\003\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd" +
    "\017\uffcd\024\uffcd\026\uffcd\036\uffcd\037\uffcd\040\uffcd\103" +
    "\uffcd\104\uffcd\105\uffcd\001\002\000\040\003\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\015\uffcc\017\uffcc\024\uffcc\026" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\103\uffcc\104\uffcc\105\uffcc" +
    "\001\002\000\004\050\uff8c\001\002\000\026\003\141\011" +
    "\125\012\142\015\123\017\uffd6\024\147\026\130\103\127" +
    "\104\135\105\133\001\002\000\040\003\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\015\uffd5\017\uffd5\024\uffd5\026\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\103\uffd5\104\uffd5\105\uffd5\001" +
    "\002\000\004\050\uffd3\001\002\000\040\003\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\015\uffcf\017\uffcf\024\uffcf\026" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\001\002\000\040\003\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\015\uffce\017\uffce\024\uffce\026\uffce\036\uffce\037\uffce" +
    "\040\uffce\103\uffce\104\uffce\105\uffce\001\002\000\006\003" +
    "\150\103\151\001\002\000\004\010\uffc3\001\002\000\004" +
    "\063\152\001\002\000\022\036\156\037\162\040\167\041" +
    "\155\042\157\043\154\045\163\103\166\001\002\000\054" +
    "\003\uff88\023\uff88\025\uff88\044\uff88\046\uff88\050\uff88\051" +
    "\uff88\056\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88" +
    "\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\077" +
    "\uff88\100\uff88\001\002\000\054\003\uff5c\023\uff5c\025\uff5c" +
    "\044\uff5c\046\uff5c\050\uff5c\051\uff5c\056\uff5c\064\uff5c\065" +
    "\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c" +
    "\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\001\002\000" +
    "\054\003\uff5b\023\uff5b\025\uff5b\044\uff5b\046\uff5b\050\uff5b" +
    "\051\uff5b\056\uff5b\064\uff5b\065\uff5b\066\uff5b\067\uff5b\070" +
    "\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b" +
    "\077\uff5b\100\uff5b\001\002\000\054\003\uff5f\023\uff5f\025" +
    "\uff5f\044\uff5f\046\uff5f\050\uff5f\051\uff5f\056\uff5f\064\uff5f" +
    "\065\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073" +
    "\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f\100\uff5f\001\002" +
    "\000\054\003\uff5d\023\uff5d\025\uff5d\044\uff5d\046\uff5d\050" +
    "\uff5d\051\uff5d\056\uff5d\064\uff5d\065\uff5d\066\uff5d\067\uff5d" +
    "\070\uff5d\071\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076" +
    "\uff5d\077\uff5d\100\uff5d\001\002\000\054\003\uff8a\023\uff8a" +
    "\025\uff8a\044\uff8a\046\uff8a\050\uff8a\051\uff8a\056\uff8a\064" +
    "\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a" +
    "\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\001" +
    "\002\000\054\003\uff89\023\uff89\025\uff89\044\uff89\046\uff89" +
    "\050\uff89\051\uff89\056\uff89\064\uff89\065\uff89\066\uff89\067" +
    "\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89" +
    "\076\uff89\077\uff89\100\uff89\001\002\000\054\003\uff5e\023" +
    "\uff5e\025\uff5e\044\uff5e\046\uff5e\050\uff5e\051\uff5e\056\uff5e" +
    "\064\uff5e\065\uff5e\066\uff5e\067\uff5e\070\uff5e\071\uff5e\072" +
    "\uff5e\073\uff5e\074\uff5e\075\uff5e\076\uff5e\077\uff5e\100\uff5e" +
    "\001\002\000\022\036\156\037\162\040\167\041\155\042" +
    "\157\043\154\045\163\103\166\001\002\000\054\003\uff83" +
    "\023\uff83\025\uff83\044\uff83\046\uff83\050\uff83\051\uff83\056" +
    "\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83" +
    "\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83\100" +
    "\uff83\001\002\000\054\003\uff8b\023\uff8b\025\uff8b\044\uff8b" +
    "\046\uff8b\050\uff8b\051\uff8b\056\uff8b\064\uff8b\065\uff8b\066" +
    "\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b" +
    "\075\uff8b\076\uff8b\077\uff8b\100\uff8b\001\002\000\060\003" +
    "\uff84\023\uff84\025\uff84\044\uff84\046\uff84\050\uff84\051\uff84" +
    "\056\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071" +
    "\uff84\072\uff84\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84" +
    "\100\uff84\101\211\102\212\001\002\000\054\003\uff5a\023" +
    "\uff5a\025\uff5a\044\uff5a\046\uff5a\050\uff5a\051\uff5a\056\uff5a" +
    "\064\uff5a\065\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072" +
    "\uff5a\073\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a" +
    "\001\002\000\020\023\177\056\173\064\200\065\174\066" +
    "\176\067\171\070\175\001\002\000\022\036\uff7c\037\uff7c" +
    "\040\uff7c\041\uff7c\042\uff7c\043\uff7c\045\uff7c\103\uff7c\001" +
    "\002\000\022\036\156\037\162\040\167\041\155\042\157" +
    "\043\154\045\163\103\166\001\002\000\022\036\uff80\037" +
    "\uff80\040\uff80\041\uff80\042\uff80\043\uff80\045\uff80\103\uff80" +
    "\001\002\000\022\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042" +
    "\uff7e\043\uff7e\045\uff7e\103\uff7e\001\002\000\022\036\uff7b" +
    "\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\045\uff7b\103" +
    "\uff7b\001\002\000\022\036\uff7d\037\uff7d\040\uff7d\041\uff7d" +
    "\042\uff7d\043\uff7d\045\uff7d\103\uff7d\001\002\000\022\036" +
    "\156\037\162\040\167\041\155\042\157\043\154\045\163" +
    "\103\166\001\002\000\022\036\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\042\uff7f\043\uff7f\045\uff7f\103\uff7f\001\002\000\020" +
    "\025\202\056\173\064\200\065\174\066\176\067\171\070" +
    "\175\001\002\000\004\007\203\001\002\000\026\003\141" +
    "\010\uffd6\011\125\012\142\015\123\024\147\026\130\103" +
    "\127\104\135\105\133\001\002\000\040\003\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\015\uffc4\017\uffc4\024\uffc4\026" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\001\002\000\004\010\206\001\002\000\040\003\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\017\uffc1\024\uffc1" +
    "\026\uffc1\036\uffc1\037\uffc1\040\uffc1\103\uffc1\104\uffc1\105" +
    "\uffc1\001\002\000\054\003\uff86\023\uff86\025\uff86\044\uff86" +
    "\046\uff86\050\uff86\051\uff86\056\173\064\200\065\174\066" +
    "\176\067\171\070\175\071\uff86\072\uff86\073\uff86\074\uff86" +
    "\075\uff86\076\uff86\077\uff86\100\uff86\001\002\000\054\003" +
    "\uff85\023\uff85\025\uff85\044\uff85\046\uff85\050\uff85\051\uff85" +
    "\056\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071" +
    "\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85" +
    "\100\uff85\001\002\000\054\003\uff6c\023\uff6c\025\uff6c\044" +
    "\uff6c\046\uff6c\050\uff6c\051\uff6c\056\uff6c\064\uff6c\065\uff6c" +
    "\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074" +
    "\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\001\002\000\054" +
    "\003\uff6b\023\uff6b\025\uff6b\044\uff6b\046\uff6b\050\uff6b\051" +
    "\uff6b\056\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\070\uff6b" +
    "\071\uff6b\072\uff6b\073\uff6b\074\uff6b\075\uff6b\076\uff6b\077" +
    "\uff6b\100\uff6b\001\002\000\020\046\214\056\173\064\200" +
    "\065\174\066\176\067\171\070\175\001\002\000\054\003" +
    "\uff87\023\uff87\025\uff87\044\uff87\046\uff87\050\uff87\051\uff87" +
    "\056\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071" +
    "\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077\uff87" +
    "\100\uff87\001\002\000\004\010\216\001\002\000\040\003" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\017\uffc2" +
    "\024\uffc2\026\uffc2\036\uffc2\037\uffc2\040\uffc2\103\uffc2\104" +
    "\uffc2\105\uffc2\001\002\000\006\003\220\017\221\001\002" +
    "\000\004\046\uffbb\001\002\000\006\003\223\045\222\001" +
    "\002\000\024\003\246\036\156\037\162\040\167\041\155" +
    "\042\157\043\154\045\163\103\166\001\002\000\022\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\045\uffb9" +
    "\103\uffb9\001\002\000\022\036\156\037\162\040\167\041" +
    "\155\042\157\043\154\045\163\103\166\001\002\000\004" +
    "\046\244\001\002\000\042\003\237\044\231\056\173\064" +
    "\200\065\174\066\176\067\171\070\175\071\241\072\235" +
    "\073\233\074\227\075\230\076\236\077\232\100\234\001" +
    "\002\000\022\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74" +
    "\043\uff74\045\uff74\103\uff74\001\002\000\022\036\uff70\037" +
    "\uff70\040\uff70\041\uff70\042\uff70\043\uff70\045\uff70\103\uff70" +
    "\001\002\000\022\036\uff73\037\uff73\040\uff73\041\uff73\042" +
    "\uff73\043\uff73\045\uff73\103\uff73\001\002\000\022\036\uff6e" +
    "\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\045\uff6e\103" +
    "\uff6e\001\002\000\022\036\uff75\037\uff75\040\uff75\041\uff75" +
    "\042\uff75\043\uff75\045\uff75\103\uff75\001\002\000\022\036" +
    "\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\045\uff6d" +
    "\103\uff6d\001\002\000\022\036\uff71\037\uff71\040\uff71\041" +
    "\uff71\042\uff71\043\uff71\045\uff71\103\uff71\001\002\000\022" +
    "\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\045" +
    "\uff6f\103\uff6f\001\002\000\022\036\156\037\162\040\167" +
    "\041\155\042\157\043\154\045\163\103\166\001\002\000" +
    "\022\036\156\037\162\040\167\041\155\042\157\043\154" +
    "\045\163\103\166\001\002\000\022\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\045\uff72\103\uff72\001\002" +
    "\000\020\046\uff82\056\173\064\200\065\174\066\176\067" +
    "\171\070\175\001\002\000\020\046\uff81\056\173\064\200" +
    "\065\174\066\176\067\171\070\175\001\002\000\040\003" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8\017\uffb8" +
    "\024\uffb8\026\uffb8\036\uffb8\037\uffb8\040\uffb8\103\uffb8\104" +
    "\uffb8\105\uffb8\001\002\000\004\046\251\001\002\000\004" +
    "\046\uffb7\001\002\000\004\046\250\001\002\000\040\003" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6\017\uffb6" +
    "\024\uffb6\026\uffb6\036\uffb6\037\uffb6\040\uffb6\103\uffb6\104" +
    "\uffb6\105\uffb6\001\002\000\040\003\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\015\uffbc\017\uffbc\024\uffbc\026\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\103\uffbc\104\uffbc\105\uffbc\001\002" +
    "\000\004\046\253\001\002\000\040\003\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\015\uffba\017\uffba\024\uffba\026\uffba" +
    "\036\uffba\037\uffba\040\uffba\103\uffba\104\uffba\105\uffba\001" +
    "\002\000\024\003\263\036\156\037\162\040\167\041\155" +
    "\042\157\043\154\045\163\103\166\001\002\000\030\003" +
    "\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99" +
    "\045\uff99\046\uff99\050\uff99\103\uff99\001\002\000\030\003" +
    "\263\036\156\037\162\040\167\041\155\042\157\043\154" +
    "\045\163\046\261\050\uff95\103\166\001\002\000\004\050" +
    "\uff98\001\002\000\010\003\266\046\uff90\051\267\001\002" +
    "\000\004\050\uff96\001\002\000\004\046\265\001\002\000" +
    "\010\003\uff8e\046\uff8e\051\uff8e\001\002\000\024\003\uff8f" +
    "\046\uff8f\051\uff8f\056\173\064\200\065\174\066\176\067" +
    "\171\070\175\001\002\000\004\050\uff97\001\002\000\024" +
    "\003\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\045\uff92\103\uff92\001\002\000\024\003\263\036\156" +
    "\037\162\040\167\041\155\042\157\043\154\045\163\103" +
    "\166\001\002\000\004\046\uff94\001\002\000\004\046\uff93" +
    "\001\002\000\024\003\263\036\156\037\162\040\167\041" +
    "\155\042\157\043\154\045\163\103\166\001\002\000\004" +
    "\046\uff91\001\002\000\004\046\275\001\002\000\004\050" +
    "\uff9a\001\002\000\010\003\306\046\310\103\307\001\002" +
    "\000\010\046\uffa2\050\uffa2\103\uffa2\001\002\000\004\050" +
    "\uffa5\001\002\000\010\046\304\050\uff9b\103\303\001\002" +
    "\000\004\050\uffa1\001\002\000\004\046\305\001\002\000" +
    "\004\050\uff9c\001\002\000\004\050\uff9d\001\002\000\010" +
    "\046\uffa0\050\uffa0\103\uffa0\001\002\000\006\003\311\046" +
    "\312\001\002\000\004\050\uffa4\001\002\000\004\050\uff9e" +
    "\001\002\000\004\050\uffa3\001\002\000\010\046\304\050" +
    "\uff9b\103\303\001\002\000\004\050\uff9f\001\002\000\040" +
    "\003\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\017" +
    "\uffd7\024\uffd7\026\uffd7\036\uffd7\037\uffd7\040\uffd7\103\uffd7" +
    "\104\uffd7\105\uffd7\001\002\000\022\036\156\037\162\040" +
    "\167\041\155\042\157\043\154\045\163\103\166\001\002" +
    "\000\004\010\uffbf\001\002\000\004\010\321\001\002\000" +
    "\040\003\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe" +
    "\017\uffbe\024\uffbe\026\uffbe\036\uffbe\037\uffbe\040\uffbe\103" +
    "\uffbe\104\uffbe\105\uffbe\001\002\000\004\046\323\001\002" +
    "\000\004\025\324\001\002\000\004\007\325\001\002\000" +
    "\026\003\141\010\uffd6\011\125\012\142\015\123\024\147" +
    "\026\130\103\127\104\135\105\133\001\002\000\040\003" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\017\uffc0" +
    "\024\uffc0\026\uffc0\036\uffc0\037\uffc0\040\uffc0\103\uffc0\104" +
    "\uffc0\105\uffc0\001\002\000\004\010\330\001\002\000\040" +
    "\003\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\017" +
    "\uffbd\024\uffbd\026\uffbd\036\uffbd\037\uffbd\040\uffbd\103\uffbd" +
    "\104\uffbd\105\uffbd\001\002\000\022\036\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\045\uff7a\103\uff7a\001\002" +
    "\000\022\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043" +
    "\uff78\045\uff78\103\uff78\001\002\000\022\036\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\045\uff77\103\uff77\001" +
    "\002\000\022\036\156\037\162\040\167\041\155\042\157" +
    "\043\154\045\163\103\166\001\002\000\022\036\uff79\037" +
    "\uff79\040\uff79\041\uff79\042\uff79\043\uff79\045\uff79\103\uff79" +
    "\001\002\000\022\036\uff76\037\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\045\uff76\103\uff76\001\002\000\020\050\uff8d" +
    "\056\173\064\200\065\174\066\176\067\171\070\175\001" +
    "\002\000\012\003\uffdd\007\uffdd\020\uffdd\021\uffdd\001\002" +
    "\000\022\036\156\037\162\040\167\041\155\042\157\043" +
    "\154\045\163\103\166\001\002\000\004\010\uffca\001\002" +
    "\000\004\010\344\001\002\000\040\003\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\015\uffc9\017\uffc9\024\uffc9\026\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\103\uffc9\104\uffc9\105\uffc9\001" +
    "\002\000\004\046\uffc8\001\002\000\004\046\347\001\002" +
    "\000\004\022\350\001\002\000\004\007\351\001\002\000" +
    "\030\003\ufffa\005\012\010\ufffa\011\ufffa\012\ufffa\015\ufffa" +
    "\024\ufffa\026\ufffa\103\ufffa\104\ufffa\105\ufffa\001\002\000" +
    "\040\003\uffc5\010\uffc5\011\uffc5\012\uffc5\013\353\015\uffc5" +
    "\017\uffc5\024\uffc5\026\uffc5\036\uffc5\037\uffc5\040\uffc5\103" +
    "\uffc5\104\uffc5\105\uffc5\001\002\000\004\007\355\001\002" +
    "\000\040\003\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\015" +
    "\uffcb\017\uffcb\024\uffcb\026\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\103\uffcb\104\uffcb\105\uffcb\001\002\000\026\003\141\010" +
    "\uffd6\011\125\012\142\015\123\024\147\026\130\103\127" +
    "\104\135\105\133\001\002\000\004\010\357\001\002\000" +
    "\040\003\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6" +
    "\017\uffc6\024\uffc6\026\uffc6\036\uffc6\037\uffc6\040\uffc6\103" +
    "\uffc6\104\uffc6\105\uffc6\001\002\000\026\003\141\010\uffd6" +
    "\011\125\012\142\015\123\024\147\026\130\103\127\104" +
    "\135\105\133\001\002\000\004\010\362\001\002\000\040" +
    "\003\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\017" +
    "\uffc7\024\uffc7\026\uffc7\036\uffc7\037\uffc7\040\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\001\002\000\040\003\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\015\uffd4\017\uffd4\024\uffd4\026\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\103\uffd4\104\uffd4\105\uffd4\001" +
    "\002\000\004\016\uffb4\001\002\000\006\003\366\016\367" +
    "\001\002\000\014\003\uffb2\013\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\001\002\000\014\003\372\013\376\036\375\037\370" +
    "\040\371\001\002\000\004\047\uffa8\001\002\000\004\047" +
    "\uffa7\001\002\000\040\003\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\015\uffae\017\uffae\024\uffae\026\uffae\036\uffae\037" +
    "\uffae\040\uffae\103\uffae\104\uffae\105\uffae\001\002\000\004" +
    "\047\u0103\001\002\000\040\003\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\015\uffb5\017\uffb5\024\uffb5\026\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\103\uffb5\104\uffb5\105\uffb5\001\002\000" +
    "\004\047\uffa6\001\002\000\004\047\u0102\001\002\000\040" +
    "\003\141\010\uffd6\011\125\012\142\013\uffd6\015\123\017" +
    "\uffd6\024\147\026\130\036\uffd6\037\uffd6\040\uffd6\103\127" +
    "\104\135\105\133\001\002\000\040\003\372\010\uffb0\011" +
    "\uffb0\012\uffb0\013\376\015\uffb0\017\uffb0\024\uffb0\026\uffb0" +
    "\036\375\037\370\040\371\103\uffb0\104\uffb0\105\uffb0\001" +
    "\002\000\040\003\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\015\uffaf\017\uffaf\024\uffaf\026\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\103\uffaf\104\uffaf\105\uffaf\001\002\000\040\003\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\013\uffa9\015\uffa9\017\uffa9\024" +
    "\uffa9\026\uffa9\036\uffa9\037\uffa9\040\uffa9\103\uffa9\104\uffa9" +
    "\105\uffa9\001\002\000\040\003\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\015\uffaa\017\uffaa\024\uffaa\026\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\103\uffaa\104\uffaa\105\uffaa\001\002\000" +
    "\040\003\141\010\uffd6\011\125\012\142\013\uffd6\015\123" +
    "\017\uffd6\024\147\026\130\036\uffd6\037\uffd6\040\uffd6\103" +
    "\127\104\135\105\133\001\002\000\040\003\372\010\uffab" +
    "\011\uffab\012\uffab\013\376\015\uffab\017\uffab\024\uffab\026" +
    "\uffab\036\375\037\370\040\371\103\uffab\104\uffab\105\uffab" +
    "\001\002\000\040\003\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\015\uffac\017\uffac\024\uffac\026\uffac\036\uffac\037\uffac" +
    "\040\uffac\103\uffac\104\uffac\105\uffac\001\002\000\040\003" +
    "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\015\uffad\017\uffad" +
    "\024\uffad\026\uffad\036\uffad\037\uffad\040\uffad\103\uffad\104" +
    "\uffad\105\uffad\001\002\000\014\003\372\013\376\036\375" +
    "\037\370\040\371\001\002\000\040\003\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\015\uffb1\017\uffb1\024\uffb1\026\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\103\uffb1\104\uffb1\105\uffb1\001" +
    "\002\000\004\016\u010b\001\002\000\014\003\372\013\376" +
    "\036\375\037\370\040\371\001\002\000\040\003\uffb3\010" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3\017\uffb3\024\uffb3" +
    "\026\uffb3\036\uffb3\037\uffb3\040\uffb3\103\uffb3\104\uffb3\105" +
    "\uffb3\001\002\000\006\046\uffd8\051\u010e\001\002\000\022" +
    "\006\037\027\034\030\032\031\033\032\027\033\035\034" +
    "\036\035\031\001\002\000\004\046\uffda\001\002\000\004" +
    "\046\uffd9\001\002\000\004\010\u0112\001\002\000\012\003" +
    "\uffe2\007\uffe2\020\uffe2\021\uffe2\001\002\000\004\045\u0114" +
    "\001\002\000\024\006\037\027\034\030\032\031\033\032" +
    "\027\033\035\034\036\035\031\046\uffdb\001\002\000\004" +
    "\046\u0116\001\002\000\004\047\u0117\001\002\000\022\006" +
    "\037\027\034\030\032\031\033\032\027\033\035\034\036" +
    "\035\031\001\002\000\004\007\u0119\001\002\000\032\003" +
    "\ufffa\005\012\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa" +
    "\024\ufffa\026\ufffa\103\ufffa\104\ufffa\105\ufffa\001\002\000" +
    "\012\003\uffe4\007\uffe4\020\uffe4\021\uffe4\001\002\000\030" +
    "\003\ufff1\010\ufff1\011\ufff1\012\ufff1\014\057\015\ufff1\024" +
    "\ufff1\026\ufff1\103\ufff1\104\ufff1\105\ufff1\001\002\000\026" +
    "\003\141\010\uffd6\011\125\012\142\015\123\024\147\026" +
    "\130\103\127\104\135\105\133\001\002\000\004\010\u011e" +
    "\001\002\000\012\003\uffde\007\uffde\020\uffde\021\uffde\001" +
    "\002\000\026\003\141\010\uffd6\011\125\012\142\015\123" +
    "\024\147\026\130\103\127\104\135\105\133\001\002\000" +
    "\004\010\u0121\001\002\000\004\002\ufffd\001\002\000\016" +
    "\003\ufffa\005\012\007\ufffa\014\ufffa\020\ufffa\021\ufffa\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\u0121\001\001\000\010\003\012" +
    "\004\007\005\010\001\001\000\002\001\001\000\004\006" +
    "\055\001\001\000\006\007\015\030\016\001\001\000\002" +
    "\001\001\000\004\100\053\001\001\000\004\011\020\001" +
    "\001\000\002\001\001\000\006\007\017\030\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\023\001\001\000\002\001\001\000\010\032\027" +
    "\033\025\034\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\047" +
    "\033\025\034\037\001\001\000\002\001\001\000\010\032" +
    "\051\033\025\034\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\075\013\103\014\101\015\077\001\001\000\006\010\061" +
    "\031\060\001\001\000\002\001\001\000\006\010\062\031" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\072\001\001\000\004\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0110\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\104\013\103\014\101" +
    "\015\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\114\021\113\032\112\033\025\034\037\001\001" +
    "\000\004\103\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\117\001\001\000\004\005\120\001\001\000" +
    "\002\001\001\000\004\006\121\001\001\000\032\023\125" +
    "\024\130\025\123\026\135\035\142\036\133\037\144\040" +
    "\145\045\131\046\143\054\136\056\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\333\001\001\000\002\001\001\000\032" +
    "\023\314\024\130\025\123\026\135\035\142\036\133\037" +
    "\144\040\145\045\131\046\143\054\136\056\137\001\001" +
    "\000\002\001\001\000\004\047\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\023\216\024" +
    "\130\025\123\026\135\035\142\036\133\037\144\040\145" +
    "\045\131\046\143\054\136\056\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\214\001\001\000\002\001" +
    "\001\000\016\027\163\060\167\061\152\062\160\063\157" +
    "\064\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\163\060\212\061\152\062\160\063\157\064\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\207\001" +
    "\001\000\002\001\001\000\004\066\171\001\001\000\002" +
    "\001\001\000\016\027\163\060\206\061\152\062\160\063" +
    "\157\064\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\163\060" +
    "\200\061\152\062\160\063\157\064\164\001\001\000\002" +
    "\001\001\000\004\066\171\001\001\000\004\055\203\001" +
    "\001\000\032\023\204\024\130\025\123\026\135\035\142" +
    "\036\133\037\144\040\145\045\131\046\143\054\136\056" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\251\001\001\000\002\001\001" +
    "\000\020\027\163\060\225\061\152\062\160\063\157\064" +
    "\164\065\244\001\001\000\004\110\223\001\001\000\020" +
    "\027\163\060\225\061\152\062\160\063\157\064\164\065" +
    "\224\001\001\000\002\001\001\000\006\066\171\070\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\163\060" +
    "\242\061\152\062\160\063\157\064\164\001\001\000\016" +
    "\027\163\060\241\061\152\062\160\063\157\064\164\001" +
    "\001\000\002\001\001\000\004\066\171\001\001\000\004" +
    "\066\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\027\163\050\273\060\263\061\152\062\160\063\157" +
    "\064\164\076\257\001\001\000\004\117\255\001\001\000" +
    "\024\027\163\050\261\060\263\061\152\062\160\063\157" +
    "\064\164\074\256\076\257\001\001\000\002\001\001\000" +
    "\004\075\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\171\001\001\000\002\001" +
    "\001\000\004\120\271\001\001\000\022\027\163\050\270" +
    "\060\263\061\152\062\160\063\157\064\164\076\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\027\163" +
    "\050\272\060\263\061\152\062\160\063\157\064\164\076" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\115\300\001\001\000" +
    "\002\001\001\000\004\073\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\116\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\027\163" +
    "\060\225\061\152\062\160\063\157\064\164\065\321\001" +
    "\001\000\004\106\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\325\001\001\000\032\023\326\024\130\025\123\026\135" +
    "\035\142\036\133\037\144\040\145\045\131\046\143\054" +
    "\136\056\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\027\163\060\336\061\152\062\160" +
    "\063\157\064\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\171\001\001\000\002\001\001\000\022" +
    "\027\163\053\345\060\225\061\152\062\160\063\157\064" +
    "\164\065\344\001\001\000\004\104\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\351\001\001\000\004" +
    "\005\357\001\001\000\004\052\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\023\355\024\130\025\123" +
    "\026\135\035\142\036\133\037\144\040\145\045\131\046" +
    "\143\054\136\056\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\023\360\024\130\025\123\026\135\035" +
    "\142\036\133\037\144\040\145\045\131\046\143\054\136" +
    "\056\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\112\u0109\001\001\000\002\001\001" +
    "\000\004\113\u0107\001\001\000\010\041\376\042\373\043" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\023\377\024\130" +
    "\025\123\026\135\035\142\036\133\037\144\040\145\045" +
    "\131\046\143\054\136\056\137\001\001\000\010\041\376" +
    "\042\u0100\043\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\023\u0104\024\130\025\123" +
    "\026\135\035\142\036\133\037\144\040\145\045\131\046" +
    "\143\054\136\056\137\001\001\000\012\041\376\042\u0105" +
    "\043\372\072\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\041\376\042\u0108\043\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\041\376\042\u010b\043" +
    "\372\001\001\000\002\001\001\000\004\022\u010e\001\001" +
    "\000\012\021\u010f\032\112\033\025\034\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\u0114\021\113\032" +
    "\112\033\025\034\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\u0117\033\025\034\037\001\001\000" +
    "\004\016\u0119\001\001\000\004\005\u011a\001\001\000\002" +
    "\001\001\000\004\006\u011b\001\001\000\032\023\u011c\024" +
    "\130\025\123\026\135\035\142\036\133\037\144\040\145" +
    "\045\131\046\143\054\136\056\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\023\u011f\024\130\025\123" +
    "\026\135\035\142\036\133\037\144\040\145\045\131\046" +
    "\143\054\136\056\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\u0122\004\007\005\010\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String errorActual = "";
    
    
    public void report_fatal_error(String message, Object info)
    {
        System.err.println("Error fatal. Imposible recuperarse.\n");
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) {}
	
    public void syntax_error(Symbol st)
    {
        //report_error("Syntax Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right , null);
        if (cur_token.value != null)
        {
            if (cur_token.sym == sym.error)
            {
                errorActual += "Lexer Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right + " -------- ";
                //report_error(errorActual, null);
            }
            else
            {
                errorActual += "Syntax Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right + " -------- ";
                //report_error(errorActual,null);
    
            }
        }
        //errorActual = "";
    }


    public void errorMensaje(String msg)
    {
        errorActual += msg;
        report_error(errorActual, null);
        //System.out.println(msg);
        if (errorActual.contains("Lexer")) 
        {
            
        }     
        errorActual = "";
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LITERAL ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LITERAL ::= _flotante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LITERAL ::= _false 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LITERAL ::= _true 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LITERAL ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LITERAL ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO_SIMPLE ::= _real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO_SIMPLE ::= _shortint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO_SIMPLE ::= _longint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO_SIMPLE ::= _char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO_SIMPLE ::= _boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO_SIMPLE ::= _int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO_SIMPLE ::= _string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPO_COMPUESTO ::= _array _bra_aper _entero _bra_cerr _of TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_COMPUESTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPO_COMPUESTO ::= _array _bra_aper _entero _rango_dos_puntos _entero _bra_cerr _of TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_COMPUESTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPO_DATO ::= TIPO_SIMPLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPO_DATO ::= TIPO_COMPUESTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPERADOR_UNARIO ::= _op_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPERADOR_UNARIO ::= _op_inc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPERADOR_BOOLEAN ::= _NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPERADOR_BOOLEAN ::= _AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPERADOR_BOOLEAN ::= _OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPERADOR_BOOLEAN ::= _distinto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERADOR_BOOLEAN ::= _mayor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERADOR_BOOLEAN ::= _mayor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERADOR_BOOLEAN ::= _igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERADOR_BOOLEAN ::= _menor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERADOR_BOOLEAN ::= _menor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERADOR_ARITMETICO_ASIGN ::= _asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERADOR_ARITMETICO_ASIGN ::= _op_mult_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERADOR_ARITMETICO_ASIGN ::= _op_div_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERADOR_ARITMETICO_ASIGN ::= _op_menos_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERADOR_ARITMETICO_ASIGN ::= _op_mas_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERADOR_ARITMETICO ::= _op_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERADOR_ARITMETICO ::= _op_mod 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERADOR_ARITMETICO ::= _op_division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERADOR_ARITMETICO ::= _op_multi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERADOR_ARITMETICO ::= _op_resta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERADOR_ARITMETICO ::= _op_suma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION_CONDICION ::= EXPRESION error EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_CONDICION",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION_CONDICION ::= EXPRESION OPERADOR_BOOLEAN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_CONDICION",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION_BASE ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION_BASE ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION_UNARIA ::= _id OPERADOR_UNARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_UNARIA",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION_BINARIA ::= EXPRESION OPERADOR_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BINARIA",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION_COMPUESTA ::= _parentesisAbre EXPRESION _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_COMPUESTA",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= EXPRESION_UNARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= EXPRESION_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= EXPRESION_BINARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= EXPRESION_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ASIGNACION ::= error 
            {
              Object RESULT =null;
		parser.errorMensaje("Error en la declaración ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ASIGNACION ::= _id OPERADOR_ARITMETICO_ASIGN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTENIDO_WRITE ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.errorMensaje("Error en sentencia WRITE, parametro no valido");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONTENIDO_WRITE ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMETROS_WRITE_Aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE_Aux",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMETROS_WRITE_Aux ::= error NT$17 PARAMETROS_WRITE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE_Aux",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$17 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia WRITE, falta ',' ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMETROS_WRITE_Aux ::= _coma PARAMETROS_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE_Aux",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETROS_WRITE ::= CONTENIDO_WRITE PARAMETROS_WRITE_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCION_WRITE_Err ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE_Err",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCION_WRITE_Err ::= _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE_Err",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCION_WRITE_Err ::= PARAMETROS_WRITE _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE_Err",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCION_WRITE ::= _write error NT$16 FUNCION_WRITE_Err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$16 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia WRITE, falto abrir parentesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCION_WRITE ::= _write _parentesisAbre PARAMETROS_WRITE _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCION_READ_AUX_Err ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX_Err",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCION_READ_AUX_Err ::= _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX_Err",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCION_READ_AUX_Err ::= _id _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX_Err",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCION_READ_AUX ::= _parentesisAbre _id error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.errorMensaje("Error en sentencia READ, falta cerrar patentesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCION_READ_AUX ::= _parentesisAbre error NT$15 FUNCION_READ_AUX_Err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$15 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia READ, Problemas con los parametros de la instruccion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNCION_READ_AUX ::= error NT$14 FUNCION_READ_AUX_Err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$14 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia READ, falto abrir parentesis");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCION_READ_AUX ::= _parentesisAbre _id _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCION_READ_AUX ::= _parentesisAbre _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCION_READ ::= _read FUNCION_READ_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONSTANTE_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONSTANTE_CASE ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONSTANTE_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASE ::= _else _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASE ::= CONSTANTE_CASE _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASES_err ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_err",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASES_err ::= CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_err",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASES ::= error NT$13 CUERPO_INSTRUCCIONES CASES_err 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$13 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en opcion de sentencia CASE, CONSTANTE invalida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASES ::= CASE CUERPO_INSTRUCCIONES CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASES ::= CASE CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_CASE ::= _case _id error NT$12 CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia CASE, se espera la Palabra Reservada OF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_CASE ::= _case error NT$11 _of CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia CASE, IDENTIFICADOR invalido");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_CASE ::= _case _id _of CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until _parentesisAbre error NT$10 _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$10 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia REPEAT, Expresion Condicional NO Valida");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until error NT$9 EXPRESION_CONDICION _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia REPEAT, Falta '(' en la Expresion Condicional");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES error NT$8 _parentesisCierra 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$8 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en sentencia REPEAT, Falta Palabra Reservada UNTIL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until _parentesisAbre EXPRESION_CONDICION _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE_WHILE ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INICIO_WHILE ::= _while error NT$7 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$7 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Existe un error dentro del WHILE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INICIO_WHILE ::= _while _parentesisAbre EXPRESION_CONDICION _parentesisCierra _do BLOQUE_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE_FOR ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INICIO_FOR ::= _for error NT$6 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_FOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Existe un error dentro del FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INICIO_FOR ::= _for _id _asignacion EXPRESION _to EXPRESION _do BLOQUE_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_FOR",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE_ELSE ::= _else _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE_IF ::= _begin BLOQUE_DECLARACION_VARIABLES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= EXPRESION_CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_IF ::= _if error NT$5 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$5 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Existe un error dentro del IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_IF ::= _if _parentesisAbre CONDICION _parentesisCierra _then BLOQUE_IF BLOQUE_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURA_CONTROL ::= INICIO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESTRUCTURA_CONTROL ::= INICIO_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESTRUCTURA_CONTROL ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ESTRUCTURA_CONTROL ::= SENTENCIA_REPEAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ESTRUCTURA_CONTROL ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCION ::= FUNCION_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= FUNCION_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= INSTRUCCION _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CUERPO_INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPO_INSTRUCCIONES ::= SENTENCIA CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROS_Aux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROS_Aux2 ::= _coma PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROS_Aux ::= TIPO_DATO _id PARAMETROS_Aux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESTRUCTURA_PROCEDIMIENTO ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROCEDIMIENTO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTRUCTURA_FUNCION ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_PROCEDIMIENTO ::= _procedure _id error NT$4 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_PROCEDIMIENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Mala definición del procedimiento");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_PROCEDIMIENTO ::= _procedure _id _parentesisAbre PARAMETROS _parentesisCierra ESTRUCTURA_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_PROCEDIMIENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_FUNCION ::= error NT$3 _end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Mala definición de la función");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_FUNCION ::= _function _id _parentesisAbre PARAMETROS _parentesisCierra _dos_puntos TIPO_DATO ESTRUCTURA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACIONES_FUNC_PROC ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACIONES_FUNC_PROC ::= FUNCION_O_PROCEDIMIENTO DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LITERAL_CASE ::= _flotante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LITERAL_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LITERAL_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONSTANTE ::= _id error NT$2 LITERAL_CASE _punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Error en la declaración de constante");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONSTANTE ::= _id _igual LITERAL_CASE _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_CONSTANTES ::= CONSTANTE DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_CONSTANTES ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE_DECLARACION_CONSTANTES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE_DECLARACION_CONSTANTES ::= _const DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_ID_CONSECUTIVO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_ID_CONSECUTIVO ::= _coma _id DECLARACION_ID_CONSECUTIVO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE ::= error NT$1 _punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Error en la declaración de variable");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLE ::= _id DECLARACION_ID_CONSECUTIVO _dos_puntos TIPO_DATO _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_VARIABLES ::= VARIABLE DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION_VARIABLES ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE_DECLARACION_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_DECLARACION_VARIABLES ::= _var DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_PROGRAMA ::= DECLARACIONES _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_PROGRAMA ::= _program error NT$0 BLOQUE_PROGRAMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
parser.errorMensaje("Debe tener nombre");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO_PROGRAMA ::= _program _id BLOQUE_PROGRAMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

