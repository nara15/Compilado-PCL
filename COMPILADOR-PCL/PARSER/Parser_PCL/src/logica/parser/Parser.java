
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 13 14:43:37 CST 2016
//----------------------------------------------------

package logica.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 13 14:43:37 CST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\004\005\000\002\005\004\000\002\005\002" +
    "\000\002\007\003\000\002\007\004\000\002\030\007\000" +
    "\002\011\005\000\002\011\002\000\002\006\004\000\002" +
    "\006\002\000\002\010\003\000\002\010\004\000\002\031" +
    "\006\000\002\072\002\000\002\031\007\000\002\031\006" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\012\004\000\002\012\002\000\002\013\003\000\002" +
    "\013\003\000\002\014\012\000\002\015\010\000\002\016" +
    "\007\000\002\017\007\000\002\020\003\000\002\020\002" +
    "\000\002\021\005\000\002\022\004\000\002\022\002\000" +
    "\002\023\004\000\002\023\002\000\002\024\003\000\002" +
    "\024\004\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\011\000" +
    "\002\073\002\000\002\036\012\000\002\054\003\000\002" +
    "\052\005\000\002\053\006\000\002\053\002\000\002\055" +
    "\012\000\002\056\005\000\002\057\006\000\002\060\005" +
    "\000\002\037\006\000\002\040\006\000\002\042\004\000" +
    "\002\042\005\000\002\041\004\000\002\041\004\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\046" +
    "\004\000\002\047\004\000\002\047\005\000\002\045\006" +
    "\000\002\050\003\000\002\050\005\000\002\051\003\000" +
    "\002\051\003\000\002\026\005\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\063\005\000\002\064" +
    "\005\000\002\065\003\000\002\065\003\000\002\066\005" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\012\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\004\005\001\002\000\004\002\335\001" +
    "\002\000\014\005\010\007\ufffc\014\ufffc\020\ufffc\021\ufffc" +
    "\001\002\000\004\007\332\001\002\000\012\007\ufff5\014" +
    "\047\020\ufff5\021\ufff5\001\002\000\004\101\012\001\002" +
    "\000\004\002\000\001\002\000\006\047\ufff7\051\017\001" +
    "\002\000\034\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd" +
    "\015\ufffd\020\ufffd\021\ufffd\024\ufffd\026\ufffd\101\ufffd\102" +
    "\ufffd\103\ufffd\001\002\000\034\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\014\ufffb\015\ufffb\020\ufffb\021\ufffb\024\ufffb\026" +
    "\ufffb\101\012\102\ufffb\103\ufffb\001\002\000\034\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\020\ufffa\021" +
    "\ufffa\024\ufffa\026\ufffa\101\ufffa\102\ufffa\103\ufffa\001\002" +
    "\000\004\047\022\001\002\000\004\101\020\001\002\000" +
    "\006\047\ufff7\051\017\001\002\000\004\047\ufff8\001\002" +
    "\000\022\006\034\027\031\030\030\031\027\032\024\033" +
    "\032\034\033\035\026\001\002\000\010\007\uff99\050\uff99" +
    "\101\uff99\001\002\000\010\007\uff91\050\uff91\101\uff91\001" +
    "\002\000\004\050\045\001\002\000\010\007\uff90\050\uff90" +
    "\101\uff90\001\002\000\010\007\uff92\050\uff92\101\uff92\001" +
    "\002\000\010\007\uff95\050\uff95\101\uff95\001\002\000\004" +
    "\052\036\001\002\000\010\007\uff93\050\uff93\101\uff93\001" +
    "\002\000\010\007\uff94\050\uff94\101\uff94\001\002\000\010" +
    "\007\uff96\050\uff96\101\uff96\001\002\000\010\007\uff98\050" +
    "\uff98\101\uff98\001\002\000\004\036\037\001\002\000\004" +
    "\055\040\001\002\000\004\036\041\001\002\000\004\053" +
    "\042\001\002\000\004\016\043\001\002\000\022\006\034" +
    "\027\031\030\030\031\027\032\024\033\032\034\033\035" +
    "\026\001\002\000\010\007\uff97\050\uff97\101\uff97\001\002" +
    "\000\034\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\020\ufff9\021\ufff9\024\ufff9\026\ufff9\101\ufff9\102\ufff9" +
    "\103\ufff9\001\002\000\010\007\uffea\020\072\021\074\001" +
    "\002\000\004\101\050\001\002\000\006\003\054\044\055" +
    "\001\002\000\032\007\ufff4\010\ufff4\011\ufff4\012\ufff4\015" +
    "\ufff4\020\ufff4\021\ufff4\024\ufff4\026\ufff4\101\050\102\ufff4" +
    "\103\ufff4\001\002\000\032\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\015\ufff6\020\ufff6\021\ufff6\024\ufff6\026\ufff6\101\ufff6" +
    "\102\ufff6\103\ufff6\001\002\000\032\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\015\ufff3\020\ufff3\021\ufff3\024\ufff3\026\ufff3" +
    "\101\ufff3\102\ufff3\103\ufff3\001\002\000\010\036\ufff1\037" +
    "\ufff1\041\ufff1\001\002\000\012\003\061\036\062\037\056" +
    "\041\057\001\002\000\004\050\uffed\001\002\000\004\050" +
    "\uffec\001\002\000\004\050\064\001\002\000\004\050\063" +
    "\001\002\000\004\050\uffee\001\002\000\032\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\015\uffef\020\uffef\021\uffef\024\uffef" +
    "\026\uffef\101\uffef\102\uffef\103\uffef\001\002\000\032\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2\020\ufff2\021\ufff2" +
    "\024\ufff2\026\ufff2\101\ufff2\102\ufff2\103\ufff2\001\002\000" +
    "\010\036\062\037\056\041\057\001\002\000\004\050\067" +
    "\001\002\000\032\007\ufff0\010\ufff0\011\ufff0\012\ufff0\015" +
    "\ufff0\020\ufff0\021\ufff0\024\ufff0\026\ufff0\101\ufff0\102\ufff0" +
    "\103\ufff0\001\002\000\004\007\ufffe\001\002\000\010\007" +
    "\uffe8\020\uffe8\021\uffe8\001\002\000\004\101\316\001\002" +
    "\000\010\007\uffe9\020\uffe9\021\uffe9\001\002\000\004\101" +
    "\077\001\002\000\010\007\uffea\020\072\021\074\001\002" +
    "\000\004\007\uffeb\001\002\000\004\045\100\001\002\000" +
    "\024\006\034\027\031\030\030\031\027\032\024\033\032" +
    "\034\033\035\026\046\uffe2\001\002\000\004\101\312\001" +
    "\002\000\004\046\uffe3\001\002\000\004\046\104\001\002" +
    "\000\004\007\105\001\002\000\030\005\010\010\ufffc\011" +
    "\ufffc\012\ufffc\014\ufffc\015\ufffc\024\ufffc\026\ufffc\101\ufffc" +
    "\102\ufffc\103\ufffc\001\002\000\010\007\uffe6\020\uffe6\021" +
    "\uffe6\001\002\000\026\010\ufff5\011\ufff5\012\ufff5\014\047" +
    "\015\ufff5\024\ufff5\026\ufff5\101\ufff5\102\ufff5\103\ufff5\001" +
    "\002\000\024\010\uffdd\011\113\012\127\015\111\024\134" +
    "\026\116\101\115\102\123\103\121\001\002\000\004\101" +
    "\275\001\002\000\004\050\274\001\002\000\004\045\250" +
    "\001\002\000\004\010\247\001\002\000\014\057\241\060" +
    "\243\061\240\062\242\063\245\001\002\000\022\036\141" +
    "\037\142\040\153\041\137\042\144\043\140\045\146\101" +
    "\151\001\002\000\036\010\uffdd\011\113\012\127\013\uffdd" +
    "\015\111\017\uffdd\024\134\026\116\036\uffdd\037\uffdd\040" +
    "\uffdd\101\115\102\123\103\121\001\002\000\004\050\uffd9" +
    "\001\002\000\004\045\224\001\002\000\036\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\015\uffd7\017\uffd7\024\uffd7\026\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\101\uffd7\102\uffd7\103\uffd7\001" +
    "\002\000\004\045\214\001\002\000\004\050\uffd8\001\002" +
    "\000\036\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\017" +
    "\uffd4\024\uffd4\026\uffd4\036\uffd4\037\uffd4\040\uffd4\101\uffd4" +
    "\102\uffd4\103\uffd4\001\002\000\036\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\015\uffd3\017\uffd3\024\uffd3\026\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\101\uffd3\102\uffd3\103\uffd3\001\002\000" +
    "\024\011\113\012\127\015\111\017\uffdd\024\134\026\116" +
    "\101\115\102\123\103\121\001\002\000\036\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\015\uffdc\017\uffdc\024\uffdc\026\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\101\uffdc\102\uffdc\103\uffdc\001" +
    "\002\000\004\050\uffda\001\002\000\036\010\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\015\uffd6\017\uffd6\024\uffd6\026\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\101\uffd6\102\uffd6\103\uffd6\001\002" +
    "\000\036\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5\017" +
    "\uffd5\024\uffd5\026\uffd5\036\uffd5\037\uffd5\040\uffd5\101\uffd5" +
    "\102\uffd5\103\uffd5\001\002\000\004\101\135\001\002\000" +
    "\004\063\136\001\002\000\022\036\141\037\142\040\153" +
    "\041\137\042\144\043\140\045\146\101\151\001\002\000" +
    "\104\010\uff8b\011\uff8b\012\uff8b\013\uff8b\015\uff8b\017\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\036\uff8b\037\uff8b\040" +
    "\uff8b\044\uff8b\046\uff8b\050\uff8b\056\uff8b\064\uff8b\065\uff8b" +
    "\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074" +
    "\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101\uff8b\102\uff8b" +
    "\103\uff8b\001\002\000\104\010\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\015\uff8c\017\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\044\uff8c\046\uff8c\050\uff8c\056" +
    "\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c" +
    "\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100" +
    "\uff8c\101\uff8c\102\uff8c\103\uff8c\001\002\000\104\010\uff8f" +
    "\011\uff8f\012\uff8f\013\uff8f\015\uff8f\017\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\036\uff8f\037\uff8f\040\uff8f\044\uff8f" +
    "\046\uff8f\050\uff8f\056\uff8f\064\uff8f\065\uff8f\066\uff8f\067" +
    "\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\001" +
    "\002\000\104\010\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e" +
    "\017\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\044\uff8e\046\uff8e\050\uff8e\056\uff8e\064\uff8e" +
    "\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073" +
    "\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e" +
    "\102\uff8e\103\uff8e\001\002\000\104\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\015\uffb3\017\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\036\uffb3\037\uffb3\040\uffb3\044\uffb3\046\uffb3\050" +
    "\uffb3\056\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\001\002\000\104" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\015\uff8d\017\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\044\uff8d\046\uff8d\050\uff8d\056\uff8d\064\uff8d\065\uff8d\066" +
    "\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d" +
    "\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103" +
    "\uff8d\001\002\000\104\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\015\uffb4\017\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\044\uffb4\046\uffb4\050\uffb4\056\uffb4" +
    "\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4" +
    "\101\uffb4\102\uffb4\103\uffb4\001\002\000\022\036\141\037" +
    "\142\040\153\041\137\042\144\043\140\045\146\101\151" +
    "\001\002\000\104\010\uffaf\011\uffaf\012\uffaf\013\uffaf\015" +
    "\uffaf\017\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\044\uffaf\046\uffaf\050\uffaf\056\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101" +
    "\uffaf\102\uffaf\103\uffaf\001\002\000\104\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\015\uffb5\017\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\036\uffb5\037\uffb5\040\uffb5\044\uffb5\046\uffb5" +
    "\050\uffb5\056\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070" +
    "\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5" +
    "\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\001\002\000" +
    "\104\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0\017\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\044\uffb0\046\uffb0\050\uffb0\056\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\103\uffb0\001\002\000\020\023\161\056\156\064\163\065" +
    "\157\066\162\067\154\070\160\001\002\000\104\010\uff8a" +
    "\011\uff8a\012\uff8a\013\uff8a\015\uff8a\017\uff8a\023\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\036\uff8a\037\uff8a\040\uff8a\044\uff8a" +
    "\046\uff8a\050\uff8a\056\uff8a\064\uff8a\065\uff8a\066\uff8a\067" +
    "\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a" +
    "\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\001" +
    "\002\000\022\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\045\uffa9\101\uffa9\001\002\000\022\036\141\037" +
    "\142\040\153\041\137\042\144\043\140\045\146\101\151" +
    "\001\002\000\022\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\045\uffad\101\uffad\001\002\000\022\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\045\uffab\101" +
    "\uffab\001\002\000\022\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\045\uffa8\101\uffa8\001\002\000\022\036" +
    "\141\037\142\040\153\041\137\042\144\043\140\045\146" +
    "\101\151\001\002\000\022\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\045\uffaa\101\uffaa\001\002\000\022" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\045" +
    "\uffac\101\uffac\001\002\000\020\025\165\056\156\064\163" +
    "\065\157\066\162\067\154\070\160\001\002\000\004\007" +
    "\166\001\002\000\024\010\uffdd\011\113\012\127\015\111" +
    "\024\134\026\116\101\115\102\123\103\121\001\002\000" +
    "\036\010\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb\017\uffcb" +
    "\024\uffcb\026\uffcb\036\uffcb\037\uffcb\040\uffcb\101\uffcb\102" +
    "\uffcb\103\uffcb\001\002\000\004\010\171\001\002\000\036" +
    "\010\uffca\011\uffca\012\uffca\013\uffca\015\uffca\017\uffca\024" +
    "\uffca\026\uffca\036\uffca\037\uffca\040\uffca\101\uffca\102\uffca" +
    "\103\uffca\001\002\000\104\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\015\uffb1\017\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\044\uffb1\046\uffb1\050\uffb1\056" +
    "\156\064\163\065\157\066\162\067\154\070\160\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\102\uffb1\103\uffb1\001\002\000\020\046\174" +
    "\056\156\064\163\065\157\066\162\067\154\070\160\001" +
    "\002\000\104\010\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2" +
    "\017\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\044\uffb2\046\uffb2\050\uffb2\056\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2" +
    "\102\uffb2\103\uffb2\001\002\000\004\017\176\001\002\000" +
    "\022\036\141\037\142\040\153\041\137\042\144\043\140" +
    "\045\146\101\151\001\002\000\036\010\uffc7\011\uffc7\012" +
    "\uffc7\013\uffc7\015\uffc7\017\uffc7\024\uffc7\026\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\101\uffc7\102\uffc7\103\uffc7\001\002\000" +
    "\040\044\204\056\156\064\163\065\157\066\162\067\154" +
    "\070\160\071\212\072\203\073\211\074\207\075\210\076" +
    "\206\077\205\100\202\001\002\000\022\036\141\037\142" +
    "\040\153\041\137\042\144\043\140\045\146\101\151\001" +
    "\002\000\022\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\045\uff9a\101\uff9a\001\002\000\022\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\045\uff9e\101\uff9e" +
    "\001\002\000\022\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\045\uffa0\101\uffa0\001\002\000\022\036\uff9b" +
    "\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\045\uff9b\101" +
    "\uff9b\001\002\000\022\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\045\uff9c\101\uff9c\001\002\000\022\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\045\uffa1" +
    "\101\uffa1\001\002\000\022\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\045\uff9d\101\uff9d\001\002\000\022" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\045" +
    "\uffa2\101\uffa2\001\002\000\022\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\045\uff9f\101\uff9f\001\002\000" +
    "\056\010\uffae\011\uffae\012\uffae\013\uffae\015\uffae\017\uffae" +
    "\024\uffae\025\uffae\026\uffae\036\uffae\037\uffae\040\uffae\046" +
    "\uffae\056\156\064\163\065\157\066\162\067\154\070\160" +
    "\101\uffae\102\uffae\103\uffae\001\002\000\006\037\215\101" +
    "\216\001\002\000\006\046\uffb7\051\uffb7\001\002\000\006" +
    "\046\uffb8\051\uffb8\001\002\000\004\046\223\001\002\000" +
    "\006\046\uffba\051\221\001\002\000\006\037\215\101\216" +
    "\001\002\000\004\046\uffb9\001\002\000\004\050\uffbb\001" +
    "\002\000\006\046\227\101\226\001\002\000\004\050\uffbe" +
    "\001\002\000\004\046\230\001\002\000\004\050\uffbd\001" +
    "\002\000\004\050\uffbc\001\002\000\036\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\015\uffde\017\uffde\024\uffde\026\uffde\036" +
    "\uffde\037\uffde\040\uffde\101\uffde\102\uffde\103\uffde\001\002" +
    "\000\004\025\233\001\002\000\004\007\234\001\002\000" +
    "\024\010\uffdd\011\113\012\127\015\111\024\134\026\116" +
    "\101\115\102\123\103\121\001\002\000\036\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\015\uffc9\017\uffc9\024\uffc9\026\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\101\uffc9\102\uffc9\103\uffc9\001" +
    "\002\000\004\010\237\001\002\000\036\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\015\uffc8\017\uffc8\024\uffc8\026\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\101\uffc8\102\uffc8\103\uffc8\001\002" +
    "\000\022\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\045\uffa5\101\uffa5\001\002\000\022\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\045\uffa7\101\uffa7\001" +
    "\002\000\022\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\045\uffa4\101\uffa4\001\002\000\022\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\045\uffa6\101\uffa6" +
    "\001\002\000\022\036\141\037\142\040\153\041\137\042" +
    "\144\043\140\045\146\101\151\001\002\000\022\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\045\uffa3\101" +
    "\uffa3\001\002\000\020\050\uffb6\056\156\064\163\065\157" +
    "\066\162\067\154\070\160\001\002\000\010\007\uffe4\020" +
    "\uffe4\021\uffe4\001\002\000\024\003\252\036\141\037\142" +
    "\040\153\041\137\042\144\043\140\045\146\101\151\001" +
    "\002\000\004\046\uffcf\001\002\000\004\046\uffd1\001\002" +
    "\000\004\046\254\001\002\000\004\022\255\001\002\000" +
    "\004\007\256\001\002\000\024\010\uffdd\011\113\012\127" +
    "\015\111\024\134\026\116\101\115\102\123\103\121\001" +
    "\002\000\036\010\uffcc\011\uffcc\012\uffcc\013\260\015\uffcc" +
    "\017\uffcc\024\uffcc\026\uffcc\036\uffcc\037\uffcc\040\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\001\002\000\004\007\262\001\002" +
    "\000\036\010\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\017" +
    "\uffd2\024\uffd2\026\uffd2\036\uffd2\037\uffd2\040\uffd2\101\uffd2" +
    "\102\uffd2\103\uffd2\001\002\000\024\010\uffdd\011\113\012" +
    "\127\015\111\024\134\026\116\101\115\102\123\103\121" +
    "\001\002\000\004\010\264\001\002\000\036\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\015\uffcd\017\uffcd\024\uffcd\026\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\101\uffcd\102\uffcd\103\uffcd\001" +
    "\002\000\004\010\266\001\002\000\036\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\015\uffce\017\uffce\024\uffce\026\uffce\036" +
    "\uffce\037\uffce\040\uffce\101\uffce\102\uffce\103\uffce\001\002" +
    "\000\004\046\270\001\002\000\004\022\271\001\002\000" +
    "\004\007\256\001\002\000\036\010\uffcc\011\uffcc\012\uffcc" +
    "\013\260\015\uffcc\017\uffcc\024\uffcc\026\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\101\uffcc\102\uffcc\103\uffcc\001\002\000\036" +
    "\010\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\017\uffd0\024" +
    "\uffd0\026\uffd0\036\uffd0\037\uffd0\040\uffd0\101\uffd0\102\uffd0" +
    "\103\uffd0\001\002\000\036\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\015\uffdb\017\uffdb\024\uffdb\026\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\101\uffdb\102\uffdb\103\uffdb\001\002\000\004\016" +
    "\276\001\002\000\012\013\304\036\302\037\277\040\300" +
    "\001\002\000\004\047\uffc1\001\002\000\004\047\uffc0\001" +
    "\002\000\004\047\311\001\002\000\004\047\uffbf\001\002" +
    "\000\036\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\017" +
    "\uffc6\024\uffc6\026\uffc6\036\uffc6\037\uffc6\040\uffc6\101\uffc6" +
    "\102\uffc6\103\uffc6\001\002\000\004\047\310\001\002\000" +
    "\036\010\uffdd\011\113\012\127\013\uffdd\015\111\017\uffdd" +
    "\024\134\026\116\036\uffdd\037\uffdd\040\uffdd\101\115\102" +
    "\123\103\121\001\002\000\036\010\uffc5\011\uffc5\012\uffc5" +
    "\013\304\015\uffc5\017\uffc5\024\uffc5\026\uffc5\036\302\037" +
    "\277\040\300\101\uffc5\102\uffc5\103\uffc5\001\002\000\036" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\017\uffc4\024" +
    "\uffc4\026\uffc4\036\uffc4\037\uffc4\040\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\001\002\000\036\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\015\uffc2\017\uffc2\024\uffc2\026\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\101\uffc2\102\uffc2\103\uffc2\001\002\000\036\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3\017\uffc3\024\uffc3" +
    "\026\uffc3\036\uffc3\037\uffc3\040\uffc3\101\uffc3\102\uffc3\103" +
    "\uffc3\001\002\000\006\046\uffdf\051\313\001\002\000\022" +
    "\006\034\027\031\030\030\031\027\032\024\033\032\034" +
    "\033\035\026\001\002\000\004\046\uffe1\001\002\000\004" +
    "\046\uffe0\001\002\000\004\045\317\001\002\000\024\006" +
    "\034\027\031\030\030\031\027\032\024\033\032\034\033" +
    "\035\026\046\uffe2\001\002\000\004\046\321\001\002\000" +
    "\004\047\322\001\002\000\022\006\034\027\031\030\030" +
    "\031\027\032\024\033\032\034\033\035\026\001\002\000" +
    "\004\007\324\001\002\000\030\005\010\010\ufffc\011\ufffc" +
    "\012\ufffc\014\ufffc\015\ufffc\024\ufffc\026\ufffc\101\ufffc\102" +
    "\ufffc\103\ufffc\001\002\000\010\007\uffe7\020\uffe7\021\uffe7" +
    "\001\002\000\026\010\ufff5\011\ufff5\012\ufff5\014\047\015" +
    "\ufff5\024\ufff5\026\ufff5\101\ufff5\102\ufff5\103\ufff5\001\002" +
    "\000\024\010\uffdd\011\113\012\127\015\111\024\134\026" +
    "\116\101\115\102\123\103\121\001\002\000\004\010\331" +
    "\001\002\000\010\007\uffe5\020\uffe5\021\uffe5\001\002\000" +
    "\024\010\uffdd\011\113\012\127\015\111\024\134\026\116" +
    "\101\115\102\123\103\121\001\002\000\004\010\334\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\010\004\005\005\006\001\001\000\002\001\001" +
    "\000\004\006\045\001\001\000\006\007\012\030\013\001" +
    "\001\000\002\001\001\000\004\011\015\001\001\000\002" +
    "\001\001\000\006\007\014\030\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\020" +
    "\001\001\000\002\001\001\000\010\032\024\033\022\034" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\043\033\022\034\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\067\013\074" +
    "\014\072\015\070\001\001\000\006\010\051\031\050\001" +
    "\001\000\002\001\001\000\006\010\052\031\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\064\001" +
    "\001\000\004\044\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\075\013\074\014\072\015" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\102\021\101\032\100\033\022\034\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\105\001\001\000\004\005\106\001\001\000\002\001" +
    "\001\000\004\006\107\001\001\000\032\023\113\024\116" +
    "\025\111\026\123\035\127\036\121\037\131\040\132\045" +
    "\117\046\130\055\124\057\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\243\001\001\000\016\027\146\061\177\063\142" +
    "\064\144\065\147\066\231\001\001\000\032\023\230\024" +
    "\116\025\111\026\123\035\127\036\121\037\131\040\132" +
    "\045\117\046\130\055\124\057\125\001\001\000\002\001" +
    "\001\000\004\047\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\023\174\024\116\025\111\026\123\035\127" +
    "\036\121\037\131\040\132\045\117\046\130\055\124\057" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\027\146\061\151\063\142\064\144\065\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\027\146\061\172\063\142\064" +
    "\144\065\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\027\146\061\171\063\142" +
    "\064\144\065\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\027\146\061\163\063\142" +
    "\064\144\065\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\154\001\001\000\004\056\166\001\001" +
    "\000\032\023\167\024\116\025\111\026\123\035\127\036" +
    "\121\037\131\040\132\045\117\046\130\055\124\057\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\154\001\001\000\004\067\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\146\061" +
    "\177\063\142\064\144\065\147\066\176\001\001\000\002" +
    "\001\001\000\006\067\154\071\200\001\001\000\014\027" +
    "\146\061\212\063\142\064\144\065\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\154\001" +
    "\001\000\006\050\216\051\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\050\221\051\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\234\001\001\000\032\023" +
    "\235\024\116\025\111\026\123\035\127\036\121\037\131" +
    "\040\132\045\117\046\130\055\124\057\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\027\146\061\245\063\142\064\144\065\147" +
    "\001\001\000\002\001\001\000\004\067\154\001\001\000" +
    "\002\001\001\000\020\027\146\054\252\061\177\063\142" +
    "\064\144\065\147\066\250\001\001\000\002\001\001\000" +
    "\004\073\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\256\001\001\000\032\023\264\024\116\025" +
    "\111\026\123\035\127\036\121\037\131\040\132\045\117" +
    "\046\130\055\124\057\125\001\001\000\004\053\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\023\262" +
    "\024\116\025\111\026\123\035\127\036\121\037\131\040" +
    "\132\045\117\046\130\055\124\057\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\271" +
    "\001\001\000\004\053\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\304\042\302" +
    "\043\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\023\305\024\116\025\111\026\123\035" +
    "\127\036\121\037\131\040\132\045\117\046\130\055\124" +
    "\057\125\001\001\000\010\041\304\042\306\043\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\313\001\001\000\012\021\314\032\100\033" +
    "\022\034\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\317\021\101\032\100\033" +
    "\022\034\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\322\033\022\034\034\001\001\000\004\016" +
    "\324\001\001\000\004\005\325\001\001\000\002\001\001" +
    "\000\004\006\326\001\001\000\032\023\327\024\116\025" +
    "\111\026\123\035\127\036\121\037\131\040\132\045\117" +
    "\046\130\055\124\057\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\023\332\024\116\025\111\026\123" +
    "\035\127\036\121\037\131\040\132\045\117\046\130\055" +
    "\124\057\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_fatal_error(String message, Object info)
    {
        System.err.println("Error fatal. Imposible recuperarse.\n");
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) {}
	
    public void syntax_error(Symbol st)
    {
        report_error("Syntax Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right, null);
    }


    public void errorMensaje(String msg)
    {
        System.err.println(msg);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LITERAL ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LITERAL ::= _flotante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LITERAL ::= _false 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LITERAL ::= _true 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LITERAL ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LITERAL ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TIPO_SIMPLE ::= _real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIPO_SIMPLE ::= _shortint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIPO_SIMPLE ::= _longint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO_SIMPLE ::= _char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO_SIMPLE ::= _boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO_SIMPLE ::= _int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO_SIMPLE ::= _string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO_COMPUESTO ::= _array _bra_aper _entero _rango_dos_puntos _entero _bra_cerr _of TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_COMPUESTO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO_DATO ::= TIPO_SIMPLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPO_DATO ::= TIPO_COMPUESTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPERADOR_BOOLEAN ::= _NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPERADOR_BOOLEAN ::= _AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERADOR_BOOLEAN ::= _OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERADOR_BOOLEAN ::= _distinto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERADOR_BOOLEAN ::= _mayor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERADOR_BOOLEAN ::= _mayor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERADOR_BOOLEAN ::= _igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADOR_BOOLEAN ::= _menor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADOR_BOOLEAN ::= _menor_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOLEAN",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADOR_ARITMETICO_ASIGN ::= _asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERADOR_ARITMETICO_ASIGN ::= _op_mult_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERADOR_ARITMETICO_ASIGN ::= _op_div_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERADOR_ARITMETICO_ASIGN ::= _op_menos_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADOR_ARITMETICO_ASIGN ::= _op_mas_igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO_ASIGN",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADOR_ARITMETICO ::= _op_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADOR_ARITMETICO ::= _op_mod 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADOR_ARITMETICO ::= _op_division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADOR_ARITMETICO ::= _op_multi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADOR_ARITMETICO ::= _op_resta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADOR_ARITMETICO ::= _op_suma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION_CONDICION ::= EXPRESION OPERADOR_BOOLEAN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_CONDICION",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION_BASE ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_BASE ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION_BINARIA ::= EXPRESION OPERADOR_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_BINARIA",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION_COMPUESTA ::= _parentesisAbre EXPRESION _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_COMPUESTA",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION_BINARIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION_BASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= _id OPERADOR_ARITMETICO_ASIGN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO_WRITE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTENIDO_WRITE ::= _id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WRITE",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETROS_WRITE ::= CONTENIDO_WRITE _coma PARAMETROS_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETROS_WRITE ::= CONTENIDO_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_WRITE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCION_WRITE ::= _write _parentesisAbre PARAMETROS_WRITE _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_WRITE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION_READ_AUX ::= _parentesisAbre _id _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCION_READ_AUX ::= _parentesisAbre _parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ_AUX",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCION_READ ::= _read FUNCION_READ_AUX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_READ",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONSTANTE_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONSTANTE_CASE ::= _caracter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONSTANTE_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE_CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASE ::= _else _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASE ::= CONSTANTE_CASE _dos_puntos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASES ::= CASE CUERPO_INSTRUCCIONES CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASES ::= CASE CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_CASE ::= _case _id _of CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_REPEAT ::= _repeat CUERPO_INSTRUCCIONES _until EXPRESION_CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPEAT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE_WHILE ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INICIO_WHILE ::= _while EXPRESION_CONDICION _do BLOQUE_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_WHILE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE_FOR ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INICIO_FOR ::= _for _id _asignacion EXPRESION _to EXPRESION _do BLOQUE_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_FOR",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE_ELSE ::= _else _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE_IF ::= _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= EXPRESION_CONDICION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICION",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_IF ::= _if _parentesisAbre error NT$1 _parentesisCierra _then BLOQUE_IF BLOQUE_ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Hay algo en el if");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_IF ::= _if _parentesisAbre CONDICION _parentesisCierra _then BLOQUE_IF BLOQUE_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTRUCTURA_CONTROL ::= INICIO_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESTRUCTURA_CONTROL ::= INICIO_FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESTRUCTURA_CONTROL ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ESTRUCTURA_CONTROL ::= SENTENCIA_REPEAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ESTRUCTURA_CONTROL ::= SENTENCIA_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= FUNCION_WRITE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= FUNCION_READ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= INSTRUCCION _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_INSTRUCCIONES ::= SENTENCIA CUERPO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS_Aux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS_Aux2 ::= _coma PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETROS_Aux ::= TIPO_DATO _id PARAMETROS_Aux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_Aux",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETROS ::= PARAMETROS_Aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESTRUCTURA_PROCEDIMIENTO ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PROCEDIMIENTO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ESTRUCTURA_FUNCION ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_PROCEDIMIENTO ::= _procedure _id _parentesisAbre PARAMETROS _parentesisCierra ESTRUCTURA_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_PROCEDIMIENTO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_FUNCION ::= _function _id _parentesisAbre PARAMETROS _parentesisCierra _dos_puntos TIPO_DATO ESTRUCTURA_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION_O_PROCEDIMIENTO ::= DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION_O_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACIONES_FUNC_PROC ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACIONES_FUNC_PROC ::= FUNCION_O_PROCEDIMIENTO DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_FUNC_PROC",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LITERAL_CASE ::= _flotante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LITERAL_CASE ::= _hilera 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LITERAL_CASE ::= _entero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL_CASE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONSTANTE ::= _id _igual error _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONSTANTE ::= _id error NT$0 LITERAL_CASE _punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.errorMensaje("Lo declaró mal tonto");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONSTANTE ::= _id _igual LITERAL_CASE _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_CONSTANTES ::= CONSTANTE DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_CONSTANTES ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONSTANTES",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_DECLARACION_CONSTANTES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE_DECLARACION_CONSTANTES ::= _const DECLARACION_CONSTANTES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_CONSTANTES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_ID_CONSECUTIVO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_ID_CONSECUTIVO ::= _coma _id DECLARACION_ID_CONSECUTIVO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID_CONSECUTIVO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= _id DECLARACION_ID_CONSECUTIVO _dos_puntos TIPO_DATO _punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_VARIABLES ::= VARIABLE DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_VARIABLES ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_DECLARACION_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_DECLARACION_VARIABLES ::= _var DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES DECLARACIONES_FUNC_PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE_PROGRAMA ::= DECLARACIONES _begin CUERPO_INSTRUCCIONES _end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO_PROGRAMA ::= _program BLOQUE_PROGRAMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

