package logica.parser;

import java_cup.runtime.*;

parser code{:
    
    public String errorActual = "";
    
    
    public void report_fatal_error(String message, Object info)
    {
        System.err.println("Error fatal. Imposible recuperarse.\n");
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) {}
	
    public void syntax_error(Symbol st)
    {
        if (cur_token.value != null)
        {
            if (cur_token.sym == sym.error)
            {
                errorActual += "Lexer Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right + " -------- ";
                //report_error(errorActual, null);
                //report_error("Lexer Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right, null);
                
            }
            else
            {
                errorActual += "Syntax Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right + " -------- ";
                //report_error(errorActual, null);
                //report_error("Syntax Error: "+ cur_token.value + ". Linea: " + cur_token.left + ". Columna: " + cur_token.right, null);
            }
        }
       
    }


    public void errorMensaje(String msg)
    {
        //System.err.println(msg);
        errorActual += msg;
        report_error(errorActual, null);
        errorActual = "";
    }

:}



/* TERMINALES O TOKENS ********************************************************/

// Palabras reservadas ---------------------------------------------------------

terminal _program, _var, _string, _begin, _end, _if, _repeat, _else, _const,
         _case, _of, _until, _function, _procedure, _then,  _to, _for, _do, _while,
         _array;

// Tipos de datos --------------------------------------------------------------

terminal _int, _longint, _shortint,_char, _boolean, _real, _entero,_hilera, 
         _caracter, _flotante,_true, _false ;

// Operador y caracteres especiales --------------------------------------------

terminal _igual, _parentesisAbre, _parentesisCierra, _dos_puntos, _punto_coma,
         _coma, _bra_aper, _bra_cerr, _punto, _rango_dos_puntos ;

// Operadores ------------------------------------------------------------------

terminal _op_suma, _op_mas_igual, _op_menos_igual, _op_div_igual, _op_mult_igual,
         _asignacion, _op_resta , _op_multi , _op_division , _op_mod , _op_DIV,
         _mayor_igual, _mayor, _menor_igual, _menor, _distinto, _OR, _AND, _NOT,
         _op_inc, _op_dec ;

// Funciones e identificadores -------------------------------------------------

terminal _id, _write, _read;

// FIN DE TERMINALES -----------------------------------------------------------




/* NO TERMINALES **************************************************************/

non terminal INICIO_PROGRAMA, BLOQUE_PROGRAMA ;

non terminal DECLARACIONES, BLOQUE_DECLARACION_VARIABLES, 
             BLOQUE_DECLARACION_CONSTANTES, DECLARACION_VARIABLES,
             DECLARACION_CONSTANTES,DECLARACION_ID_CONSECUTIVO;

non terminal DECLARACIONES_FUNC_PROC, FUNCION_O_PROCEDIMIENTO,
             DECLARACION_FUNCION, DECLARACION_PROCEDIMIENTO, 
             ESTRUCTURA_FUNCION, ESTRUCTURA_PROCEDIMIENTO,PARAMETROS ,                
             PARAMETROS_Aux, PARAMETROS_Aux2;

non terminal CUERPO_INSTRUCCIONES, SENTENCIA, INSTRUCCION, ASIGNACION ;

non terminal LITERAL,VARIABLE, CONSTANTE,TIPO_DATO, TIPO_COMPUESTO, 
             TIPO_SIMPLE ;
         
non terminal ESTRUCTURA_CONTROL, SENTENCIA_IF, SENTENCIA_REPEAT, 
             SENTENCIA_CASE,CASE,CASES, CONSTANTE_CASE,LITERAL_CASE,
             FUNCION_WRITE, FUNCION_READ, FUNCION_READ_AUX, PARAMETROS_WRITE, 
             BLOQUE_IF, BLOQUE_ELSE, CONDICION,INICIO_FOR, 
             BLOQUE_FOR,INICIO_WHILE, BLOQUE_WHILE;

non terminal EXPRESION, EXPRESION_UNARIA, EXPRESION_COMPUESTA, EXPRESION_BINARIA,
             EXPRESION_BASE,EXPRESION_CONDICION;

non terminal OPERADOR_ARITMETICO, OPERADOR_ARITMETICO_ASIGN, OPERADOR_BOOLEAN,
             OPERADOR_UNARIO ;

non terminal CASES_err, FUNCION_READ_AUX_Err, FUNCION_WRITE_Err, PARAMETROS_WRITE_Aux, 
             CONTENIDO_WRITE;

precedence left _dos_puntos, _punto_coma, _if, _repeat, _case, _write, _read ;

precedence left _hilera , _caracter , _entero , _else, _for, _while;

precedence left _id ; //precedencia para las asignaciones 

precedence left _op_suma, _op_resta , _op_multi , _op_division , _op_mod , _op_DIV;

precedence left error;

/* GRAMÁTICA ******************************************************************/

start with INICIO_PROGRAMA;

INICIO_PROGRAMA                   ::= _program _id BLOQUE_PROGRAMA;
BLOQUE_PROGRAMA                   ::= DECLARACIONES _begin CUERPO_INSTRUCCIONES _end ;
DECLARACIONES                     ::= BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES DECLARACIONES_FUNC_PROC ;

/* Declaración de Variables --------------------------------------------------*/

BLOQUE_DECLARACION_VARIABLES      ::= _var DECLARACION_VARIABLES | ;
DECLARACION_VARIABLES             ::= VARIABLE | VARIABLE DECLARACION_VARIABLES ;
VARIABLE                          ::= _id DECLARACION_ID_CONSECUTIVO _dos_puntos TIPO_DATO _punto_coma 
                                      | error _punto_coma;
DECLARACION_ID_CONSECUTIVO        ::= _coma _id DECLARACION_ID_CONSECUTIVO |  ;

/* Declaración de Constantes -------------------------------------------------*/

BLOQUE_DECLARACION_CONSTANTES     ::= _const DECLARACION_CONSTANTES | ;
DECLARACION_CONSTANTES            ::= CONSTANTE | CONSTANTE DECLARACION_CONSTANTES ;
CONSTANTE                         ::= _id _igual LITERAL_CASE _punto_coma 
                                    | _id error:e {:parser.errorMensaje("Error en la declaración de constante");:} LITERAL_CASE _punto_coma 
                                    | _id _igual error {:parser.errorMensaje("Error en la declaración de constante");:} _punto_coma;
LITERAL_CASE                      ::= _entero | _hilera | _flotante ;

/* Declaración de funciones y procedimientos ---------------------------------*/

DECLARACIONES_FUNC_PROC           ::= FUNCION_O_PROCEDIMIENTO DECLARACIONES_FUNC_PROC |;
FUNCION_O_PROCEDIMIENTO           ::= DECLARACION_FUNCION | DECLARACION_PROCEDIMIENTO;

DECLARACION_FUNCION               ::= _function _id _parentesisAbre PARAMETROS _parentesisCierra _dos_puntos TIPO_DATO ESTRUCTURA_FUNCION 
                                    | _function _id error {:parser.errorMensaje("Mala definición de la función");:} ESTRUCTURA_FUNCION;
DECLARACION_PROCEDIMIENTO         ::= _procedure _id _parentesisAbre PARAMETROS _parentesisCierra ESTRUCTURA_PROCEDIMIENTO 
                                    | _procedure _id error {:parser.errorMensaje("Mala definición del procedimiento");:} ESTRUCTURA_PROCEDIMIENTO ;

ESTRUCTURA_FUNCION                ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end ;
ESTRUCTURA_PROCEDIMIENTO          ::= _begin BLOQUE_DECLARACION_VARIABLES BLOQUE_DECLARACION_CONSTANTES CUERPO_INSTRUCCIONES _end ;

PARAMETROS                        ::=   PARAMETROS_Aux |;
PARAMETROS_Aux                    ::=   TIPO_DATO _id PARAMETROS_Aux2;
PARAMETROS_Aux2                   ::=   _coma PARAMETROS_Aux |;

/* Sentencias ----------------------------------------------------------------*/

CUERPO_INSTRUCCIONES              ::= SENTENCIA CUERPO_INSTRUCCIONES |  ;
SENTENCIA                         ::= ESTRUCTURA_CONTROL | INSTRUCCION _punto_coma  ;
INSTRUCCION                       ::= FUNCION_READ | FUNCION_WRITE | ASIGNACION ;
ESTRUCTURA_CONTROL                ::= SENTENCIA_IF | SENTENCIA_REPEAT | SENTENCIA_CASE | INICIO_FOR | INICIO_WHILE;

/* Sentencia IF ---------------------------------------------------------------*/

SENTENCIA_IF                      ::= _if _parentesisAbre CONDICION _parentesisCierra _then BLOQUE_IF BLOQUE_ELSE ;
                                    //  |_if  error:e {:parser.errorMensaje("Existe un error dentro del IF");:} _end;
CONDICION                         ::= EXPRESION_CONDICION ;
BLOQUE_IF                         ::= _begin CUERPO_INSTRUCCIONES _end ;
BLOQUE_ELSE                       ::= _else _begin CUERPO_INSTRUCCIONES _end | ;

/* Sentencias FOR ------------------------------------------------------------*/

INICIO_FOR                        ::= _for _id _asignacion EXPRESION _to EXPRESION _do BLOQUE_FOR
                                      |_for error:e {:parser.errorMensaje("Existe un error dentro del FOR");:} _end ;
BLOQUE_FOR                        ::= _begin CUERPO_INSTRUCCIONES _end;

/* Sentencias WHILE ----------------------------------------------------------*/

INICIO_WHILE                      ::= _while _parentesisAbre EXPRESION_CONDICION _parentesisCierra _do BLOQUE_WHILE
                                      |_while error:e {:parser.errorMensaje("Existe un error dentro del WHILE");:} _end;
BLOQUE_WHILE                      ::= _begin CUERPO_INSTRUCCIONES _end;

/* Sentencias REPEAT ---------------------------------------------------------*/

SENTENCIA_REPEAT                  ::= _repeat CUERPO_INSTRUCCIONES _until _parentesisAbre EXPRESION_CONDICION _parentesisCierra;
SENTENCIA_REPEAT                  ::= _repeat CUERPO_INSTRUCCIONES error:e {:parser.errorMensaje("Error en sentencia REPEAT, Falta Palabra Reservada UNTIL");:} _parentesisCierra ;
SENTENCIA_REPEAT                  ::= _repeat CUERPO_INSTRUCCIONES _until error:e {:parser.errorMensaje("Error en sentencia REPEAT, Falta '(' en la Expresion Condicional");:} EXPRESION_CONDICION  _parentesisCierra;
SENTENCIA_REPEAT                  ::= _repeat CUERPO_INSTRUCCIONES _until _parentesisAbre error:e {:parser.errorMensaje("Error en sentencia REPEAT, Expresion Condicional NO Valida");:} _parentesisCierra;

/* Sentencias CASE -----------------------------------------------------------*/

SENTENCIA_CASE                    ::= _case _id _of CASES  ;
SENTENCIA_CASE                    ::= _case error:e {:parser.errorMensaje("Error en sentencia CASE, IDENTIFICADOR invalido");:} _of CASES  ;
SENTENCIA_CASE                    ::= _case _id error:e {:parser.errorMensaje("Error en sentencia CASE, se espera la Palabra Reservada OF");:} CASES  ;
CASES                             ::= CASE CUERPO_INSTRUCCIONES | CASE CUERPO_INSTRUCCIONES CASES ;
CASES                             ::= error:e {:parser.errorMensaje("Error en opcion de sentencia CASE, CONSTANTE invalida");:} CUERPO_INSTRUCCIONES CASES_err;
CASES_err                         ::= CASES |;
CASE                              ::= CONSTANTE_CASE _dos_puntos | _else _dos_puntos;
CONSTANTE_CASE                    ::= _hilera | _caracter | _entero;

/* FUNCIONES READ Y WRITE ----------------------------------------------------*/

FUNCION_READ           ::= _read FUNCION_READ_AUX;
FUNCION_READ_AUX       ::= _parentesisAbre _parentesisCierra | _parentesisAbre _id _parentesisCierra;

FUNCION_READ_AUX       ::= error:e {:parser.errorMensaje("Error en sentencia READ, falto abrir parentesis");:} FUNCION_READ_AUX_Err; 
FUNCION_READ_AUX       ::= _parentesisAbre error:e {:parser.errorMensaje("Error en sentencia READ, Problemas con los parametros de la instruccion");:} FUNCION_READ_AUX_Err; 
FUNCION_READ_AUX       ::= _parentesisAbre _id error:e {:parser.errorMensaje("Error en sentencia READ, falta cerrar patentesis");:};
FUNCION_READ_AUX_Err   ::= _id _parentesisCierra | _parentesisCierra |;


FUNCION_WRITE          ::= _write _parentesisAbre PARAMETROS_WRITE _parentesisCierra;
FUNCION_WRITE          ::= _write error:e {:parser.errorMensaje("Error en sentencia WRITE, falto abrir parentesis");:} FUNCION_WRITE_Err;
FUNCION_WRITE_Err      ::= PARAMETROS_WRITE _parentesisCierra | _parentesisCierra|;
PARAMETROS_WRITE       ::= CONTENIDO_WRITE PARAMETROS_WRITE_Aux ;
PARAMETROS_WRITE_Aux   ::= _coma PARAMETROS_WRITE | error:e {:parser.errorMensaje("Error en sentencia WRITE, falta ',' ");:} PARAMETROS_WRITE | ;
CONTENIDO_WRITE        ::= EXPRESION | error:e {:parser.errorMensaje("Error en sentencia WRITE, parametro no valido");:};

/* ASIGNACIÓN ----------------------------------------------------------------*/

ASIGNACION             ::= _id  OPERADOR_ARITMETICO_ASIGN EXPRESION ;

/* EXPRESIONES ---------------------------------------------------------------*/

EXPRESION                         ::= EXPRESION_BASE | EXPRESION_BINARIA | EXPRESION_COMPUESTA | EXPRESION_UNARIA ;
EXPRESION_COMPUESTA               ::= _parentesisAbre EXPRESION _parentesisCierra ;
EXPRESION_BINARIA                 ::= EXPRESION OPERADOR_ARITMETICO EXPRESION ;
EXPRESION_UNARIA                  ::= _id OPERADOR_UNARIO ;
EXPRESION_BASE                    ::= _id | LITERAL ;
EXPRESION_CONDICION               ::=  EXPRESION OPERADOR_BOOLEAN EXPRESION ;


OPERADOR_ARITMETICO               ::= _op_suma | _op_resta | _op_multi | _op_division | _op_mod | _op_DIV  ;
OPERADOR_ARITMETICO_ASIGN         ::= _op_mas_igual | _op_menos_igual | _op_div_igual | _op_mult_igual | _asignacion  ;
OPERADOR_BOOLEAN                  ::= _menor_igual | _menor | _igual | _mayor_igual | _mayor | _distinto | _OR | _AND | _NOT ;
OPERADOR_UNARIO                   ::= _op_inc | _op_dec ;

/* TIPOS, LITERALES Y ESTRUCTURAS ---------------------------------------------*/

TIPO_DATO                         ::= TIPO_COMPUESTO | TIPO_SIMPLE ;
TIPO_COMPUESTO                    ::=  _array _bra_aper _entero _rango_dos_puntos _entero _bra_cerr _of TIPO_DATO 
                                      |_array _bra_aper _entero _bra_cerr _of TIPO_DATO;
TIPO_SIMPLE                       ::= _string | _int | _boolean | _char | _longint | _shortint | _real ;
LITERAL                           ::= _entero | _hilera | _true | _false | _flotante | _caracter ;