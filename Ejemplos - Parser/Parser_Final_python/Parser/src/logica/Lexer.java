/* The following code was generated by JFlex 1.6.1 */

package logica;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Crisia/Documents/NetBeansProjects/Parser/Parser/src/logica/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\102\1\103\1\2\22\0\1\4\1\62\1\6"+
    "\1\5\1\0\1\60\1\65\1\7\1\71\1\72\1\56\1\55\1\73"+
    "\1\24\1\22\1\57\1\12\1\15\2\101\4\21\2\11\1\74\1\77"+
    "\1\63\1\61\1\64\2\0\1\17\1\14\2\17\1\23\1\25\5\10"+
    "\1\13\2\10\1\20\4\10\1\100\3\10\1\16\2\10\1\75\1\26"+
    "\1\76\1\67\1\10\1\0\1\36\1\51\1\47\1\27\1\30\1\32"+
    "\1\54\1\43\1\41\1\10\1\52\1\31\1\35\1\50\1\34\1\44"+
    "\1\10\1\33\1\37\1\42\1\53\1\10\1\40\1\46\1\45\1\10"+
    "\1\0\1\66\1\0\1\70\6\0\1\102\u1fa2\0\1\102\1\102\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\2\4\1\5\1\6\1\7"+
    "\2\10\1\11\1\12\21\7\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\7"+
    "\1\36\2\37\1\40\1\1\1\41\1\42\1\1\1\4"+
    "\2\0\1\43\1\44\1\0\1\45\1\44\3\0\1\46"+
    "\14\7\1\47\1\50\4\7\1\51\1\7\1\52\1\53"+
    "\13\7\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\7\1\2"+
    "\1\71\1\72\2\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\13\37\2\0\1\44\1\0\1\102\2\103\1\104"+
    "\1\7\1\105\1\106\10\7\1\107\4\7\1\110\4\7"+
    "\1\111\1\7\1\112\7\7\1\113\2\7\1\114\1\115"+
    "\1\7\1\73\1\116\1\117\1\120\2\0\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\2\0\1\102\1\127\1\103"+
    "\1\130\1\104\1\131\1\7\1\132\1\133\1\134\2\7"+
    "\1\135\1\7\1\136\5\7\1\137\3\7\1\140\1\7"+
    "\1\141\3\7\1\142\2\7\1\143\2\0\1\102\1\103"+
    "\1\104\1\144\2\7\1\145\2\7\1\146\2\7\1\147"+
    "\1\7\1\150\1\151\1\152\1\153\1\7\1\154\1\7"+
    "\2\4\1\102\1\103\1\104\1\155\1\156\1\7\1\157"+
    "\1\160\1\161\1\162\2\7\2\4\1\102\1\103\1\104"+
    "\1\163\1\7\1\164\1\102\1\103\1\104\1\165\1\102"+
    "\1\103\1\104\1\102\1\103\1\104\1\102\1\0\1\104"+
    "\1\102\1\0\1\104\1\102\1\0\1\104\1\102\1\0"+
    "\1\104\1\102\1\0\1\104\1\102\1\0\1\104\1\102"+
    "\1\0\1\104\1\102\2\0\1\102\1\0\1\102\1\0"+
    "\1\102\1\0\1\102\1\0\1\102\1\0\52\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\314\0\u0110\0\314\0\314"+
    "\0\u0154\0\u0198\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330"+
    "\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550"+
    "\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\u0a18\0\u0a5c\0\u0aa0\0\314"+
    "\0\314\0\u0ae4\0\u0b28\0\314\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38"+
    "\0\314\0\u0c7c\0\u0cc0\0\314\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0"+
    "\0\314\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac"+
    "\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u0220\0\u1144\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u0220\0\u1298\0\u0220\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\314\0\u160c\0\314\0\u1650\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\u1694"+
    "\0\u16d8\0\314\0\314\0\u171c\0\u1760\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\u0b28\0\u17a4\0\u17e8\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u0220"+
    "\0\u0220\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u1e8c\0\u0220\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u0220\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u0220\0\u20f0\0\u0220\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u0220\0\u2310\0\u2354"+
    "\0\314\0\314\0\u2398\0\314\0\314\0\314\0\314\0\u1870"+
    "\0\u23dc\0\314\0\314\0\314\0\314\0\314\0\314\0\u2420"+
    "\0\u2464\0\u24a8\0\314\0\u24ec\0\314\0\u2530\0\314\0\u2574"+
    "\0\u0220\0\u0220\0\u0220\0\u25b8\0\u25fc\0\u0220\0\u2640\0\u0220"+
    "\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u0220\0\u27d8\0\u281c"+
    "\0\u2860\0\u0220\0\u28a4\0\u0220\0\u28e8\0\u292c\0\u2970\0\u0220"+
    "\0\u29b4\0\u29f8\0\u0220\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c"+
    "\0\u0220\0\u2b90\0\u2bd4\0\u0220\0\u2c18\0\u2c5c\0\u0220\0\u2ca0"+
    "\0\u2ce4\0\u0220\0\u2d28\0\u0220\0\u0220\0\u0220\0\u0220\0\u2d6c"+
    "\0\u0220\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u0220"+
    "\0\u0220\0\u2f48\0\u0220\0\u0220\0\u0220\0\u0220\0\u2f8c\0\u2fd0"+
    "\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u0220\0\u3168\0\u0220"+
    "\0\u31ac\0\u31f0\0\u3234\0\u0220\0\u3278\0\u32bc\0\u3300\0\u3344"+
    "\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564"+
    "\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784"+
    "\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4"+
    "\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4"+
    "\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004"+
    "\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224"+
    "\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444"+
    "\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664"+
    "\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\14\1\15\3\14\1\15\1\17"+
    "\1\14\1\20\1\21\1\4\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\14\1\30\1\31\1\32\1\33\1\34"+
    "\1\14\1\35\1\36\1\14\1\37\1\40\1\41\3\14"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\15\1\4\1\10\2\66"+
    "\1\67\1\70\2\66\1\71\17\66\1\72\55\66\2\73"+
    "\1\67\1\70\3\73\1\74\16\73\1\75\55\73\107\0"+
    "\1\7\100\0\2\11\1\76\1\10\100\11\6\0\1\77"+
    "\104\0\1\100\104\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\26\14\23\0\2\14\13\0\2\15\1\101\1\0"+
    "\1\15\3\0\1\15\1\102\1\103\1\0\1\104\2\0"+
    "\1\103\1\101\1\104\46\0\1\15\13\0\2\105\1\101"+
    "\1\106\1\105\1\107\1\0\1\110\1\105\1\102\1\103"+
    "\1\0\1\104\2\0\1\103\1\101\1\104\1\0\1\110"+
    "\11\0\1\107\2\0\1\106\27\0\1\105\13\0\2\102"+
    "\2\0\1\102\3\0\1\102\57\0\1\102\63\0\1\111"+
    "\32\0\12\14\1\0\1\14\1\0\1\14\1\0\7\14"+
    "\1\112\16\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\1\14\1\113\24\14\23\0\2\14"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\2\14"+
    "\1\114\14\14\1\115\6\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\7\14\1\116\2\14"+
    "\1\117\13\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\2\14\1\120\1\14\1\121\1\122"+
    "\4\14\1\123\13\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\124\5\14\1\125"+
    "\16\14\23\0\2\14\12\0\12\14\1\0\1\14\1\0"+
    "\1\14\1\0\4\14\1\126\21\14\23\0\2\14\12\0"+
    "\12\14\1\0\1\14\1\0\1\14\1\0\10\14\1\127"+
    "\10\14\1\130\4\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\13\14\1\131\12\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\12\14\1\132\1\14\1\133\11\14\23\0\2\14\12\0"+
    "\12\14\1\0\1\14\1\0\1\14\1\0\3\14\1\134"+
    "\2\14\1\135\1\14\1\136\10\14\1\137\4\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\4\14\1\140\7\14\1\141\11\14\23\0\2\14\12\0"+
    "\12\14\1\0\1\14\1\0\1\14\1\0\4\14\1\142"+
    "\2\14\1\143\16\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\12\14\1\144\13\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\2\14\1\145\2\14\1\146\6\14\1\147\11\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\5\14\1\150\20\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\4\14\1\151\1\152\20\14"+
    "\23\0\2\14\63\0\1\153\100\0\1\154\2\0\1\155"+
    "\101\0\1\156\1\0\1\157\103\0\1\160\103\0\1\161"+
    "\103\0\1\162\103\0\1\163\1\0\1\164\1\165\100\0"+
    "\1\166\2\0\1\167\27\0\12\14\1\0\1\14\1\0"+
    "\1\14\1\0\4\14\1\170\21\14\23\0\2\14\2\0"+
    "\2\66\2\0\2\66\1\0\17\66\1\0\55\66\3\0"+
    "\1\70\100\0\2\70\1\171\1\5\2\70\1\172\1\173"+
    "\2\70\1\174\2\70\1\174\3\70\1\175\4\70\1\176"+
    "\3\70\1\177\1\200\6\70\1\201\5\70\1\202\1\203"+
    "\27\70\1\174\2\0\2\204\2\0\3\204\1\0\16\204"+
    "\1\0\55\204\2\70\2\0\2\70\1\205\1\206\2\70"+
    "\1\207\2\70\1\207\3\70\1\210\4\70\1\211\3\70"+
    "\1\212\1\213\6\70\1\214\5\70\1\215\1\216\27\70"+
    "\1\207\5\0\1\10\106\0\1\217\104\0\1\220\105\0"+
    "\2\102\2\0\1\102\3\0\1\102\1\0\1\103\1\0"+
    "\1\104\2\0\1\103\1\0\1\104\46\0\1\102\13\0"+
    "\2\221\2\0\1\221\3\0\1\221\2\0\1\222\30\0"+
    "\1\222\23\0\1\221\13\0\2\105\2\0\1\105\3\0"+
    "\1\105\1\102\1\103\1\0\1\104\2\0\1\103\1\0"+
    "\1\104\46\0\1\105\14\0\1\223\2\0\1\223\77\0"+
    "\1\224\1\225\1\0\2\224\1\0\1\224\1\0\1\224"+
    "\1\0\1\224\1\0\1\224\1\0\2\224\1\0\1\224"+
    "\3\0\1\224\10\0\1\224\1\0\1\224\27\0\1\224"+
    "\14\0\1\226\2\0\1\226\3\0\1\226\57\0\1\226"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\2\14"+
    "\1\227\23\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\2\14\1\230\1\231\22\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\10\14\1\232\1\14\1\233\13\14\23\0\2\14\12\0"+
    "\12\14\1\0\1\14\1\0\1\14\1\0\1\14\1\234"+
    "\16\14\1\235\5\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\6\14\1\236\17\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\10\14\1\237\15\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\5\14\1\240\20\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\5\14\1\241\20\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\4\14\1\242\21\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\21\14\1\243\4\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\13\14\1\244\12\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\21\14\1\245\4\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\10\14\1\246\15\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\247\25\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\4\14\1\250\21\14\23\0\2\14"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\13\14"+
    "\1\251\12\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\12\14\1\252\13\14\23\0\2\14"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\15\14"+
    "\1\253\10\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\13\14\1\254\1\14\1\255\10\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\16\14\1\256\7\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\12\14\1\257\13\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\12\14\1\260\13\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\10\14\1\261\15\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\262\24\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\7\14\1\263\16\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\21\14\1\264\4\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\7\14\1\265\16\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\13\14\1\266\12\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\1\14\1\267\24\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\5\14\1\270\20\14\23\0\2\14\63\0\1\271"+
    "\103\0\1\272\32\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\24\14\1\273\1\14\23\0\2\14\5\0\1\5"+
    "\112\0\1\175\2\0\1\175\3\0\1\175\57\0\1\175"+
    "\14\0\1\274\2\0\1\274\3\0\1\274\57\0\1\274"+
    "\11\0\1\275\103\0\1\276\103\0\1\277\2\0\1\300"+
    "\2\0\1\300\3\0\1\300\57\0\1\300\11\0\1\277"+
    "\2\0\1\301\2\0\1\301\3\0\1\301\57\0\1\301"+
    "\11\0\1\302\103\0\1\303\103\0\1\304\103\0\1\305"+
    "\103\0\1\306\103\0\1\307\74\0\6\217\1\310\75\217"+
    "\7\220\1\311\74\220\11\0\2\221\2\0\1\221\3\0"+
    "\1\221\3\0\1\104\4\0\1\104\46\0\1\221\13\0"+
    "\2\221\2\0\1\221\3\0\1\221\57\0\1\221\14\0"+
    "\1\312\1\313\1\0\1\312\13\0\1\313\63\0\2\314"+
    "\1\315\2\314\1\0\1\314\1\0\1\314\1\0\1\314"+
    "\1\0\1\314\1\0\2\314\1\315\1\314\3\0\1\314"+
    "\10\0\1\314\1\0\1\314\27\0\1\314\13\0\1\224"+
    "\1\225\1\315\2\224\1\0\1\224\1\0\1\224\1\0"+
    "\1\224\1\0\1\224\1\0\2\224\1\315\1\224\3\0"+
    "\1\224\10\0\1\224\1\0\1\224\27\0\1\224\14\0"+
    "\1\316\1\317\1\0\1\316\3\0\1\316\7\0\1\317"+
    "\47\0\1\316\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\10\14\1\320\15\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\1\14\1\321\24\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\3\14\1\322\22\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\20\14\1\323\5\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\324\24\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\22\14\1\325\3\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\13\14\1\326\12\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\7\14\1\327\16\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\6\14\1\330\17\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\7\14\1\331\16\14"+
    "\23\0\2\14\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\24\14\1\332\1\14\23\0\2\14\12\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\0\25\14\1\333\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\334\24\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\12\14\1\335\13\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\14\14\1\336\11\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\2\14\1\337\23\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\5\14\1\340\20\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\24\14\1\341\1\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\10\14\1\342\15\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\21\14\1\343\4\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\10\14\1\344\15\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\2\14\1\345\23\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\10\14\1\346\15\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\13\14\1\347\12\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\4\14\1\350\21\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\7\14\1\351\16\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\2\14\1\352\23\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\353\24\14\23\0"+
    "\2\14\11\0\1\277\74\0\6\217\1\354\75\217\7\220"+
    "\1\355\74\220\12\0\1\356\2\0\1\356\77\0\2\357"+
    "\1\315\2\357\1\0\1\357\1\0\1\357\1\0\1\357"+
    "\1\0\1\357\1\0\2\357\1\315\1\357\3\0\1\357"+
    "\10\0\1\357\1\0\1\357\27\0\1\357\14\0\1\360"+
    "\1\317\1\0\1\360\3\0\1\360\7\0\1\317\47\0"+
    "\1\360\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\361\24\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\15\14\1\362\10\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\363\25\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\13\14\1\364\12\14\23\0\2\14"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\2\14"+
    "\1\365\23\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\4\14\1\366\21\14\23\0\2\14"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\1\14"+
    "\1\367\24\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\4\14\1\370\21\14\23\0\2\14"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\21\14"+
    "\1\371\4\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\1\14\1\372\24\14\23\0\2\14"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\4\14"+
    "\1\373\21\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\13\14\1\374\12\14\23\0\2\14"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\13\14"+
    "\1\375\12\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\1\376\25\14\23\0\2\14\12\0"+
    "\12\14\1\0\1\14\1\0\1\14\1\0\10\14\1\377"+
    "\15\14\23\0\2\14\12\0\12\14\1\0\1\14\1\0"+
    "\1\14\1\0\12\14\1\u0100\13\14\23\0\2\14\12\0"+
    "\12\14\1\0\1\14\1\0\1\14\1\0\23\14\1\u0101"+
    "\2\14\23\0\2\14\12\0\12\14\1\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\u0102\24\14\23\0\2\14\2\0"+
    "\6\217\1\u0103\75\217\7\220\1\u0104\74\220\12\0\1\u0105"+
    "\2\0\1\u0105\77\0\2\u0106\1\315\2\u0106\1\0\1\u0106"+
    "\1\0\1\u0106\1\0\1\u0106\1\0\1\u0106\1\0\2\u0106"+
    "\1\315\1\u0106\3\0\1\u0106\10\0\1\u0106\1\0\1\u0106"+
    "\27\0\1\u0106\14\0\1\u0107\1\317\1\0\1\u0107\3\0"+
    "\1\u0107\7\0\1\317\47\0\1\u0107\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\13\14\1\u0108\12\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\7\14\1\u0109\16\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\2\14\1\u010a\23\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\21\14\1\u010b\4\14\23\0\2\14\12\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\0\13\14\1\u010c\12\14\23\0"+
    "\2\14\12\0\12\14\1\0\1\14\1\0\1\14\1\0"+
    "\25\14\1\u010d\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\13\14\1\u010e\12\14\23\0\2\14"+
    "\12\0\12\14\1\0\1\14\1\0\1\14\1\0\21\14"+
    "\1\u010f\4\14\23\0\2\14\12\0\12\14\1\0\1\14"+
    "\1\0\1\14\1\0\7\14\1\u0110\16\14\23\0\2\14"+
    "\10\0\1\u0111\104\0\1\u0112\106\0\1\u0113\2\0\1\u0113"+
    "\77\0\2\u0114\1\315\2\u0114\1\0\1\u0114\1\0\1\u0114"+
    "\1\0\1\u0114\1\0\1\u0114\1\0\2\u0114\1\315\1\u0114"+
    "\3\0\1\u0114\10\0\1\u0114\1\0\1\u0114\27\0\1\u0114"+
    "\14\0\1\u0115\1\317\1\0\1\u0115\3\0\1\u0115\7\0"+
    "\1\317\47\0\1\u0115\12\0\12\14\1\0\1\14\1\0"+
    "\1\14\1\0\16\14\1\u0116\7\14\23\0\2\14\12\0"+
    "\12\14\1\0\1\14\1\0\1\14\1\0\24\14\1\u0117"+
    "\1\14\23\0\2\14\12\0\12\14\1\0\1\14\1\0"+
    "\1\14\1\0\21\14\1\u0118\4\14\23\0\2\14\10\0"+
    "\1\10\104\0\1\10\106\0\1\u0119\2\0\1\u0119\77\0"+
    "\2\u011a\1\315\2\u011a\1\0\1\u011a\1\0\1\u011a\1\0"+
    "\1\u011a\1\0\1\u011a\1\0\2\u011a\1\315\1\u011a\3\0"+
    "\1\u011a\10\0\1\u011a\1\0\1\u011a\27\0\1\u011a\14\0"+
    "\1\u011b\1\317\1\0\1\u011b\3\0\1\u011b\7\0\1\317"+
    "\47\0\1\u011b\12\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\u011c\24\14\23\0\2\14\14\0\1\u011d"+
    "\2\0\1\u011d\77\0\2\u011e\1\315\2\u011e\1\0\1\u011e"+
    "\1\0\1\u011e\1\0\1\u011e\1\0\1\u011e\1\0\2\u011e"+
    "\1\315\1\u011e\3\0\1\u011e\10\0\1\u011e\1\0\1\u011e"+
    "\27\0\1\u011e\14\0\1\u011f\1\317\1\0\1\u011f\3\0"+
    "\1\u011f\7\0\1\317\47\0\1\u011f\14\0\1\u0120\2\0"+
    "\1\u0120\77\0\2\u0121\1\315\2\u0121\1\0\1\u0121\1\0"+
    "\1\u0121\1\0\1\u0121\1\0\1\u0121\1\0\2\u0121\1\315"+
    "\1\u0121\3\0\1\u0121\10\0\1\u0121\1\0\1\u0121\27\0"+
    "\1\u0121\14\0\1\u0122\1\317\1\0\1\u0122\3\0\1\u0122"+
    "\7\0\1\317\47\0\1\u0122\14\0\1\u0123\2\0\1\u0123"+
    "\77\0\2\u0124\1\315\2\u0124\1\0\1\u0124\1\0\1\u0124"+
    "\1\0\1\u0124\1\0\1\u0124\1\0\2\u0124\1\315\1\u0124"+
    "\3\0\1\u0124\10\0\1\u0124\1\0\1\u0124\27\0\1\u0124"+
    "\14\0\1\u0125\1\317\1\0\1\u0125\3\0\1\u0125\7\0"+
    "\1\317\47\0\1\u0125\14\0\1\u0126\2\0\1\u0126\77\0"+
    "\2\u0127\1\315\2\u0127\1\0\1\u0127\1\0\1\u0127\1\0"+
    "\1\u0127\1\0\1\u0127\1\0\2\u0127\1\315\1\u0127\3\0"+
    "\1\u0127\10\0\1\u0127\1\0\1\u0127\27\0\1\u0127\14\0"+
    "\1\u0128\1\317\1\0\1\u0128\3\0\1\u0128\7\0\1\317"+
    "\47\0\1\u0128\14\0\1\u0129\2\0\1\u0129\77\0\2\u012a"+
    "\1\315\2\u012a\1\0\1\u012a\1\0\1\u012a\1\0\1\u012a"+
    "\1\0\1\u012a\1\0\2\u012a\1\315\1\u012a\3\0\1\u012a"+
    "\10\0\1\u012a\1\0\1\u012a\27\0\1\u012a\14\0\1\u012b"+
    "\1\317\1\0\1\u012b\3\0\1\u012b\7\0\1\317\47\0"+
    "\1\u012b\14\0\1\u012c\2\0\1\u012c\77\0\2\u012d\1\315"+
    "\2\u012d\1\0\1\u012d\1\0\1\u012d\1\0\1\u012d\1\0"+
    "\1\u012d\1\0\2\u012d\1\315\1\u012d\3\0\1\u012d\10\0"+
    "\1\u012d\1\0\1\u012d\27\0\1\u012d\14\0\1\u012e\1\317"+
    "\1\0\1\u012e\3\0\1\u012e\7\0\1\317\47\0\1\u012e"+
    "\14\0\1\u012f\2\0\1\u012f\77\0\2\u0130\1\315\2\u0130"+
    "\1\0\1\u0130\1\0\1\u0130\1\0\1\u0130\1\0\1\u0130"+
    "\1\0\2\u0130\1\315\1\u0130\3\0\1\u0130\10\0\1\u0130"+
    "\1\0\1\u0130\27\0\1\u0130\14\0\1\u0131\1\317\1\0"+
    "\1\u0131\3\0\1\u0131\7\0\1\317\47\0\1\u0131\14\0"+
    "\1\u0132\2\0\1\u0132\77\0\2\u0133\1\315\2\u0133\1\0"+
    "\1\u0133\1\0\1\u0133\1\0\1\u0133\1\0\1\u0133\1\0"+
    "\2\u0133\1\315\1\u0133\3\0\1\u0133\10\0\1\u0133\1\0"+
    "\1\u0133\27\0\1\u0133\14\0\1\u0134\1\317\1\0\1\u0134"+
    "\3\0\1\u0134\7\0\1\317\47\0\1\u0134\14\0\1\u0135"+
    "\2\0\1\u0135\77\0\2\u0136\1\315\2\u0136\1\0\1\u0136"+
    "\1\0\1\u0136\1\0\1\u0136\1\0\1\u0136\1\0\2\u0136"+
    "\1\315\1\u0136\3\0\1\u0136\10\0\1\u0136\1\0\1\u0136"+
    "\27\0\1\u0136\14\0\1\u0137\1\317\1\0\1\u0137\3\0"+
    "\1\u0137\7\0\1\317\47\0\1\u0137\14\0\1\u0138\2\0"+
    "\1\u0138\77\0\2\u0139\1\315\2\u0139\1\0\1\u0139\1\0"+
    "\1\u0139\1\0\1\u0139\1\0\1\u0139\1\0\2\u0139\1\315"+
    "\1\u0139\3\0\1\u0139\10\0\1\u0139\1\0\1\u0139\27\0"+
    "\1\u0139\14\0\1\u013a\1\317\1\0\1\u013a\3\0\1\u013a"+
    "\7\0\1\317\47\0\1\u013a\14\0\1\u013b\2\0\1\u013b"+
    "\101\0\1\315\15\0\1\315\64\0\1\u013c\1\317\1\0"+
    "\1\u013c\3\0\1\u013c\7\0\1\317\47\0\1\u013c\14\0"+
    "\1\u013d\2\0\1\u013d\100\0\1\u013e\1\317\1\0\1\u013e"+
    "\3\0\1\u013e\7\0\1\317\47\0\1\u013e\14\0\1\u013f"+
    "\2\0\1\u013f\100\0\1\u0140\1\317\1\0\1\u0140\3\0"+
    "\1\u0140\7\0\1\317\47\0\1\u0140\14\0\1\u0141\2\0"+
    "\1\u0141\100\0\1\u0142\1\317\1\0\1\u0142\3\0\1\u0142"+
    "\7\0\1\317\47\0\1\u0142\14\0\1\u0143\2\0\1\u0143"+
    "\100\0\1\u0144\1\317\1\0\1\u0144\3\0\1\u0144\7\0"+
    "\1\317\47\0\1\u0144\14\0\1\u0145\2\0\1\u0145\101\0"+
    "\1\317\15\0\1\317\64\0\1\u0146\2\0\1\u0146\100\0"+
    "\1\u0147\2\0\1\u0147\100\0\1\u0148\2\0\1\u0148\100\0"+
    "\1\u0149\2\0\1\u0149\100\0\1\u014a\2\0\1\u014a\100\0"+
    "\1\u014b\2\0\1\u014b\100\0\1\u014c\2\0\1\u014c\100\0"+
    "\1\u014d\2\0\1\u014d\100\0\1\u014e\2\0\1\u014e\100\0"+
    "\1\u014f\2\0\1\u014f\100\0\1\u0150\2\0\1\u0150\100\0"+
    "\1\u0151\2\0\1\u0151\100\0\1\u0152\2\0\1\u0152\100\0"+
    "\1\u0153\2\0\1\u0153\100\0\1\u0154\2\0\1\u0154\100\0"+
    "\1\u0155\2\0\1\u0155\100\0\1\u0156\2\0\1\u0156\100\0"+
    "\1\u0157\2\0\1\u0157\100\0\1\u0158\2\0\1\u0158\100\0"+
    "\1\u0159\2\0\1\u0159\100\0\1\u015a\2\0\1\u015a\100\0"+
    "\1\u015b\2\0\1\u015b\100\0\1\u015c\2\0\1\u015c\100\0"+
    "\1\u015d\2\0\1\u015d\100\0\1\u015e\2\0\1\u015e\100\0"+
    "\1\u015f\2\0\1\u015f\100\0\1\u0160\2\0\1\u0160\100\0"+
    "\1\u0161\2\0\1\u0161\100\0\1\u0162\2\0\1\u0162\100\0"+
    "\1\u0163\2\0\1\u0163\100\0\1\u0164\2\0\1\u0164\100\0"+
    "\1\u0165\2\0\1\u0165\100\0\1\u0166\2\0\1\u0166\100\0"+
    "\1\u0167\2\0\1\u0167\100\0\1\u0168\2\0\1\u0168\100\0"+
    "\1\u0169\2\0\1\u0169\100\0\1\u016a\2\0\1\u016a\100\0"+
    "\1\u016b\2\0\1\u016b\100\0\1\u016c\2\0\1\u016c\100\0"+
    "\1\u016d\2\0\1\u016d\100\0\1\u016e\2\0\1\u016e\66\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18428];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\2\11\41\1\13\11\3\1\2\11"+
    "\2\1\1\11\2\1\2\0\1\11\1\1\1\0\1\11"+
    "\1\1\3\0\1\11\41\1\1\11\1\1\1\11\1\1"+
    "\11\11\2\1\2\11\2\1\6\11\13\1\2\0\1\1"+
    "\1\0\46\1\2\11\1\1\4\11\2\0\6\11\2\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\34\1\2\0"+
    "\66\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\51\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public int linea(){return yyline;}
public int columna(){return yycolumn;}
StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error léxico en linea " + (linea()+1) + ", columna " + (columna()+1));
        return new Symbol(sym.ERROR, new Simbolo(yytext(), "ERROR", linea()+1, columna()+1));
            }
          case 118: break;
          case 2: 
            { 
            }
          case 119: break;
          case 3: 
            { return new Symbol(sym.salto_linea, new Simbolo(yytext(), "Separador", linea()+1, columna()+1));
            }
          case 120: break;
          case 4: 
            { /*Ignorar*/
            }
          case 121: break;
          case 5: 
            { yybegin(STRING); 
            string.setLength(0);
            }
          case 122: break;
          case 6: 
            { yybegin(CHAR);
            }
          case 123: break;
          case 7: 
            { return new Symbol(sym.identificador, new Simbolo(yytext(), "Identificador", linea()+1, columna()+1));
            }
          case 124: break;
          case 8: 
            { return new Symbol(sym.decimal_literal, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 125: break;
          case 9: 
            { return new Symbol(sym.punto, new Simbolo(yytext(), "Separador", linea()+1, columna()+1));
            }
          case 126: break;
          case 10: 
            { return new Symbol(sym.resta, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 127: break;
          case 11: 
            { return new Symbol(sym.suma, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 128: break;
          case 12: 
            { return new Symbol(sym.multiplicacion, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 129: break;
          case 13: 
            { return new Symbol(sym.division, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 130: break;
          case 14: 
            { return new Symbol(sym.modulo, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 131: break;
          case 15: 
            { return new Symbol(sym.igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 132: break;
          case 16: 
            { return new Symbol(sym.not_symbol, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 133: break;
          case 17: 
            { return new Symbol(sym.menor_, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 134: break;
          case 18: 
            { return new Symbol(sym.mayor, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 135: break;
          case 19: 
            { return new Symbol(sym.ampersand, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 136: break;
          case 20: 
            { return new Symbol(sym.pipe, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 137: break;
          case 21: 
            { return new Symbol(sym.circunflejo, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 138: break;
          case 22: 
            { return new Symbol(sym.tilde, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 139: break;
          case 23: 
            { return new Symbol(sym.parentesis_abre, new Simbolo(yytext(), "Separador", linea()+1, columna()+1));
            }
          case 140: break;
          case 24: 
            { return new Symbol(sym.parentesis_cierra, new Simbolo(yytext(), "Separador", linea()+1, columna()+1));
            }
          case 141: break;
          case 25: 
            { return new Symbol(sym.coma, new Simbolo(yytext(), "Separador", linea()+1, columna()+1));
            }
          case 142: break;
          case 26: 
            { return new Symbol(sym.dos_puntos, new Simbolo(yytext(), "Separador", linea()+1, columna()+1));
            }
          case 143: break;
          case 27: 
            { return new Symbol(sym.cuadrado_abre, new Simbolo(yytext(), "Separador", linea()+1, columna()+1));
            }
          case 144: break;
          case 28: 
            { return new Symbol(sym.cuadrado_cierra, new Simbolo(yytext(), "Separador", linea()+1, columna()+1));
            }
          case 145: break;
          case 29: 
            { return new Symbol(sym.punto_coma, new Simbolo(yytext(), "Separador", linea()+1, columna()+1));
            }
          case 146: break;
          case 30: 
            { string.append( yytext() );
            }
          case 147: break;
          case 31: 
            { return new Symbol(sym.ERROR, new Simbolo(yytext(), "ERROR", linea()+1, columna()+1));
            }
          case 148: break;
          case 32: 
            { yybegin(YYINITIAL);
            return new Symbol(sym.string_literal, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 149: break;
          case 33: 
            { string.append(yytext()); 
                        return new Symbol(sym.char_literal, new Simbolo(Character.toString(yytext().charAt(0)), "Literal", linea()+1, columna()+1));
            }
          case 150: break;
          case 34: 
            { yybegin(YYINITIAL);
            }
          case 151: break;
          case 35: 
            { return new Symbol(sym.decimal_long, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 152: break;
          case 36: 
            { return new Symbol(sym.double_literal, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 153: break;
          case 37: 
            { return new Symbol(sym.flotante_literal, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 154: break;
          case 38: 
            { return new Symbol(sym.menos_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 155: break;
          case 39: 
            { return new Symbol(sym.or, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 156: break;
          case 40: 
            { return new Symbol(sym.as, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 157: break;
          case 41: 
            { return new Symbol(sym.if_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 158: break;
          case 42: 
            { return new Symbol(sym.is, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 159: break;
          case 43: 
            { return new Symbol(sym.in, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 160: break;
          case 44: 
            { return new Symbol(sym.mas_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 161: break;
          case 45: 
            { return new Symbol(sym.potencia, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 162: break;
          case 46: 
            { return new Symbol(sym.multiplicacion_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 163: break;
          case 47: 
            { return new Symbol(sym.division_doble, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 164: break;
          case 48: 
            { return new Symbol(sym.division_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 165: break;
          case 49: 
            { return new Symbol(sym.modulo_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 166: break;
          case 50: 
            { return new Symbol(sym.igual_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 167: break;
          case 51: 
            { return new Symbol(sym.not_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 168: break;
          case 52: 
            { return new Symbol(sym.menor_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 169: break;
          case 53: 
            { return new Symbol(sym.shift_izquierda, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 170: break;
          case 54: 
            { return new Symbol(sym.menor_mayor, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 171: break;
          case 55: 
            { return new Symbol(sym.mayor_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 172: break;
          case 56: 
            { return new Symbol(sym.shift_derecha, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 173: break;
          case 57: 
            { string.append('\"');
            }
          case 174: break;
          case 58: 
            { string.append('\'');
            }
          case 175: break;
          case 59: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8); 
                                            string.append(val);
            }
          case 176: break;
          case 60: 
            { string.append('\\');
            }
          case 177: break;
          case 61: 
            { string.append('\f');
            }
          case 178: break;
          case 62: 
            { string.append('\r');
            }
          case 179: break;
          case 63: 
            { string.append('\t');
            }
          case 180: break;
          case 64: 
            { string.append('\n');
            }
          case 181: break;
          case 65: 
            { string.append('\b');
            }
          case 182: break;
          case 66: 
            { return new Symbol(sym.binario_literal, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 183: break;
          case 67: 
            { return new Symbol(sym.hexa_literal, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 184: break;
          case 68: 
            { return new Symbol(sym.octal_literal, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 185: break;
          case 69: 
            { return new Symbol(sym.del, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 186: break;
          case 70: 
            { return new Symbol(sym.def, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 187: break;
          case 71: 
            { return new Symbol(sym.for_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 188: break;
          case 72: 
            { return new Symbol(sym.and, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 189: break;
          case 73: 
            { return new Symbol(sym.int_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 190: break;
          case 74: 
            { return new Symbol(sym.try_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 191: break;
          case 75: 
            { return new Symbol(sym.not, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 192: break;
          case 76: 
            { return new Symbol(sym.potencia_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 193: break;
          case 77: 
            { return new Symbol(sym.division_doble_igual, new Simbolo(yytext(), "Operador", linea()+1, columna()+1));
            }
          case 194: break;
          case 78: 
            { yybegin(YYINITIAL);return new Symbol(sym.char_literal, new Simbolo("\"", "Literal", linea()+1, columna()+1));
            }
          case 195: break;
          case 79: 
            { yybegin(YYINITIAL); return new Symbol(sym.char_literal, new Simbolo("\'", "Literal", linea()+1, columna()+1));
            }
          case 196: break;
          case 80: 
            { yybegin(YYINITIAL); int val = Integer.parseInt(yytext().substring(1,yylength()-1),8); 
                                            string.append(val);
            }
          case 197: break;
          case 81: 
            { yybegin(YYINITIAL); return new Symbol(sym.char_literal, new Simbolo("\\", "Literal", linea()+1, columna()+1));
            }
          case 198: break;
          case 82: 
            { yybegin(YYINITIAL); return new Symbol(sym.char_literal, new Simbolo("\f", "Literal", linea()+1, columna()+1));
            }
          case 199: break;
          case 83: 
            { yybegin(YYINITIAL); return new Symbol(sym.char_literal, new Simbolo("\r", "Literal", linea()+1, columna()+1));
            }
          case 200: break;
          case 84: 
            { yybegin(YYINITIAL); return new Symbol(sym.char_literal, new Simbolo("\t", "Literal", linea()+1, columna()+1));
            }
          case 201: break;
          case 85: 
            { yybegin(YYINITIAL); return new Symbol(sym.char_literal, new Simbolo("\n", "Literal", linea()+1, columna()+1));
            }
          case 202: break;
          case 86: 
            { yybegin(YYINITIAL); return new Symbol(sym.char_literal, new Simbolo("\b", "Literal", linea()+1, columna()+1));
            }
          case 203: break;
          case 87: 
            { return new Symbol(sym.binario_long, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 204: break;
          case 88: 
            { return new Symbol(sym.hexa_long, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 205: break;
          case 89: 
            { return new Symbol(sym.octal_long, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 206: break;
          case 90: 
            { return new Symbol(sym.else_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 207: break;
          case 91: 
            { return new Symbol(sym.elif, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 208: break;
          case 92: 
            { return new Symbol(sym.exec, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 209: break;
          case 93: 
            { return new Symbol(sym.list, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 210: break;
          case 94: 
            { return new Symbol(sym.from, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 211: break;
          case 95: 
            { return new Symbol(sym.with_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 212: break;
          case 96: 
            { return new Symbol(sym.this_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 213: break;
          case 97: 
            { return new Symbol(sym.pass, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 214: break;
          case 98: 
            { return new Symbol(sym.char_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 215: break;
          case 99: 
            { return new Symbol(sym.true_, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 216: break;
          case 100: 
            { return new Symbol(sym.false_, new Simbolo(yytext(), "Literal", linea()+1, columna()+1));
            }
          case 217: break;
          case 101: 
            { return new Symbol(sym.float_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 218: break;
          case 102: 
            { return new Symbol(sym.range, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 219: break;
          case 103: 
            { return new Symbol(sym.while_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 220: break;
          case 104: 
            { return new Symbol(sym.input, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 221: break;
          case 105: 
            { return new Symbol(sym.print_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 222: break;
          case 106: 
            { return new Symbol(sym.yield, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 223: break;
          case 107: 
            { return new Symbol(sym.class_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 224: break;
          case 108: 
            { return new Symbol(sym.break_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 225: break;
          case 109: 
            { return new Symbol(sym.except, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 226: break;
          case 110: 
            { return new Symbol(sym.lambda, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 227: break;
          case 111: 
            { return new Symbol(sym.return_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 228: break;
          case 112: 
            { return new Symbol(sym.assert_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 229: break;
          case 113: 
            { return new Symbol(sym.string, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 230: break;
          case 114: 
            { return new Symbol(sym.import_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 231: break;
          case 115: 
            { return new Symbol(sym.finally_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 232: break;
          case 116: 
            { return new Symbol(sym.boolean_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 233: break;
          case 117: 
            { return new Symbol(sym.continue_, new Simbolo(yytext(), "Palabra Reservada", linea()+1, columna()+1));
            }
          case 234: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
