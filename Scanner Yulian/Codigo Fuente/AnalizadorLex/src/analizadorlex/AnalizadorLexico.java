/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/**
Instituto Tecnológico de Costa Rica
Escuela de Computación
Curso: 		Compiladores e Intérpretes.
Proyecto: 	Scanner - "archivo.flex".
Profesora:	Ing. Erika Marin Schumann.
Estudiante:	Yulian Gerardo Ulloa Porras

II Semestre, 2016
 */
/*___________________ Seccion de codigo de usuario ___________________*/
package analizadorlex;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

//clase de los token devueltos
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }
    //Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Token #"+numToken+": "+token+" C.Lexico: "+tipo+" ["+linea
        + "," +columna + "]";
    }
}






/*___________________ Seccion de opciones y declaraciones de JFlex ___________________*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\33\1\46\1\46\1\34\22\0\1\3\1\0\1\45"+
    "\1\47\4\0\1\35\1\37\1\36\1\57\1\61\1\44\1\43\1\42"+
    "\1\52\1\50\1\51\2\62\1\53\4\2\1\60\1\61\1\56\1\55"+
    "\1\54\2\0\1\4\1\11\1\20\1\6\1\12\1\25\1\13\1\22"+
    "\1\14\1\1\1\31\1\16\1\27\1\5\1\15\1\30\1\1\1\7"+
    "\1\21\1\17\1\26\1\23\1\24\1\32\1\10\1\1\1\61\1\0"+
    "\1\61\3\0\32\1\1\40\1\0\1\41\7\0\1\46\u1fa2\0\1\46"+
    "\1\46\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\24\2\2\5\3\6"+
    "\1\1\2\6\1\1\1\0\1\1\1\3\3\6\1\0"+
    "\1\2\1\0\5\2\1\7\6\2\2\7\24\2\1\5"+
    "\1\0\1\6\1\0\2\10\1\11\1\0\1\11\3\0"+
    "\1\12\3\13\1\0\1\6\1\10\1\2\1\10\1\14"+
    "\1\7\25\2\1\7\4\2\2\10\2\0\1\10\1\11"+
    "\1\0\3\10\2\11\1\13\1\12\1\10\1\13\1\10"+
    "\1\2\2\0\2\2\1\7\20\2\1\0\1\10\1\0"+
    "\1\10\1\2\1\10\1\15\1\0\1\7\15\2\1\7"+
    "\10\2\1\7\4\2\1\7\2\2\1\7\166\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\63\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\63\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4"+
    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0792\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0e8b"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u075f"+
    "\0\u11ee\0\u1221\0\u1254\0\u11ee\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8"+
    "\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8"+
    "\0\u181b\0\u184e\0\u184e\0\u0e8b\0\u0f8a\0\u1881\0\u18b4\0\u0fbd"+
    "\0\u18e7\0\u191a\0\u0e8b\0\u0e8b\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u19e6\0\u1ae5\0\u1b18\0\u1b4b"+
    "\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e15\0\u1e48"+
    "\0\u0e8b\0\u1e7b\0\u1eae\0\u1ee1\0\u1ee1\0\u1e7b\0\u1f14\0\u1f47"+
    "\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df"+
    "\0\u2112\0\u2145\0\u2178\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244"+
    "\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2310\0\u2343\0\u2376\0\u23a9"+
    "\0\u23dc\0\u23dc\0\u240f\0\u2442\0\u2442\0\u2475\0\u24a8\0\u24db"+
    "\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673"+
    "\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b"+
    "\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3"+
    "\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b"+
    "\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3"+
    "\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b"+
    "\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003"+
    "\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b"+
    "\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333"+
    "\0\u3366\0\u3399\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb"+
    "\0\u34fe\0\u3531\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663"+
    "\0\u3696\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb"+
    "\0\u382e\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960\0\u3993"+
    "\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b"+
    "\0\u3b5e\0\u3b91\0\u0e8b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\3\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\2\1\40\1\36\1\41\1\42\1\43\1\44"+
    "\2\4\1\45\1\4\1\46\1\36\1\47\1\50\1\35"+
    "\1\36\1\4\43\0\1\51\20\0\2\52\1\0\27\52"+
    "\10\0\1\51\4\0\4\52\6\0\1\52\2\0\1\4"+
    "\40\0\1\53\4\0\4\4\6\0\1\4\1\0\2\52"+
    "\1\0\1\52\1\54\1\52\1\55\23\52\10\0\1\51"+
    "\4\0\4\52\6\0\1\52\1\0\2\52\1\0\10\52"+
    "\1\56\1\57\15\52\10\0\1\51\4\0\4\52\6\0"+
    "\1\52\1\0\2\52\1\0\10\52\1\60\1\61\15\52"+
    "\10\0\1\51\4\0\4\52\6\0\1\52\1\0\2\52"+
    "\1\0\6\52\1\62\20\52\10\0\1\51\4\0\4\52"+
    "\6\0\1\52\1\0\2\52\1\0\4\52\1\63\1\52"+
    "\1\64\2\52\1\65\15\52\10\0\1\51\4\0\4\52"+
    "\6\0\1\52\1\0\2\52\1\0\1\52\1\54\10\52"+
    "\1\66\14\52\10\0\1\51\4\0\4\52\6\0\1\52"+
    "\1\0\2\52\1\0\11\52\1\67\15\52\10\0\1\51"+
    "\4\0\4\52\6\0\1\52\1\0\2\52\1\0\1\52"+
    "\1\70\17\52\1\71\5\52\10\0\1\51\4\0\4\52"+
    "\6\0\1\52\1\0\2\52\1\0\3\52\1\71\15\52"+
    "\1\71\5\52\10\0\1\51\4\0\4\52\6\0\1\52"+
    "\1\0\2\52\1\0\1\72\10\52\1\73\15\52\10\0"+
    "\1\51\4\0\4\52\6\0\1\52\1\0\2\52\1\0"+
    "\3\52\1\74\1\75\4\52\1\71\4\52\1\76\10\52"+
    "\10\0\1\51\4\0\4\52\6\0\1\52\1\0\2\52"+
    "\1\0\1\66\10\52\1\77\4\52\1\100\10\52\10\0"+
    "\1\51\4\0\4\52\6\0\1\52\1\0\2\52\1\0"+
    "\6\52\1\57\4\52\1\101\2\52\1\102\10\52\10\0"+
    "\1\51\4\0\4\52\6\0\1\52\1\0\2\52\1\0"+
    "\1\103\26\52\10\0\1\51\4\0\4\52\6\0\1\52"+
    "\1\0\2\52\1\0\3\52\1\104\4\52\1\105\5\52"+
    "\1\106\10\52\10\0\1\51\4\0\4\52\6\0\1\52"+
    "\1\0\2\52\1\0\1\107\7\52\1\110\1\111\10\52"+
    "\1\112\4\52\10\0\1\51\4\0\4\52\6\0\1\52"+
    "\1\0\2\52\1\0\1\52\1\113\25\52\10\0\1\51"+
    "\4\0\4\52\6\0\1\52\1\0\2\52\1\0\11\52"+
    "\1\54\15\52\10\0\1\51\4\0\4\52\6\0\1\52"+
    "\1\0\2\52\1\0\1\114\2\52\1\115\23\52\10\0"+
    "\1\51\4\0\4\52\6\0\1\52\1\0\2\52\1\0"+
    "\11\52\1\103\15\52\10\0\1\51\4\0\4\52\6\0"+
    "\1\52\34\0\1\116\6\0\1\51\52\0\1\116\7\0"+
    "\1\51\55\0\1\117\4\0\1\51\62\0\1\51\11\0"+
    "\1\120\5\0\33\121\1\122\1\123\4\121\1\124\1\121"+
    "\1\125\17\121\42\0\1\126\1\51\11\0\1\120\50\0"+
    "\1\51\1\120\10\0\1\120\5\0\33\127\2\130\6\127"+
    "\1\131\1\127\1\132\1\130\14\127\2\0\1\133\40\0"+
    "\1\51\4\0\1\134\1\135\2\133\6\0\1\133\2\0"+
    "\1\4\40\0\1\136\4\0\4\4\6\0\1\4\43\0"+
    "\1\51\10\0\1\137\1\120\50\0\1\51\10\0\2\120"+
    "\1\137\47\0\1\51\11\0\1\120\1\0\1\120\5\0"+
    "\1\140\45\0\4\140\6\0\1\140\1\0\2\141\1\0"+
    "\27\141\15\0\4\141\6\0\1\141\2\142\1\143\45\142"+
    "\4\143\6\142\1\143\1\0\2\141\1\0\2\141\1\144"+
    "\24\141\15\0\4\141\6\0\1\141\1\0\2\141\1\0"+
    "\3\141\1\145\23\141\15\0\4\141\6\0\1\141\1\0"+
    "\2\141\1\0\12\141\1\144\14\141\15\0\4\141\6\0"+
    "\1\141\1\0\2\141\1\0\13\141\1\144\13\141\15\0"+
    "\4\141\6\0\1\141\1\0\2\141\1\0\17\141\1\144"+
    "\7\141\15\0\4\141\6\0\1\141\1\0\2\141\1\0"+
    "\20\141\1\146\6\141\15\0\4\141\6\0\1\141\1\0"+
    "\2\141\1\0\1\147\13\141\1\150\7\141\1\151\2\141"+
    "\15\0\4\141\6\0\1\141\1\0\2\141\1\0\13\141"+
    "\1\152\13\141\15\0\4\141\6\0\1\141\1\0\2\141"+
    "\1\0\7\141\1\153\17\141\15\0\4\141\6\0\1\141"+
    "\1\0\2\141\1\0\11\141\1\154\15\141\15\0\4\141"+
    "\6\0\1\141\1\0\2\141\1\0\15\141\1\152\11\141"+
    "\15\0\4\141\6\0\1\141\1\0\2\141\1\0\13\141"+
    "\1\155\13\141\15\0\4\141\6\0\1\141\1\0\2\141"+
    "\1\0\12\141\1\156\1\144\13\141\15\0\4\141\6\0"+
    "\1\141\1\0\2\141\1\0\5\141\1\157\21\141\15\0"+
    "\4\141\6\0\1\141\1\0\2\141\1\0\1\141\1\160"+
    "\25\141\15\0\4\141\6\0\1\141\1\0\2\141\1\0"+
    "\22\141\1\152\4\141\15\0\4\141\6\0\1\141\1\0"+
    "\2\141\1\0\24\141\1\152\2\141\15\0\4\141\6\0"+
    "\1\141\1\0\2\141\1\0\6\141\1\161\20\141\15\0"+
    "\4\141\6\0\1\141\1\0\2\141\1\0\1\141\1\162"+
    "\25\141\15\0\4\141\6\0\1\141\1\0\2\141\1\0"+
    "\1\163\26\141\15\0\4\141\6\0\1\141\1\0\2\141"+
    "\1\0\3\141\1\164\23\141\15\0\4\141\6\0\1\141"+
    "\1\0\2\141\1\0\11\141\1\165\15\141\15\0\4\141"+
    "\6\0\1\141\1\0\2\141\1\0\3\141\1\144\23\141"+
    "\15\0\4\141\6\0\1\141\1\0\2\141\1\0\10\141"+
    "\1\166\16\141\15\0\4\141\6\0\1\141\1\0\2\141"+
    "\1\0\13\141\1\167\13\141\15\0\4\141\6\0\1\141"+
    "\1\0\2\141\1\0\10\141\1\170\16\141\15\0\4\141"+
    "\6\0\1\141\1\0\2\141\1\0\12\141\1\171\14\141"+
    "\15\0\4\141\6\0\1\141\1\0\2\141\1\0\12\141"+
    "\1\152\14\141\15\0\4\141\6\0\1\141\1\0\2\141"+
    "\1\0\3\141\1\172\23\141\15\0\4\141\6\0\1\141"+
    "\1\0\2\141\1\0\1\141\1\173\25\141\15\0\4\141"+
    "\6\0\1\141\1\0\2\141\1\0\13\141\1\174\13\141"+
    "\15\0\4\141\6\0\1\141\1\0\2\141\1\0\14\141"+
    "\1\175\12\141\15\0\4\141\6\0\1\141\1\0\2\141"+
    "\1\0\11\141\1\176\15\141\15\0\4\141\6\0\1\141"+
    "\63\0\33\117\1\177\1\200\1\117\1\201\24\117\33\121"+
    "\1\122\1\123\4\121\1\124\21\121\34\202\1\203\4\202"+
    "\1\204\54\202\1\203\5\202\1\204\21\202\33\205\1\206"+
    "\1\207\26\205\2\121\1\210\30\121\1\122\1\123\4\121"+
    "\1\124\6\121\4\210\6\121\1\210\33\126\1\211\1\212"+
    "\26\126\45\130\1\213\62\130\1\214\17\130\1\215\42\130"+
    "\1\213\2\130\4\215\6\130\1\215\45\0\1\213\17\0"+
    "\1\213\45\0\4\213\6\0\1\213\2\0\1\133\45\0"+
    "\4\133\6\0\1\133\2\0\1\213\45\0\3\133\1\216"+
    "\6\0\1\133\2\142\1\217\45\142\4\217\6\142\1\217"+
    "\55\0\1\120\6\0\2\220\1\0\27\220\15\0\4\220"+
    "\6\0\1\220\12\0\1\221\52\0\1\143\7\0\1\222"+
    "\35\0\4\143\6\0\1\143\1\0\2\220\1\0\1\223"+
    "\26\220\15\0\4\220\6\0\1\220\1\0\2\220\1\0"+
    "\1\220\1\224\25\220\15\0\4\220\6\0\1\220\1\0"+
    "\2\220\1\0\2\220\1\225\7\220\1\225\14\220\15\0"+
    "\4\220\6\0\1\220\1\0\2\220\1\0\11\220\1\226"+
    "\15\220\15\0\4\220\6\0\1\220\1\0\2\220\1\0"+
    "\6\220\1\227\20\220\15\0\4\220\6\0\1\220\1\0"+
    "\2\220\1\0\6\220\1\225\20\220\15\0\4\220\6\0"+
    "\1\220\1\0\2\220\1\0\10\220\1\230\16\220\15\0"+
    "\4\220\6\0\1\220\1\0\2\220\1\0\12\220\1\231"+
    "\14\220\15\0\4\220\6\0\1\220\1\0\2\220\1\0"+
    "\11\220\1\225\15\220\15\0\4\220\6\0\1\220\1\0"+
    "\2\220\1\0\10\220\1\232\16\220\15\0\4\220\6\0"+
    "\1\220\1\0\2\220\1\0\6\220\1\233\20\220\15\0"+
    "\4\220\6\0\1\220\1\0\2\220\1\0\7\220\1\234"+
    "\17\220\15\0\4\220\6\0\1\220\1\0\2\220\1\0"+
    "\1\220\1\225\25\220\15\0\4\220\6\0\1\220\1\0"+
    "\2\220\1\0\15\220\1\235\11\220\15\0\4\220\6\0"+
    "\1\220\1\0\2\220\1\0\3\220\1\225\23\220\15\0"+
    "\4\220\6\0\1\220\1\0\2\220\1\0\10\220\1\236"+
    "\16\220\15\0\4\220\6\0\1\220\1\0\2\220\1\0"+
    "\3\220\1\237\23\220\15\0\4\220\6\0\1\220\1\0"+
    "\2\220\1\0\13\220\1\240\13\220\15\0\4\220\6\0"+
    "\1\220\1\0\2\220\1\0\16\220\1\225\10\220\15\0"+
    "\4\220\6\0\1\220\1\0\2\220\1\0\12\220\1\240"+
    "\14\220\15\0\4\220\6\0\1\220\1\0\2\220\1\0"+
    "\15\220\1\240\11\220\15\0\4\220\6\0\1\220\1\0"+
    "\2\220\1\0\20\220\1\241\6\220\15\0\4\220\6\0"+
    "\1\220\1\0\2\220\1\0\14\220\1\242\12\220\15\0"+
    "\4\220\6\0\1\220\1\0\2\220\1\0\10\220\1\233"+
    "\16\220\15\0\4\220\6\0\1\220\1\0\2\220\1\0"+
    "\25\220\1\243\1\220\15\0\4\220\6\0\1\220\1\0"+
    "\2\220\1\0\7\220\1\244\4\220\1\245\12\220\15\0"+
    "\4\220\6\0\1\220\34\246\1\247\1\246\1\250\57\246"+
    "\1\247\2\246\1\250\24\246\33\117\1\177\1\200\1\117"+
    "\1\201\1\124\23\117\41\202\1\204\21\202\34\0\1\251"+
    "\61\0\1\251\63\0\1\204\61\0\1\204\27\0\2\130"+
    "\1\215\42\130\1\214\2\130\4\215\6\130\1\215\50\0"+
    "\4\213\6\0\1\213\2\0\1\217\7\0\1\222\35\0"+
    "\4\217\6\0\1\217\1\0\2\252\1\0\27\252\15\0"+
    "\4\252\6\0\1\252\2\251\1\0\41\251\1\253\3\251"+
    "\4\0\6\251\3\0\1\254\41\0\1\255\3\0\4\254"+
    "\6\0\1\254\1\0\2\252\1\0\4\252\1\256\22\252"+
    "\15\0\4\252\6\0\1\252\1\0\2\252\1\0\13\252"+
    "\1\257\13\252\15\0\4\252\6\0\1\252\1\0\2\252"+
    "\1\0\3\252\1\260\23\252\15\0\4\252\6\0\1\252"+
    "\1\0\2\252\1\0\1\261\26\252\15\0\4\252\6\0"+
    "\1\252\1\0\2\252\1\0\1\252\1\256\25\252\15\0"+
    "\4\252\6\0\1\252\1\0\2\252\1\0\6\252\1\262"+
    "\20\252\15\0\4\252\6\0\1\252\1\0\2\252\1\0"+
    "\1\252\1\263\25\252\15\0\4\252\6\0\1\252\1\0"+
    "\2\252\1\0\12\252\1\256\14\252\15\0\4\252\6\0"+
    "\1\252\1\0\2\252\1\0\10\252\1\264\16\252\15\0"+
    "\4\252\6\0\1\252\1\0\2\252\1\0\13\252\1\256"+
    "\13\252\15\0\4\252\6\0\1\252\1\0\2\252\1\0"+
    "\1\252\1\265\25\252\15\0\4\252\6\0\1\252\1\0"+
    "\2\252\1\0\13\252\1\266\13\252\15\0\4\252\6\0"+
    "\1\252\1\0\2\252\1\0\6\252\1\256\20\252\15\0"+
    "\4\252\6\0\1\252\1\0\2\252\1\0\1\267\26\252"+
    "\15\0\4\252\6\0\1\252\1\0\2\252\1\0\13\252"+
    "\1\270\13\252\15\0\4\252\6\0\1\252\1\0\2\252"+
    "\1\0\6\252\1\260\20\252\15\0\4\252\6\0\1\252"+
    "\1\0\2\252\1\0\3\252\1\271\23\252\15\0\4\252"+
    "\6\0\1\252\1\0\2\252\1\0\6\252\1\272\20\252"+
    "\15\0\4\252\6\0\1\252\36\246\1\250\62\246\1\250"+
    "\1\204\23\246\1\0\2\273\1\0\27\273\15\0\4\273"+
    "\6\0\1\273\2\251\1\0\45\251\4\0\6\251\3\0"+
    "\1\254\45\0\4\254\6\0\1\254\1\0\2\273\1\0"+
    "\11\273\1\274\15\273\15\0\4\273\6\0\1\273\1\0"+
    "\2\273\1\0\2\273\1\274\24\273\15\0\4\273\6\0"+
    "\1\273\1\0\2\273\1\0\13\273\1\274\13\273\15\0"+
    "\4\273\6\0\1\273\1\0\2\273\1\0\1\275\26\273"+
    "\15\0\4\273\6\0\1\273\1\0\2\273\1\0\6\273"+
    "\1\274\20\273\15\0\4\273\6\0\1\273\1\0\2\273"+
    "\1\0\1\273\1\276\25\273\15\0\4\273\6\0\1\273"+
    "\1\0\2\273\1\0\7\273\1\274\17\273\15\0\4\273"+
    "\6\0\1\273\1\0\2\273\1\0\10\273\1\277\16\273"+
    "\15\0\4\273\6\0\1\273\1\0\2\273\1\0\3\273"+
    "\1\300\23\273\15\0\4\273\6\0\1\273\1\0\2\273"+
    "\1\0\10\273\1\301\16\273\15\0\4\273\6\0\1\273"+
    "\1\0\2\273\1\0\1\302\26\273\15\0\4\273\6\0"+
    "\1\273\1\0\2\273\1\0\2\273\1\303\24\273\15\0"+
    "\4\273\6\0\1\273\1\0\2\304\1\0\27\304\15\0"+
    "\4\304\6\0\1\304\1\0\2\304\1\0\1\304\1\305"+
    "\25\304\15\0\4\304\6\0\1\304\1\0\2\304\1\0"+
    "\13\304\1\305\13\304\15\0\4\304\6\0\1\304\1\0"+
    "\2\304\1\0\1\304\1\306\25\304\15\0\4\304\6\0"+
    "\1\304\1\0\2\304\1\0\2\304\1\305\24\304\15\0"+
    "\4\304\6\0\1\304\1\0\2\304\1\0\11\304\1\307"+
    "\15\304\15\0\4\304\6\0\1\304\1\0\2\304\1\0"+
    "\23\304\1\305\3\304\15\0\4\304\6\0\1\304\1\0"+
    "\2\304\1\0\22\304\1\310\4\304\15\0\4\304\6\0"+
    "\1\304\1\0\2\311\1\0\27\311\15\0\4\311\6\0"+
    "\1\311\1\0\2\311\1\0\13\311\1\312\13\311\15\0"+
    "\4\311\6\0\1\311\1\0\2\311\1\0\1\311\1\312"+
    "\25\311\15\0\4\311\6\0\1\311\1\0\2\311\1\0"+
    "\3\311\1\313\23\311\15\0\4\311\6\0\1\311\1\0"+
    "\2\314\1\0\27\314\15\0\4\314\6\0\1\314\1\0"+
    "\2\314\1\0\6\314\1\315\20\314\15\0\4\314\6\0"+
    "\1\314\1\0\2\316\1\0\27\316\15\0\4\316\6\0"+
    "\1\316\1\0\2\317\1\0\27\317\15\0\4\317\6\0"+
    "\1\317\1\0\2\320\1\0\27\320\15\0\4\320\6\0"+
    "\1\320\1\0\2\321\1\0\27\321\15\0\4\321\6\0"+
    "\1\321\1\0\2\322\1\0\27\322\15\0\4\322\6\0"+
    "\1\322\1\0\2\323\1\0\27\323\15\0\4\323\6\0"+
    "\1\323\1\0\2\324\1\0\27\324\15\0\4\324\6\0"+
    "\1\324\1\0\2\325\1\0\27\325\15\0\4\325\6\0"+
    "\1\325\1\0\2\326\1\0\27\326\15\0\4\326\6\0"+
    "\1\326\1\0\2\327\1\0\27\327\15\0\4\327\6\0"+
    "\1\327\1\0\2\330\1\0\27\330\15\0\4\330\6\0"+
    "\1\330\1\0\2\331\1\0\27\331\15\0\4\331\6\0"+
    "\1\331\1\0\2\332\1\0\27\332\15\0\4\332\6\0"+
    "\1\332\1\0\2\333\1\0\27\333\15\0\4\333\6\0"+
    "\1\333\1\0\2\334\1\0\27\334\15\0\4\334\6\0"+
    "\1\334\1\0\2\335\1\0\27\335\15\0\4\335\6\0"+
    "\1\335\1\0\2\336\1\0\27\336\15\0\4\336\6\0"+
    "\1\336\1\0\2\337\1\0\27\337\15\0\4\337\6\0"+
    "\1\337\1\0\2\340\1\0\27\340\15\0\4\340\6\0"+
    "\1\340\1\0\2\341\1\0\27\341\15\0\4\341\6\0"+
    "\1\341\1\0\2\342\1\0\27\342\15\0\4\342\6\0"+
    "\1\342\1\0\2\343\1\0\27\343\15\0\4\343\6\0"+
    "\1\343\1\0\2\344\1\0\27\344\15\0\4\344\6\0"+
    "\1\344\1\0\2\345\1\0\27\345\15\0\4\345\6\0"+
    "\1\345\1\0\2\346\1\0\27\346\15\0\4\346\6\0"+
    "\1\346\1\0\2\347\1\0\27\347\15\0\4\347\6\0"+
    "\1\347\1\0\2\350\1\0\27\350\15\0\4\350\6\0"+
    "\1\350\1\0\2\351\1\0\27\351\15\0\4\351\6\0"+
    "\1\351\1\0\2\352\1\0\27\352\15\0\4\352\6\0"+
    "\1\352\1\0\2\353\1\0\27\353\15\0\4\353\6\0"+
    "\1\353\1\0\2\354\1\0\27\354\15\0\4\354\6\0"+
    "\1\354\1\0\2\355\1\0\27\355\15\0\4\355\6\0"+
    "\1\355\1\0\2\356\1\0\27\356\15\0\4\356\6\0"+
    "\1\356\1\0\2\357\1\0\27\357\15\0\4\357\6\0"+
    "\1\357\1\0\2\360\1\0\27\360\15\0\4\360\6\0"+
    "\1\360\1\0\2\361\1\0\27\361\15\0\4\361\6\0"+
    "\1\361\1\0\2\362\1\0\27\362\15\0\4\362\6\0"+
    "\1\362\1\0\2\363\1\0\27\363\15\0\4\363\6\0"+
    "\1\363\1\0\2\364\1\0\27\364\15\0\4\364\6\0"+
    "\1\364\1\0\2\365\1\0\27\365\15\0\4\365\6\0"+
    "\1\365\1\0\2\366\1\0\27\366\15\0\4\366\6\0"+
    "\1\366\1\0\2\367\1\0\27\367\15\0\4\367\6\0"+
    "\1\367\1\0\2\370\1\0\27\370\15\0\4\370\6\0"+
    "\1\370\1\0\2\371\1\0\27\371\15\0\4\371\6\0"+
    "\1\371\1\0\2\372\1\0\27\372\15\0\4\372\6\0"+
    "\1\372\1\0\2\373\1\0\27\373\15\0\4\373\6\0"+
    "\1\373\1\0\2\374\1\0\27\374\15\0\4\374\6\0"+
    "\1\374\1\0\2\375\1\0\27\375\15\0\4\375\6\0"+
    "\1\375\1\0\2\376\1\0\27\376\15\0\4\376\6\0"+
    "\1\376\1\0\2\377\1\0\27\377\15\0\4\377\6\0"+
    "\1\377\1\0\2\u0100\1\0\27\u0100\15\0\4\u0100\6\0"+
    "\1\u0100\1\0\2\u0101\1\0\27\u0101\15\0\4\u0101\6\0"+
    "\1\u0101\1\0\2\u0102\1\0\27\u0102\15\0\4\u0102\6\0"+
    "\1\u0102\1\0\2\u0103\1\0\27\u0103\15\0\4\u0103\6\0"+
    "\1\u0103\1\0\2\u0104\1\0\27\u0104\15\0\4\u0104\6\0"+
    "\1\u0104\1\0\2\u0105\1\0\27\u0105\15\0\4\u0105\6\0"+
    "\1\u0105\1\0\2\u0106\1\0\27\u0106\15\0\4\u0106\6\0"+
    "\1\u0106\1\0\2\u0107\1\0\27\u0107\15\0\4\u0107\6\0"+
    "\1\u0107\1\0\2\u0108\1\0\27\u0108\15\0\4\u0108\6\0"+
    "\1\u0108\1\0\2\u0109\1\0\27\u0109\15\0\4\u0109\6\0"+
    "\1\u0109\1\0\2\u010a\1\0\27\u010a\15\0\4\u010a\6\0"+
    "\1\u010a\1\0\2\u010b\1\0\27\u010b\15\0\4\u010b\6\0"+
    "\1\u010b\1\0\2\u010c\1\0\27\u010c\15\0\4\u010c\6\0"+
    "\1\u010c\1\0\2\u010d\1\0\27\u010d\15\0\4\u010d\6\0"+
    "\1\u010d\1\0\2\u010e\1\0\27\u010e\15\0\4\u010e\6\0"+
    "\1\u010e\1\0\2\u010f\1\0\27\u010f\15\0\4\u010f\6\0"+
    "\1\u010f\1\0\2\u0110\1\0\27\u0110\15\0\4\u0110\6\0"+
    "\1\u0110\1\0\2\u0111\1\0\27\u0111\15\0\4\u0111\6\0"+
    "\1\u0111\1\0\2\u0112\1\0\27\u0112\15\0\4\u0112\6\0"+
    "\1\u0112\1\0\2\u0113\1\0\27\u0113\15\0\4\u0113\6\0"+
    "\1\u0113\1\0\2\u0114\1\0\27\u0114\15\0\4\u0114\6\0"+
    "\1\u0114\1\0\2\u0115\1\0\27\u0115\15\0\4\u0115\6\0"+
    "\1\u0115\1\0\2\u0116\1\0\27\u0116\15\0\4\u0116\6\0"+
    "\1\u0116\1\0\2\u0117\1\0\27\u0117\15\0\4\u0117\6\0"+
    "\1\u0117\1\0\2\u0118\1\0\27\u0118\15\0\4\u0118\6\0"+
    "\1\u0118\1\0\2\u0119\1\0\27\u0119\15\0\4\u0119\6\0"+
    "\1\u0119\1\0\2\u011a\1\0\27\u011a\15\0\4\u011a\6\0"+
    "\1\u011a\1\0\2\u011b\1\0\27\u011b\15\0\4\u011b\6\0"+
    "\1\u011b\1\0\2\u011c\1\0\27\u011c\15\0\4\u011c\6\0"+
    "\1\u011c\1\0\2\u011d\1\0\27\u011d\15\0\4\u011d\6\0"+
    "\1\u011d\1\0\2\u011e\1\0\27\u011e\15\0\4\u011e\6\0"+
    "\1\u011e\1\0\2\u011f\1\0\27\u011f\15\0\4\u011f\6\0"+
    "\1\u011f\1\0\2\u0120\1\0\27\u0120\15\0\4\u0120\6\0"+
    "\1\u0120\1\0\2\u0121\1\0\27\u0121\15\0\4\u0121\6\0"+
    "\1\u0121\1\0\2\u0122\1\0\27\u0122\15\0\4\u0122\6\0"+
    "\1\u0122\1\0\2\u0123\1\0\27\u0123\15\0\4\u0123\6\0"+
    "\1\u0123\1\0\2\u0124\1\0\27\u0124\15\0\4\u0124\6\0"+
    "\1\u0124\1\0\2\u0125\1\0\27\u0125\15\0\4\u0125\6\0"+
    "\1\u0125\1\0\2\u0126\1\0\27\u0126\15\0\4\u0126\6\0"+
    "\1\u0126\1\0\2\u0127\1\0\27\u0127\15\0\4\u0127\6\0"+
    "\1\u0127\1\0\2\u0128\1\0\27\u0128\15\0\4\u0128\6\0"+
    "\1\u0128\1\0\2\u0129\1\0\27\u0129\15\0\4\u0129\6\0"+
    "\1\u0129\1\0\2\u012a\1\0\27\u012a\15\0\4\u012a\6\0"+
    "\1\u012a\1\0\2\u012b\1\0\27\u012b\15\0\4\u012b\6\0"+
    "\1\u012b\1\0\2\u012c\1\0\27\u012c\15\0\4\u012c\6\0"+
    "\1\u012c\1\0\2\u012d\1\0\27\u012d\15\0\4\u012d\6\0"+
    "\1\u012d\1\0\2\u012e\1\0\27\u012e\15\0\4\u012e\6\0"+
    "\1\u012e\1\0\2\u012f\1\0\27\u012f\15\0\4\u012f\6\0"+
    "\1\u012f\1\0\2\u0130\1\0\27\u0130\15\0\4\u0130\6\0"+
    "\1\u0130\1\0\2\u0131\1\0\27\u0131\15\0\4\u0131\6\0"+
    "\1\u0131\1\0\2\u0132\1\0\27\u0132\15\0\4\u0132\6\0"+
    "\1\u0132\1\0\2\u0133\1\0\27\u0133\15\0\4\u0133\6\0"+
    "\1\u0133\1\0\2\u0134\1\0\27\u0134\15\0\4\u0134\6\0"+
    "\1\u0134\1\0\2\u0135\1\0\27\u0135\15\0\4\u0135\6\0"+
    "\1\u0135\1\0\2\u0136\1\0\27\u0136\15\0\4\u0136\6\0"+
    "\1\u0136\1\0\2\u0137\1\0\27\u0137\15\0\4\u0137\6\0"+
    "\1\u0137\1\0\2\u0138\1\0\27\u0138\15\0\4\u0138\6\0"+
    "\1\u0138\1\0\2\u0139\1\0\27\u0139\15\0\4\u0139\6\0"+
    "\1\u0139\1\0\2\u013a\1\0\27\u013a\15\0\4\u013a\6\0"+
    "\1\u013a\1\0\2\u013b\1\0\27\u013b\15\0\4\u013b\6\0"+
    "\1\u013b\1\0\2\u013c\1\0\27\u013c\15\0\4\u013c\6\0"+
    "\1\u013c\1\0\2\u013d\1\0\27\u013d\15\0\4\u013d\6\0"+
    "\1\u013d\1\0\2\u013e\1\0\27\u013e\15\0\4\u013e\6\0"+
    "\1\u013e\1\0\2\u013f\1\0\27\u013f\15\0\4\u013f\6\0"+
    "\1\u013f\1\0\2\u0140\1\0\27\u0140\15\0\4\u0140\6\0"+
    "\1\u0140\1\0\2\u0141\1\0\27\u0141\15\0\4\u0141\6\0"+
    "\1\u0141\1\0\2\u0142\1\0\27\u0142\15\0\4\u0142\6\0"+
    "\1\u0142\1\0\2\u0143\1\0\27\u0143\15\0\4\u0143\6\0"+
    "\1\u0143";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\41\1\1\0\5\1\1\0\1\1\1\0\42\1"+
    "\1\11\1\0\1\11\1\0\3\1\1\0\1\1\3\0"+
    "\4\1\1\0\42\1\2\0\1\1\1\11\1\0\5\1"+
    "\2\11\4\1\2\0\23\1\1\0\1\1\1\0\1\11"+
    "\3\1\1\0\225\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
    private int contador;
    private ArrayList<Yytoken> tokens;

	private void writeOutputFile() throws IOException{
			String filename = "fileTokensFound.out";
			BufferedWriter out = new BufferedWriter(
				new FileWriter(filename));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(Yytoken t: this.tokens){
				//System.out.println(t);
				out.write(t + "\n");
			}
			out.close();
	}
    private void ImprimirError(int pLinea, int pColumna){
        System.out.println("ERROR LEXICO, "
            + "linea:" +String.valueOf(pLinea)
            + " columna:" +String.valueOf(pColumna));
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      contador = 0;
	tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try{
		this.writeOutputFile();
	}catch(IOException ioe){
		ioe.printStackTrace();
	}

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { //contador++;
	//Yytoken t = new Yytoken(-1,"ERROR_LEXICO","ERROR_LEXICO",yyline,yycolumn);
	//return t;
    ImprimirError(yyline+1,yycolumn+1);
          }
        case 14: break;
        case 2: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext().toLowerCase(),"Identificador",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 15: break;
        case 3: 
          { contador++;
    Yytoken t = new Yytoken(contador,
        String.valueOf(Integer.valueOf(yytext())),
        "Literal_Numerica_Entera",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 16: break;
        case 4: 
          { //ignorar
          }
        case 17: break;
        case 5: 
          { //contador++;
    //Yytoken t = new Yytoken(contador,"","fin_linea",yyline,yycolumn);
    //tokens.add(t);
    //return t;
    //ignorar
          }
        case 18: break;
        case 6: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Operador",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 19: break;
        case 7: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Palabra_Reservada",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 20: break;
        case 8: 
          { ImprimirError(yyline+1,yycolumn+1);
          }
        case 21: break;
        case 9: 
          { /* ignore */
          }
        case 22: break;
        case 10: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Literal_String",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 23: break;
        case 11: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Literal_Caracter",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 24: break;
        case 12: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Literal_Numerica_Flotante",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 25: break;
        case 13: 
          { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"Literal_Numerica_Real",yyline,yycolumn);
    tokens.add(t);
    return t;
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
