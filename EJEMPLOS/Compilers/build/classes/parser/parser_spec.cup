  
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
package parser;
import java_cup.runtime.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    
     public void report_error(String message, Object info) 
    {

      if (info instanceof String)
      {


        System.err.println("  " + "==> " + info + " "+ message + 
                                          "\n       Parsing resumed from 2nd token before " 
                + " token: " + this.cur_token.value
                + " fila: " + (this.cur_token.left) 
                +  " columna: " + (this.cur_token.right) +"\n");
        System.out.println(this.cur_err_token().value + " " + this.cur_err_token().left + " " +
                this.cur_err_token().right);
      }
      else 
      {
          StringBuffer m = new StringBuffer("Error ");
          if (info instanceof java_cup.runtime.Symbol) 
          {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
             m.append( "("+info.toString()+")" );     
             m.append(" : "+message);   
             System.err.println(m); 

             System.out.println(s.value + " " + s.left + "  " + s.right);
          }

      }

    }
   
    
    public void report_fatal_error(String message, Object info) {
        
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal Integer   NUMBER, ID;
   
/* Non terminals used in the grammar section.  

   Non terminals that have an object value are listed first and then
   non terminals that have an integer value are listed.  An object
   value means that it can be any type, it isn't set to a specific
   type.  So it could be an Integer or a String or whatever. */
non terminal Object     expr_list, expr_part;
non terminal Integer    expr, factor, term;
   

/* -------------Precedence and Associatively of Terminals Section----------- */
   
/*
  Precedence of non terminals could be defined here.  If you do define
  precedence here you won't need to worry about precedence in the
  Grammar Section, i.e. that TIMES should have a higher precedence
  than PLUS.
  
  The precedence defined here would look something like this where the
  lower line always will have higher precedence than the line before it.
   
  precedence left PLUS, MINUS; 
  precedence left TIMES, DIVIDE; 
*/


/* ----------------------------Grammar Section-------------------- */
   
/* The grammar for our parser.
   
   expr_list ::=   expr_list expr_part
                 | expr_part
   expr_part ::=   expr SEMI
   expr      ::=   expr PLUS factor
                 | expr MINUS factor
                 | factor
   factor    ::=   factor TIMES term
                 | factor DIVIDE term
                 | term
   term     ::=    LPAREN expr RPAREN
                 | NUMBER
                 | ID     
*/
      
   expr_list ::= expr_list expr_part | expr_part;
      
   expr_part ::= expr SEMI | error:e {: parser.report_error("Syntax error, skip rest",e); :} SEMI;
   
   expr     ::=   expr PLUS factor
                | expr MINUS factor
                | factor
                ;
   
   factor   ::=  factor TIMES term
                | factor DIVIDE term
                | term
                ;
   
   term     ::=   LPAREN expr RPAREN
                | NUMBER
                | ID
                ;