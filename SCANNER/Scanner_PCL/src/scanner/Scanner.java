/* The following code was generated by JFlex 1.6.1 */

package scanner;

import java_cup.runtime.*;
import symbols.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>G:/git/Compilador-PCL/SCANNER/Scanner_PCL/src/scanner/pcl_rules.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\2\1\21\1\21\1\3\22\0\1\23\1\0\1\16"+
    "\1\17\4\0\1\4\1\6\1\5\1\55\1\53\1\12\1\13\1\1"+
    "\12\15\1\20\1\54\1\60\1\57\1\56\2\0\1\25\1\32\1\40"+
    "\1\27\1\14\1\45\1\33\1\42\1\34\1\22\1\51\1\36\1\47"+
    "\1\26\1\35\1\50\1\22\1\30\1\41\1\37\1\46\1\43\1\44"+
    "\1\52\1\31\1\22\1\61\1\0\1\62\1\0\1\22\1\0\32\22"+
    "\1\7\1\24\1\10\7\0\1\21\u05da\0\12\11\206\0\12\11\306\0"+
    "\12\11\u019c\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0"+
    "\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0"+
    "\12\11\140\0\12\11\166\0\12\11\106\0\12\11\u0116\0\12\11\106\0"+
    "\12\11\u0746\0\12\11\46\0\12\11\u012c\0\12\11\200\0\12\11\246\0"+
    "\12\11\6\0\12\11\266\0\12\11\126\0\12\11\206\0\12\11\6\0"+
    "\12\11\u03ce\0\1\21\1\21\u85f6\0\12\11\u02a6\0\12\11\46\0\12\11"+
    "\306\0\12\11\26\0\12\11\126\0\12\11\u0196\0\12\11\u5316\0\12\11"+
    "\u0586\0\12\11\u0bbc\0\12\11\200\0\12\11\74\0\12\11\220\0\12\11"+
    "\u0116\0\12\11\u01d6\0\12\11\u0176\0\12\11\146\0\12\11\u0216\0\12\11"+
    "\u5176\0\12\11\346\0\12\11\u6c74\0\62\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\7\1\13\1\1\1\14"+
    "\1\12\2\3\23\12\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\0\1\13\1\25\1\26\1\27"+
    "\1\30\2\0\1\13\1\31\2\0\1\32\1\33\1\34"+
    "\3\12\2\35\2\0\1\36\1\37\1\40\4\12\1\41"+
    "\5\12\2\41\23\12\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\2\25\2\27\1\13\1\25\1\51\1\0"+
    "\1\52\1\31\1\12\1\41\1\12\1\35\1\52\1\36"+
    "\24\12\1\41\4\12\1\53\1\54\1\27\1\25\1\55"+
    "\1\51\1\12\1\41\1\35\1\52\22\12\1\25\1\0"+
    "\1\56\1\12\1\35\1\52\1\41\14\12\1\0\1\56"+
    "\1\12\1\35\1\52\1\41\7\12\1\57\1\12\1\35"+
    "\1\52\1\41\4\12\1\35\1\52\1\41\2\12\1\35"+
    "\1\52\1\41\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\12"+
    "\1\35\1\52\1\12\1\35\1\52\1\12\1\35\1\52"+
    "\1\12\1\35\1\52\1\12\1\35\1\52\1\12\1\35"+
    "\1\52\1\12\1\35\1\52\1\12\1\35\1\52\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[585];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\63\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\63\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\63\0\63"+
    "\0\u06f9\0\u072c\0\63\0\u075f\0\63\0\63\0\63\0\63"+
    "\0\u0792\0\63\0\u07c5\0\63\0\u07f8\0\u082b\0\u07f8\0\u085e"+
    "\0\u0891\0\u08c4\0\63\0\63\0\u01cb\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u0264\0\u09f6\0\63\0\u0297\0\63\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u08f7\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\63\0\63"+
    "\0\u1023\0\63\0\63\0\63\0\u1056\0\231\0\u1089\0\u10bc"+
    "\0\u10ef\0\u07c5\0\63\0\u1122\0\u1155\0\u1155\0\u1188\0\u11bb"+
    "\0\u11bb\0\u11ee\0\u1221\0\u1254\0\231\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485"+
    "\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d"+
    "\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\63\0\63"+
    "\0\u1782\0\u07c5\0\u17b5\0\u1188\0\u17e8\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u10bc\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1c7d\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48"+
    "\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0"+
    "\0\u2013\0\u2046\0\u1fe0\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\u21ab\0\u1f7a\0\u21de\0\u2211\0\u2244\0\u21de\0\u2277"+
    "\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u2310\0\u23a9\0\u23dc"+
    "\0\u240f\0\u2442\0\u23dc\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9"+
    "\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871"+
    "\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09"+
    "\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1"+
    "\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39"+
    "\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1"+
    "\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u3069"+
    "\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201"+
    "\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366\0\u3399"+
    "\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531"+
    "\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696\0\u36c9"+
    "\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e\0\u3861"+
    "\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960\0\u3993\0\u39c6\0\u39f9"+
    "\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91"+
    "\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6\0\u3d29"+
    "\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e\0\u3ec1"+
    "\0\u3ef4\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026\0\u4059"+
    "\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1"+
    "\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356\0\u4389"+
    "\0\u43bc\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb\0\u44ee\0\u4521"+
    "\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686\0\u46b9"+
    "\0\u46ec\0\u471f\0\u4752\0\u4785\0\u47b8\0\u47eb\0\u481e\0\u4851"+
    "\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950\0\u4983\0\u49b6\0\u49e9"+
    "\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81"+
    "\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19"+
    "\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\u4e4b\0\u4e7e\0\u4eb1"+
    "\0\u4ee4\0\u4f17\0\u4f4a\0\u4f7d\0\u4fb0\0\u4fe3\0\u5016\0\u5049"+
    "\0\u507c\0\u50af\0\u50e2\0\u5115\0\u5148\0\u517b\0\u51ae\0\u51e1"+
    "\0\u5214\0\u5247\0\u527a\0\u52ad\0\u52e0\0\u5313\0\u5346\0\u5379"+
    "\0\u53ac\0\u53df\0\u5412\0\u5445\0\u5478\0\u54ab\0\u54de\0\u5511"+
    "\0\u5544\0\u5577\0\u55aa\0\u55dd\0\u5610\0\u5643\0\u5676\0\u56a9"+
    "\0\u56dc\0\u570f\0\u5742\0\u5775\0\u57a8\0\u57db\0\u580e\0\u5841"+
    "\0\u5874\0\u58a7\0\u58da\0\u590d\0\u5940\0\u5973\0\u59a6\0\u59d9"+
    "\0\u5a0c\0\u5a3f\0\u5a72\0\u5aa5\0\u5ad8\0\u5b0b\0\u5b3e\0\u5b71"+
    "\0\u5ba4\0\u5bd7\0\u5c0a\0\u5c3d\0\u5c70\0\u5ca3\0\u5cd6\0\u5d09"+
    "\0\u5d3c\0\u5d6f\0\u5da2\0\u5dd5\0\u5e08\0\u5e3b\0\u5e6e\0\u5ea1"+
    "\0\u5ed4\0\u5f07\0\u5f3a\0\u5f6d\0\u5fa0\0\u5fd3\0\u6006\0\u6039"+
    "\0\u606c\0\u609f\0\u60d2\0\u6105\0\u6138\0\u616b\0\u619e\0\u61d1"+
    "\0\u6204\0\u6237\0\u626a\0\u629d\0\u62d0\0\u6303\0\u6336\0\u6369"+
    "\0\u639c\0\u63cf\0\u6402\0\u6435\0\u6468\0\u649b\0\u64ce\0\u6501"+
    "\0\u6534\0\u6567\0\u659a\0\u65cd\0\u6600\0\u6633\0\u6666\0\u6699"+
    "\0\u66cc\0\u66ff\0\u6732\0\u6765\0\u6798\0\u67cb\0\u67fe\0\u6831"+
    "\0\u6864\0\u6897\0\u68ca\0\u68fd\0\u6930\0\u6963\0\u6996\0\u69c9"+
    "\0\u69fc\0\u6a2f\0\u6a62\0\u6a95\0\u6ac8\0\63\0\u6afb\0\u6b2e"+
    "\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[585];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\0\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\21\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\21\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\21\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\2\57\2\0\12\57\1\60\2\57\1\0"+
    "\42\57\1\61\2\0\12\57\1\60\2\57\1\0\35\57"+
    "\1\62\3\57\63\0\2\57\2\0\1\57\1\63\10\57"+
    "\1\60\2\57\1\0\43\57\2\0\12\57\1\60\2\57"+
    "\1\0\35\57\1\64\3\57\2\65\2\66\4\65\1\57"+
    "\5\65\1\67\2\65\1\66\41\65\2\57\2\0\5\57"+
    "\1\11\1\57\1\70\1\71\1\11\1\60\2\57\1\0"+
    "\43\57\2\0\5\57\1\72\1\73\2\57\1\72\1\60"+
    "\2\57\1\0\35\57\1\74\5\57\2\0\5\57\1\75"+
    "\3\57\1\75\1\60\2\57\1\0\43\57\2\0\10\57"+
    "\2\76\1\60\2\57\1\0\1\76\1\57\2\76\1\77"+
    "\7\76\1\100\14\76\12\57\2\0\5\57\1\11\1\57"+
    "\1\70\1\101\1\15\1\60\1\57\1\102\1\0\1\102"+
    "\1\57\27\102\10\57\2\103\2\104\12\103\1\105\2\103"+
    "\1\104\41\103\2\57\2\0\5\57\1\106\3\57\1\106"+
    "\1\60\2\57\1\0\43\57\2\0\12\57\1\60\2\57"+
    "\1\0\35\57\1\107\5\57\2\0\10\57\2\76\1\60"+
    "\2\57\1\0\1\76\1\57\27\76\12\57\2\0\10\57"+
    "\2\76\1\60\2\57\1\0\1\76\1\57\2\76\1\77"+
    "\1\76\1\110\22\76\12\57\2\0\10\57\2\76\1\60"+
    "\2\57\1\0\1\76\1\57\10\76\1\111\1\112\15\76"+
    "\12\57\2\0\10\57\2\76\1\60\2\57\1\0\1\76"+
    "\1\57\10\76\1\113\1\114\15\76\12\57\2\0\10\57"+
    "\1\115\1\76\1\60\2\57\1\0\1\76\1\57\27\76"+
    "\12\57\2\0\10\57\1\116\1\76\1\60\2\57\1\0"+
    "\1\76\1\57\5\76\1\117\3\76\1\120\15\76\12\57"+
    "\2\0\10\57\2\76\1\60\2\57\1\0\1\76\1\57"+
    "\11\76\1\121\15\76\12\57\2\0\10\57\2\76\1\60"+
    "\2\57\1\0\1\76\1\57\2\76\1\122\16\76\1\123"+
    "\5\76\12\57\2\0\10\57\2\76\1\60\2\57\1\0"+
    "\1\76\1\57\4\76\1\123\14\76\1\123\5\76\12\57"+
    "\2\0\10\57\2\76\1\60\2\57\1\0\1\76\1\57"+
    "\1\76\1\124\7\76\1\125\15\76\12\57\2\0\10\57"+
    "\2\76\1\60\2\57\1\0\1\76\1\57\4\76\1\126"+
    "\1\127\3\76\1\123\4\76\1\130\10\76\12\57\2\0"+
    "\10\57\2\76\1\60\2\57\1\0\1\76\1\57\1\76"+
    "\1\100\7\76\1\131\4\76\1\132\10\76\12\57\2\0"+
    "\10\57\1\112\1\76\1\60\2\57\1\0\1\76\1\57"+
    "\13\76\1\133\2\76\1\134\10\76\12\57\2\0\10\57"+
    "\2\76\1\60\2\57\1\0\1\76\1\57\1\76\1\135"+
    "\25\76\12\57\2\0\10\57\2\76\1\60\2\57\1\0"+
    "\1\76\1\57\4\76\1\136\3\76\1\137\5\76\1\140"+
    "\10\76\12\57\2\0\10\57\2\76\1\60\2\57\1\0"+
    "\1\76\1\57\1\76\1\141\7\76\1\142\10\76\1\143"+
    "\4\76\12\57\2\0\10\57\2\76\1\60\2\57\1\0"+
    "\1\76\1\57\2\76\1\144\24\76\12\57\2\0\10\57"+
    "\2\76\1\60\2\57\1\0\1\76\1\57\11\76\1\77"+
    "\15\76\12\57\2\0\10\57\2\76\1\60\2\57\1\0"+
    "\1\76\1\57\1\76\1\145\2\76\1\146\22\76\12\57"+
    "\2\0\10\57\2\76\1\60\2\57\1\0\1\76\1\57"+
    "\11\76\1\135\15\76\12\57\2\0\12\57\1\60\2\57"+
    "\1\0\33\57\1\147\1\57\1\150\5\57\2\0\12\57"+
    "\1\60\2\57\1\0\34\57\1\151\1\152\5\57\2\0"+
    "\12\57\1\60\2\57\1\0\34\57\1\153\1\154\1\155"+
    "\2\57\2\61\1\156\1\157\57\61\2\63\2\160\1\63"+
    "\1\161\10\63\1\162\2\63\1\160\41\63\2\65\2\66"+
    "\4\65\1\163\5\65\1\67\2\65\1\66\41\65\10\66"+
    "\1\156\52\66\2\57\2\0\5\57\1\164\3\57\1\164"+
    "\1\60\2\57\1\0\43\57\2\0\6\57\1\165\2\57"+
    "\1\166\1\60\2\57\1\0\43\57\2\0\5\57\1\72"+
    "\1\57\1\167\1\57\1\72\1\60\2\57\1\0\43\57"+
    "\2\0\10\57\2\170\1\60\2\57\1\0\1\170\1\57"+
    "\27\170\12\57\2\0\10\57\2\170\1\60\2\57\1\0"+
    "\1\170\1\57\3\170\1\171\23\170\12\57\2\0\10\57"+
    "\2\170\1\60\2\57\1\0\1\170\1\57\15\170\1\172"+
    "\11\170\12\57\2\0\6\57\1\165\1\57\1\173\1\174"+
    "\1\60\1\57\1\173\1\0\1\173\1\57\27\173\12\57"+
    "\2\0\10\57\2\173\1\60\1\57\1\173\1\0\1\173"+
    "\1\57\27\173\10\57\16\104\1\175\44\104\2\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\4\170"+
    "\1\176\22\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\12\170\1\171\14\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\13\170"+
    "\1\171\13\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\17\170\1\171\7\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\20\170"+
    "\1\177\6\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\1\170\1\200\12\170\1\201\7\170"+
    "\1\202\2\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\7\170\1\203\17\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\13\170"+
    "\1\172\13\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\11\170\1\204\15\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\13\170"+
    "\1\205\13\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\12\170\1\206\1\171\13\170\12\57"+
    "\2\0\10\57\2\170\1\60\2\57\1\0\1\170\1\57"+
    "\6\170\1\207\20\170\12\57\2\0\10\57\2\170\1\60"+
    "\2\57\1\0\1\170\1\57\2\170\1\210\24\170\12\57"+
    "\2\0\10\57\2\170\1\60\2\57\1\0\1\170\1\57"+
    "\22\170\1\172\4\170\12\57\2\0\10\57\2\170\1\60"+
    "\2\57\1\0\1\170\1\57\24\170\1\172\2\170\12\57"+
    "\2\0\10\57\1\211\1\170\1\60\2\57\1\0\1\170"+
    "\1\57\27\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\2\170\1\212\24\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\1\170"+
    "\1\213\25\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\4\170\1\214\22\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\11\170"+
    "\1\215\15\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\4\170\1\171\22\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\10\170"+
    "\1\216\16\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\13\170\1\217\13\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\10\170"+
    "\1\220\16\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\12\170\1\221\14\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\4\170"+
    "\1\222\22\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\2\170\1\223\24\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\13\170"+
    "\1\224\13\170\12\57\2\0\10\57\2\170\1\60\2\57"+
    "\1\0\1\170\1\57\14\170\1\225\12\170\12\57\2\0"+
    "\10\57\2\170\1\60\2\57\1\0\1\170\1\57\11\170"+
    "\1\226\15\170\12\57\2\0\12\57\1\60\2\57\1\0"+
    "\35\57\1\227\5\57\2\0\12\57\1\60\2\57\1\0"+
    "\35\57\1\230\3\57\2\0\1\156\60\0\5\160\1\231"+
    "\55\160\2\63\2\160\1\63\1\161\1\232\7\63\1\162"+
    "\2\63\1\160\41\63\2\57\2\0\5\57\1\164\2\57"+
    "\1\233\1\164\1\60\2\57\1\0\43\57\2\0\11\57"+
    "\1\166\1\60\2\57\1\0\43\57\2\0\5\57\1\234"+
    "\3\57\1\234\1\60\2\57\1\0\43\57\2\0\10\57"+
    "\2\235\1\60\2\57\1\0\1\235\1\57\27\235\12\57"+
    "\2\0\10\57\1\236\1\235\1\60\2\57\1\0\1\235"+
    "\1\57\27\235\12\57\2\0\10\57\2\237\1\60\1\57"+
    "\1\237\1\0\1\237\1\57\27\237\12\57\2\0\10\57"+
    "\1\237\1\240\1\60\1\57\1\237\1\0\1\237\1\57"+
    "\27\237\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\1\235\1\241\25\235\12\57\2\0\10\57"+
    "\2\235\1\60\2\57\1\0\1\235\1\57\2\235\1\242"+
    "\24\235\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\3\235\1\236\6\235\1\236\14\235\12\57"+
    "\2\0\10\57\2\235\1\60\2\57\1\0\1\235\1\57"+
    "\11\235\1\243\15\235\12\57\2\0\10\57\1\244\1\235"+
    "\1\60\2\57\1\0\1\235\1\57\27\235\12\57\2\0"+
    "\10\57\2\235\1\60\2\57\1\0\1\235\1\57\10\235"+
    "\1\245\16\235\12\57\2\0\10\57\2\235\1\60\2\57"+
    "\1\0\1\235\1\57\12\235\1\246\14\235\12\57\2\0"+
    "\10\57\2\235\1\60\2\57\1\0\1\235\1\57\11\235"+
    "\1\236\15\235\12\57\2\0\10\57\2\235\1\60\2\57"+
    "\1\0\1\235\1\57\10\235\1\247\16\235\12\57\2\0"+
    "\10\57\1\250\1\235\1\60\2\57\1\0\1\235\1\57"+
    "\27\235\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\7\235\1\251\17\235\12\57\2\0\10\57"+
    "\2\235\1\60\2\57\1\0\1\235\1\57\2\235\1\236"+
    "\24\235\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\15\235\1\252\11\235\12\57\2\0\10\57"+
    "\2\235\1\60\2\57\1\0\1\235\1\57\4\235\1\236"+
    "\22\235\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\10\235\1\253\16\235\12\57\2\0\10\57"+
    "\2\235\1\60\2\57\1\0\1\235\1\57\4\235\1\254"+
    "\22\235\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\13\235\1\255\13\235\12\57\2\0\10\57"+
    "\2\235\1\60\2\57\1\0\1\235\1\57\16\235\1\236"+
    "\10\235\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\12\235\1\255\14\235\12\57\2\0\10\57"+
    "\2\235\1\60\2\57\1\0\1\235\1\57\15\235\1\255"+
    "\11\235\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\20\235\1\256\6\235\12\57\2\0\10\57"+
    "\2\235\1\60\2\57\1\0\1\235\1\57\14\235\1\257"+
    "\12\235\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\10\235\1\250\16\235\12\57\2\0\10\57"+
    "\2\235\1\60\2\57\1\0\1\235\1\57\25\235\1\260"+
    "\1\235\12\57\2\0\10\57\2\235\1\60\2\57\1\0"+
    "\1\235\1\57\7\235\1\261\4\235\1\262\12\235\10\57"+
    "\5\160\1\231\1\263\54\160\2\57\2\0\6\57\1\264"+
    "\2\57\1\265\1\60\2\57\1\0\43\57\2\0\10\57"+
    "\2\266\1\60\2\57\1\0\1\266\1\57\27\266\12\57"+
    "\2\0\10\57\2\267\1\60\1\57\1\267\1\0\1\267"+
    "\1\57\27\267\12\57\2\0\10\57\1\267\1\270\1\60"+
    "\1\57\1\267\1\0\1\267\1\57\27\267\12\57\2\0"+
    "\10\57\2\266\1\60\2\57\1\0\1\266\1\57\5\266"+
    "\1\271\21\266\12\57\2\0\10\57\2\266\1\60\2\57"+
    "\1\0\1\266\1\57\13\266\1\272\13\266\12\57\2\0"+
    "\10\57\2\266\1\60\2\57\1\0\1\266\1\57\4\266"+
    "\1\273\22\266\12\57\2\0\10\57\2\266\1\60\2\57"+
    "\1\0\1\266\1\57\1\266\1\274\25\266\12\57\2\0"+
    "\10\57\2\266\1\60\2\57\1\0\1\266\1\57\2\266"+
    "\1\271\24\266\12\57\2\0\10\57\1\275\1\266\1\60"+
    "\2\57\1\0\1\266\1\57\27\266\12\57\2\0\10\57"+
    "\2\266\1\60\2\57\1\0\1\266\1\57\2\266\1\276"+
    "\24\266\12\57\2\0\10\57\2\266\1\60\2\57\1\0"+
    "\1\266\1\57\12\266\1\271\14\266\12\57\2\0\10\57"+
    "\2\266\1\60\2\57\1\0\1\266\1\57\10\266\1\277"+
    "\16\266\12\57\2\0\10\57\2\266\1\60\2\57\1\0"+
    "\1\266\1\57\13\266\1\271\13\266\12\57\2\0\10\57"+
    "\2\266\1\60\2\57\1\0\1\266\1\57\2\266\1\300"+
    "\24\266\12\57\2\0\10\57\2\266\1\60\2\57\1\0"+
    "\1\266\1\57\13\266\1\301\13\266\12\57\2\0\10\57"+
    "\1\271\1\266\1\60\2\57\1\0\1\266\1\57\27\266"+
    "\12\57\2\0\10\57\2\266\1\60\2\57\1\0\1\266"+
    "\1\57\1\266\1\302\25\266\12\57\2\0\10\57\2\266"+
    "\1\60\2\57\1\0\1\266\1\57\13\266\1\303\13\266"+
    "\12\57\2\0\10\57\1\273\1\266\1\60\2\57\1\0"+
    "\1\266\1\57\27\266\12\57\2\0\10\57\2\266\1\60"+
    "\2\57\1\0\1\266\1\57\4\266\1\304\22\266\12\57"+
    "\2\0\10\57\1\305\1\266\1\60\2\57\1\0\1\266"+
    "\1\57\27\266\12\57\2\0\11\57\1\265\1\60\2\57"+
    "\1\0\43\57\2\0\7\57\1\306\1\57\1\307\1\60"+
    "\2\57\1\0\43\57\2\0\10\57\2\310\1\60\2\57"+
    "\1\0\1\310\1\57\27\310\12\57\2\0\10\57\2\311"+
    "\1\60\1\57\1\311\1\0\1\311\1\57\27\311\12\57"+
    "\2\0\10\57\1\311\1\312\1\60\1\57\1\311\1\0"+
    "\1\311\1\57\27\311\12\57\2\0\10\57\2\310\1\60"+
    "\2\57\1\0\1\310\1\57\11\310\1\313\15\310\12\57"+
    "\2\0\10\57\2\310\1\60\2\57\1\0\1\310\1\57"+
    "\3\310\1\313\23\310\12\57\2\0\10\57\2\310\1\60"+
    "\2\57\1\0\1\310\1\57\13\310\1\313\13\310\12\57"+
    "\2\0\10\57\2\310\1\60\2\57\1\0\1\310\1\57"+
    "\1\310\1\314\25\310\12\57\2\0\10\57\1\313\1\310"+
    "\1\60\2\57\1\0\1\310\1\57\27\310\12\57\2\0"+
    "\10\57\2\310\1\60\2\57\1\0\1\310\1\57\2\310"+
    "\1\315\24\310\12\57\2\0\10\57\2\310\1\60\2\57"+
    "\1\0\1\310\1\57\7\310\1\313\17\310\12\57\2\0"+
    "\10\57\2\310\1\60\2\57\1\0\1\310\1\57\10\310"+
    "\1\316\16\310\12\57\2\0\10\57\2\310\1\60\2\57"+
    "\1\0\1\310\1\57\4\310\1\317\22\310\12\57\2\0"+
    "\10\57\2\310\1\60\2\57\1\0\1\310\1\57\10\310"+
    "\1\320\16\310\12\57\2\0\10\57\2\310\1\60\2\57"+
    "\1\0\1\310\1\57\1\310\1\321\25\310\12\57\2\0"+
    "\10\57\2\310\1\60\2\57\1\0\1\310\1\57\3\310"+
    "\1\322\23\310\12\57\2\0\11\57\1\323\1\60\2\57"+
    "\1\0\43\57\2\0\11\57\1\307\1\60\2\57\1\0"+
    "\43\57\2\0\10\57\2\324\1\60\2\57\1\0\1\324"+
    "\1\57\27\324\12\57\2\0\10\57\2\325\1\60\1\57"+
    "\1\325\1\0\1\325\1\57\27\325\12\57\2\0\10\57"+
    "\1\325\1\326\1\60\1\57\1\325\1\0\1\325\1\57"+
    "\27\325\12\57\2\0\10\57\2\324\1\60\2\57\1\0"+
    "\1\324\1\57\2\324\1\327\24\324\12\57\2\0\10\57"+
    "\2\324\1\60\2\57\1\0\1\324\1\57\13\324\1\327"+
    "\13\324\12\57\2\0\10\57\2\324\1\60\2\57\1\0"+
    "\1\324\1\57\2\324\1\330\24\324\12\57\2\0\10\57"+
    "\2\324\1\60\2\57\1\0\1\324\1\57\3\324\1\327"+
    "\23\324\12\57\2\0\10\57\2\324\1\60\2\57\1\0"+
    "\1\324\1\57\11\324\1\331\15\324\12\57\2\0\10\57"+
    "\2\324\1\60\2\57\1\0\1\324\1\57\23\324\1\327"+
    "\3\324\12\57\2\0\10\57\2\324\1\60\2\57\1\0"+
    "\1\324\1\57\22\324\1\332\4\324\12\57\2\0\10\57"+
    "\2\333\1\60\2\57\1\0\1\333\1\57\27\333\12\57"+
    "\2\0\10\57\2\334\1\60\1\57\1\334\1\0\1\334"+
    "\1\57\27\334\12\57\2\0\10\57\1\334\1\335\1\60"+
    "\1\57\1\334\1\0\1\334\1\57\27\334\12\57\2\0"+
    "\10\57\2\333\1\60\2\57\1\0\1\333\1\57\13\333"+
    "\1\336\13\333\12\57\2\0\10\57\2\333\1\60\2\57"+
    "\1\0\1\333\1\57\2\333\1\336\24\333\12\57\2\0"+
    "\10\57\2\333\1\60\2\57\1\0\1\333\1\57\4\333"+
    "\1\337\22\333\12\57\2\0\10\57\2\340\1\60\2\57"+
    "\1\0\1\340\1\57\27\340\12\57\2\0\10\57\2\341"+
    "\1\60\1\57\1\341\1\0\1\341\1\57\27\341\12\57"+
    "\2\0\10\57\1\341\1\342\1\60\1\57\1\341\1\0"+
    "\1\341\1\57\27\341\12\57\2\0\10\57\1\343\1\340"+
    "\1\60\2\57\1\0\1\340\1\57\27\340\12\57\2\0"+
    "\10\57\2\344\1\60\2\57\1\0\1\344\1\57\27\344"+
    "\12\57\2\0\10\57\2\345\1\60\1\57\1\345\1\0"+
    "\1\345\1\57\27\345\12\57\2\0\10\57\1\345\1\346"+
    "\1\60\1\57\1\345\1\0\1\345\1\57\27\345\12\57"+
    "\2\0\10\57\2\347\1\60\2\57\1\0\1\347\1\57"+
    "\27\347\12\57\2\0\10\57\2\350\1\60\1\57\1\350"+
    "\1\0\1\350\1\57\27\350\12\57\2\0\10\57\1\350"+
    "\1\351\1\60\1\57\1\350\1\0\1\350\1\57\27\350"+
    "\12\57\2\0\10\57\2\352\1\60\2\57\1\0\1\352"+
    "\1\57\27\352\12\57\2\0\10\57\2\353\1\60\1\57"+
    "\1\353\1\0\1\353\1\57\27\353\12\57\2\0\10\57"+
    "\1\353\1\354\1\60\1\57\1\353\1\0\1\353\1\57"+
    "\27\353\12\57\2\0\10\57\2\355\1\60\2\57\1\0"+
    "\1\355\1\57\27\355\12\57\2\0\10\57\2\356\1\60"+
    "\1\57\1\356\1\0\1\356\1\57\27\356\12\57\2\0"+
    "\10\57\1\356\1\357\1\60\1\57\1\356\1\0\1\356"+
    "\1\57\27\356\12\57\2\0\10\57\2\360\1\60\2\57"+
    "\1\0\1\360\1\57\27\360\12\57\2\0\10\57\2\361"+
    "\1\60\1\57\1\361\1\0\1\361\1\57\27\361\12\57"+
    "\2\0\10\57\1\361\1\362\1\60\1\57\1\361\1\0"+
    "\1\361\1\57\27\361\12\57\2\0\10\57\2\363\1\60"+
    "\2\57\1\0\1\363\1\57\27\363\12\57\2\0\10\57"+
    "\2\364\1\60\1\57\1\364\1\0\1\364\1\57\27\364"+
    "\12\57\2\0\10\57\1\364\1\365\1\60\1\57\1\364"+
    "\1\0\1\364\1\57\27\364\12\57\2\0\10\57\2\366"+
    "\1\60\2\57\1\0\1\366\1\57\27\366\12\57\2\0"+
    "\10\57\2\367\1\60\1\57\1\367\1\0\1\367\1\57"+
    "\27\367\12\57\2\0\10\57\1\367\1\370\1\60\1\57"+
    "\1\367\1\0\1\367\1\57\27\367\12\57\2\0\10\57"+
    "\2\371\1\60\2\57\1\0\1\371\1\57\27\371\12\57"+
    "\2\0\10\57\2\372\1\60\1\57\1\372\1\0\1\372"+
    "\1\57\27\372\12\57\2\0\10\57\1\372\1\373\1\60"+
    "\1\57\1\372\1\0\1\372\1\57\27\372\12\57\2\0"+
    "\10\57\2\374\1\60\2\57\1\0\1\374\1\57\27\374"+
    "\12\57\2\0\10\57\2\375\1\60\1\57\1\375\1\0"+
    "\1\375\1\57\27\375\12\57\2\0\10\57\1\375\1\376"+
    "\1\60\1\57\1\375\1\0\1\375\1\57\27\375\12\57"+
    "\2\0\10\57\2\377\1\60\2\57\1\0\1\377\1\57"+
    "\27\377\12\57\2\0\10\57\2\u0100\1\60\1\57\1\u0100"+
    "\1\0\1\u0100\1\57\27\u0100\12\57\2\0\10\57\1\u0100"+
    "\1\u0101\1\60\1\57\1\u0100\1\0\1\u0100\1\57\27\u0100"+
    "\12\57\2\0\10\57\2\u0102\1\60\2\57\1\0\1\u0102"+
    "\1\57\27\u0102\12\57\2\0\10\57\2\u0103\1\60\1\57"+
    "\1\u0103\1\0\1\u0103\1\57\27\u0103\12\57\2\0\10\57"+
    "\1\u0103\1\u0104\1\60\1\57\1\u0103\1\0\1\u0103\1\57"+
    "\27\u0103\12\57\2\0\10\57\2\u0105\1\60\2\57\1\0"+
    "\1\u0105\1\57\27\u0105\12\57\2\0\10\57\2\u0106\1\60"+
    "\1\57\1\u0106\1\0\1\u0106\1\57\27\u0106\12\57\2\0"+
    "\10\57\1\u0106\1\u0107\1\60\1\57\1\u0106\1\0\1\u0106"+
    "\1\57\27\u0106\12\57\2\0\10\57\2\u0108\1\60\2\57"+
    "\1\0\1\u0108\1\57\27\u0108\12\57\2\0\10\57\2\u0109"+
    "\1\60\1\57\1\u0109\1\0\1\u0109\1\57\27\u0109\12\57"+
    "\2\0\10\57\1\u0109\1\u010a\1\60\1\57\1\u0109\1\0"+
    "\1\u0109\1\57\27\u0109\12\57\2\0\10\57\2\u010b\1\60"+
    "\2\57\1\0\1\u010b\1\57\27\u010b\12\57\2\0\10\57"+
    "\2\u010c\1\60\1\57\1\u010c\1\0\1\u010c\1\57\27\u010c"+
    "\12\57\2\0\10\57\1\u010c\1\u010d\1\60\1\57\1\u010c"+
    "\1\0\1\u010c\1\57\27\u010c\12\57\2\0\10\57\2\u010e"+
    "\1\60\2\57\1\0\1\u010e\1\57\27\u010e\12\57\2\0"+
    "\10\57\2\u010f\1\60\1\57\1\u010f\1\0\1\u010f\1\57"+
    "\27\u010f\12\57\2\0\10\57\1\u010f\1\u0110\1\60\1\57"+
    "\1\u010f\1\0\1\u010f\1\57\27\u010f\12\57\2\0\10\57"+
    "\2\u0111\1\60\2\57\1\0\1\u0111\1\57\27\u0111\12\57"+
    "\2\0\10\57\2\u0112\1\60\1\57\1\u0112\1\0\1\u0112"+
    "\1\57\27\u0112\12\57\2\0\10\57\1\u0112\1\u0113\1\60"+
    "\1\57\1\u0112\1\0\1\u0112\1\57\27\u0112\12\57\2\0"+
    "\10\57\2\u0114\1\60\2\57\1\0\1\u0114\1\57\27\u0114"+
    "\12\57\2\0\10\57\2\u0115\1\60\1\57\1\u0115\1\0"+
    "\1\u0115\1\57\27\u0115\12\57\2\0\10\57\1\u0115\1\u0116"+
    "\1\60\1\57\1\u0115\1\0\1\u0115\1\57\27\u0115\12\57"+
    "\2\0\10\57\2\u0117\1\60\2\57\1\0\1\u0117\1\57"+
    "\27\u0117\12\57\2\0\10\57\2\u0118\1\60\1\57\1\u0118"+
    "\1\0\1\u0118\1\57\27\u0118\12\57\2\0\10\57\1\u0118"+
    "\1\u0119\1\60\1\57\1\u0118\1\0\1\u0118\1\57\27\u0118"+
    "\12\57\2\0\10\57\2\u011a\1\60\2\57\1\0\1\u011a"+
    "\1\57\27\u011a\12\57\2\0\10\57\2\u011b\1\60\1\57"+
    "\1\u011b\1\0\1\u011b\1\57\27\u011b\12\57\2\0\10\57"+
    "\1\u011b\1\u011c\1\60\1\57\1\u011b\1\0\1\u011b\1\57"+
    "\27\u011b\12\57\2\0\10\57\2\u011d\1\60\2\57\1\0"+
    "\1\u011d\1\57\27\u011d\12\57\2\0\10\57\2\u011e\1\60"+
    "\1\57\1\u011e\1\0\1\u011e\1\57\27\u011e\12\57\2\0"+
    "\10\57\1\u011e\1\u011f\1\60\1\57\1\u011e\1\0\1\u011e"+
    "\1\57\27\u011e\12\57\2\0\10\57\2\u0120\1\60\2\57"+
    "\1\0\1\u0120\1\57\27\u0120\12\57\2\0\10\57\2\u0121"+
    "\1\60\1\57\1\u0121\1\0\1\u0121\1\57\27\u0121\12\57"+
    "\2\0\10\57\1\u0121\1\u0122\1\60\1\57\1\u0121\1\0"+
    "\1\u0121\1\57\27\u0121\12\57\2\0\10\57\2\u0123\1\60"+
    "\2\57\1\0\1\u0123\1\57\27\u0123\12\57\2\0\10\57"+
    "\2\u0124\1\60\1\57\1\u0124\1\0\1\u0124\1\57\27\u0124"+
    "\12\57\2\0\10\57\1\u0124\1\u0125\1\60\1\57\1\u0124"+
    "\1\0\1\u0124\1\57\27\u0124\12\57\2\0\10\57\2\u0126"+
    "\1\60\2\57\1\0\1\u0126\1\57\27\u0126\12\57\2\0"+
    "\10\57\2\u0127\1\60\1\57\1\u0127\1\0\1\u0127\1\57"+
    "\27\u0127\12\57\2\0\10\57\1\u0127\1\u0128\1\60\1\57"+
    "\1\u0127\1\0\1\u0127\1\57\27\u0127\12\57\2\0\10\57"+
    "\2\u0129\1\60\2\57\1\0\1\u0129\1\57\27\u0129\12\57"+
    "\2\0\10\57\2\u012a\1\60\1\57\1\u012a\1\0\1\u012a"+
    "\1\57\27\u012a\12\57\2\0\10\57\1\u012a\1\u012b\1\60"+
    "\1\57\1\u012a\1\0\1\u012a\1\57\27\u012a\12\57\2\0"+
    "\10\57\2\u012c\1\60\2\57\1\0\1\u012c\1\57\27\u012c"+
    "\12\57\2\0\10\57\2\u012d\1\60\1\57\1\u012d\1\0"+
    "\1\u012d\1\57\27\u012d\12\57\2\0\10\57\1\u012d\1\u012e"+
    "\1\60\1\57\1\u012d\1\0\1\u012d\1\57\27\u012d\12\57"+
    "\2\0\10\57\2\u012f\1\60\2\57\1\0\1\u012f\1\57"+
    "\27\u012f\12\57\2\0\10\57\2\u0130\1\60\1\57\1\u0130"+
    "\1\0\1\u0130\1\57\27\u0130\12\57\2\0\10\57\1\u0130"+
    "\1\u0131\1\60\1\57\1\u0130\1\0\1\u0130\1\57\27\u0130"+
    "\12\57\2\0\10\57\2\u0132\1\60\2\57\1\0\1\u0132"+
    "\1\57\27\u0132\12\57\2\0\10\57\2\u0133\1\60\1\57"+
    "\1\u0133\1\0\1\u0133\1\57\27\u0133\12\57\2\0\10\57"+
    "\1\u0133\1\u0134\1\60\1\57\1\u0133\1\0\1\u0133\1\57"+
    "\27\u0133\12\57\2\0\10\57\2\u0135\1\60\2\57\1\0"+
    "\1\u0135\1\57\27\u0135\12\57\2\0\10\57\2\u0136\1\60"+
    "\1\57\1\u0136\1\0\1\u0136\1\57\27\u0136\12\57\2\0"+
    "\10\57\1\u0136\1\u0137\1\60\1\57\1\u0136\1\0\1\u0136"+
    "\1\57\27\u0136\12\57\2\0\10\57\2\u0138\1\60\2\57"+
    "\1\0\1\u0138\1\57\27\u0138\12\57\2\0\10\57\2\u0139"+
    "\1\60\1\57\1\u0139\1\0\1\u0139\1\57\27\u0139\12\57"+
    "\2\0\10\57\1\u0139\1\u013a\1\60\1\57\1\u0139\1\0"+
    "\1\u0139\1\57\27\u0139\12\57\2\0\10\57\2\u013b\1\60"+
    "\2\57\1\0\1\u013b\1\57\27\u013b\12\57\2\0\10\57"+
    "\2\u013c\1\60\1\57\1\u013c\1\0\1\u013c\1\57\27\u013c"+
    "\12\57\2\0\10\57\1\u013c\1\u013d\1\60\1\57\1\u013c"+
    "\1\0\1\u013c\1\57\27\u013c\12\57\2\0\10\57\2\u013e"+
    "\1\60\2\57\1\0\1\u013e\1\57\27\u013e\12\57\2\0"+
    "\10\57\2\u013f\1\60\1\57\1\u013f\1\0\1\u013f\1\57"+
    "\27\u013f\12\57\2\0\10\57\1\u013f\1\u0140\1\60\1\57"+
    "\1\u013f\1\0\1\u013f\1\57\27\u013f\12\57\2\0\10\57"+
    "\2\u0141\1\60\2\57\1\0\1\u0141\1\57\27\u0141\12\57"+
    "\2\0\10\57\2\u0142\1\60\1\57\1\u0142\1\0\1\u0142"+
    "\1\57\27\u0142\12\57\2\0\10\57\1\u0142\1\u0143\1\60"+
    "\1\57\1\u0142\1\0\1\u0142\1\57\27\u0142\12\57\2\0"+
    "\10\57\2\u0144\1\60\2\57\1\0\1\u0144\1\57\27\u0144"+
    "\12\57\2\0\10\57\2\u0145\1\60\1\57\1\u0145\1\0"+
    "\1\u0145\1\57\27\u0145\12\57\2\0\10\57\1\u0145\1\u0146"+
    "\1\60\1\57\1\u0145\1\0\1\u0145\1\57\27\u0145\12\57"+
    "\2\0\10\57\2\u0147\1\60\2\57\1\0\1\u0147\1\57"+
    "\27\u0147\12\57\2\0\10\57\2\u0148\1\60\1\57\1\u0148"+
    "\1\0\1\u0148\1\57\27\u0148\12\57\2\0\10\57\1\u0148"+
    "\1\u0149\1\60\1\57\1\u0148\1\0\1\u0148\1\57\27\u0148"+
    "\12\57\2\0\10\57\2\u014a\1\60\2\57\1\0\1\u014a"+
    "\1\57\27\u014a\12\57\2\0\10\57\2\u014b\1\60\1\57"+
    "\1\u014b\1\0\1\u014b\1\57\27\u014b\12\57\2\0\10\57"+
    "\1\u014b\1\u014c\1\60\1\57\1\u014b\1\0\1\u014b\1\57"+
    "\27\u014b\12\57\2\0\10\57\2\u014d\1\60\2\57\1\0"+
    "\1\u014d\1\57\27\u014d\12\57\2\0\10\57\2\u014e\1\60"+
    "\1\57\1\u014e\1\0\1\u014e\1\57\27\u014e\12\57\2\0"+
    "\10\57\1\u014e\1\u014f\1\60\1\57\1\u014e\1\0\1\u014e"+
    "\1\57\27\u014e\12\57\2\0\10\57\2\u0150\1\60\2\57"+
    "\1\0\1\u0150\1\57\27\u0150\12\57\2\0\10\57\2\u0151"+
    "\1\60\1\57\1\u0151\1\0\1\u0151\1\57\27\u0151\12\57"+
    "\2\0\10\57\1\u0151\1\u0152\1\60\1\57\1\u0151\1\0"+
    "\1\u0151\1\57\27\u0151\12\57\2\0\10\57\2\u0153\1\60"+
    "\2\57\1\0\1\u0153\1\57\27\u0153\12\57\2\0\10\57"+
    "\2\u0154\1\60\1\57\1\u0154\1\0\1\u0154\1\57\27\u0154"+
    "\12\57\2\0\10\57\1\u0154\1\u0155\1\60\1\57\1\u0154"+
    "\1\0\1\u0154\1\57\27\u0154\12\57\2\0\10\57\2\u0156"+
    "\1\60\2\57\1\0\1\u0156\1\57\27\u0156\12\57\2\0"+
    "\10\57\2\u0157\1\60\1\57\1\u0157\1\0\1\u0157\1\57"+
    "\27\u0157\12\57\2\0\10\57\1\u0157\1\u0158\1\60\1\57"+
    "\1\u0157\1\0\1\u0157\1\57\27\u0157\12\57\2\0\10\57"+
    "\2\u0159\1\60\2\57\1\0\1\u0159\1\57\27\u0159\12\57"+
    "\2\0\10\57\2\u015a\1\60\1\57\1\u015a\1\0\1\u015a"+
    "\1\57\27\u015a\12\57\2\0\10\57\1\u015a\1\u015b\1\60"+
    "\1\57\1\u015a\1\0\1\u015a\1\57\27\u015a\12\57\2\0"+
    "\10\57\2\u015c\1\60\2\57\1\0\1\u015c\1\57\27\u015c"+
    "\12\57\2\0\10\57\2\u015d\1\60\1\57\1\u015d\1\0"+
    "\1\u015d\1\57\27\u015d\12\57\2\0\10\57\1\u015d\1\u015e"+
    "\1\60\1\57\1\u015d\1\0\1\u015d\1\57\27\u015d\12\57"+
    "\2\0\10\57\2\u015f\1\60\2\57\1\0\1\u015f\1\57"+
    "\27\u015f\12\57\2\0\10\57\2\u0160\1\60\1\57\1\u0160"+
    "\1\0\1\u0160\1\57\27\u0160\12\57\2\0\10\57\1\u0160"+
    "\1\u0161\1\60\1\57\1\u0160\1\0\1\u0160\1\57\27\u0160"+
    "\12\57\2\0\10\57\2\u0162\1\60\2\57\1\0\1\u0162"+
    "\1\57\27\u0162\12\57\2\0\10\57\2\u0163\1\60\1\57"+
    "\1\u0163\1\0\1\u0163\1\57\27\u0163\12\57\2\0\10\57"+
    "\1\u0163\1\u0164\1\60\1\57\1\u0163\1\0\1\u0163\1\57"+
    "\27\u0163\12\57\2\0\10\57\2\u0165\1\60\2\57\1\0"+
    "\1\u0165\1\57\27\u0165\12\57\2\0\10\57\2\u0166\1\60"+
    "\1\57\1\u0166\1\0\1\u0166\1\57\27\u0166\12\57\2\0"+
    "\10\57\1\u0166\1\u0167\1\60\1\57\1\u0166\1\0\1\u0166"+
    "\1\57\27\u0166\12\57\2\0\10\57\2\u0168\1\60\2\57"+
    "\1\0\1\u0168\1\57\27\u0168\12\57\2\0\10\57\2\u0169"+
    "\1\60\1\57\1\u0169\1\0\1\u0169\1\57\27\u0169\12\57"+
    "\2\0\10\57\1\u0169\1\u016a\1\60\1\57\1\u0169\1\0"+
    "\1\u0169\1\57\27\u0169\12\57\2\0\10\57\2\u016b\1\60"+
    "\2\57\1\0\1\u016b\1\57\27\u016b\12\57\2\0\10\57"+
    "\2\u016c\1\60\1\57\1\u016c\1\0\1\u016c\1\57\27\u016c"+
    "\12\57\2\0\10\57\1\u016c\1\u016d\1\60\1\57\1\u016c"+
    "\1\0\1\u016c\1\57\27\u016c\12\57\2\0\10\57\2\u016e"+
    "\1\60\2\57\1\0\1\u016e\1\57\27\u016e\12\57\2\0"+
    "\10\57\2\u016f\1\60\1\57\1\u016f\1\0\1\u016f\1\57"+
    "\27\u016f\12\57\2\0\10\57\1\u016f\1\u0170\1\60\1\57"+
    "\1\u016f\1\0\1\u016f\1\57\27\u016f\12\57\2\0\10\57"+
    "\2\u0171\1\60\2\57\1\0\1\u0171\1\57\27\u0171\12\57"+
    "\2\0\10\57\2\u0172\1\60\1\57\1\u0172\1\0\1\u0172"+
    "\1\57\27\u0172\12\57\2\0\10\57\1\u0172\1\u0173\1\60"+
    "\1\57\1\u0172\1\0\1\u0172\1\57\27\u0172\12\57\2\0"+
    "\10\57\2\u0174\1\60\2\57\1\0\1\u0174\1\57\27\u0174"+
    "\12\57\2\0\10\57\2\u0175\1\60\1\57\1\u0175\1\0"+
    "\1\u0175\1\57\27\u0175\12\57\2\0\10\57\1\u0175\1\u0176"+
    "\1\60\1\57\1\u0175\1\0\1\u0175\1\57\27\u0175\12\57"+
    "\2\0\10\57\2\u0177\1\60\2\57\1\0\1\u0177\1\57"+
    "\27\u0177\12\57\2\0\10\57\2\u0178\1\60\1\57\1\u0178"+
    "\1\0\1\u0178\1\57\27\u0178\12\57\2\0\10\57\1\u0178"+
    "\1\u0179\1\60\1\57\1\u0178\1\0\1\u0178\1\57\27\u0178"+
    "\12\57\2\0\10\57\2\u017a\1\60\2\57\1\0\1\u017a"+
    "\1\57\27\u017a\12\57\2\0\10\57\2\u017b\1\60\1\57"+
    "\1\u017b\1\0\1\u017b\1\57\27\u017b\12\57\2\0\10\57"+
    "\1\u017b\1\u017c\1\60\1\57\1\u017b\1\0\1\u017b\1\57"+
    "\27\u017b\12\57\2\0\10\57\2\u017d\1\60\2\57\1\0"+
    "\1\u017d\1\57\27\u017d\12\57\2\0\10\57\2\u017e\1\60"+
    "\1\57\1\u017e\1\0\1\u017e\1\57\27\u017e\12\57\2\0"+
    "\10\57\1\u017e\1\u017f\1\60\1\57\1\u017e\1\0\1\u017e"+
    "\1\57\27\u017e\12\57\2\0\10\57\2\u0180\1\60\2\57"+
    "\1\0\1\u0180\1\57\27\u0180\12\57\2\0\10\57\2\u0181"+
    "\1\60\1\57\1\u0181\1\0\1\u0181\1\57\27\u0181\12\57"+
    "\2\0\10\57\1\u0181\1\u0182\1\60\1\57\1\u0181\1\0"+
    "\1\u0181\1\57\27\u0181\12\57\2\0\10\57\2\u0183\1\60"+
    "\2\57\1\0\1\u0183\1\57\27\u0183\12\57\2\0\10\57"+
    "\2\u0184\1\60\1\57\1\u0184\1\0\1\u0184\1\57\27\u0184"+
    "\12\57\2\0\10\57\1\u0184\1\u0185\1\60\1\57\1\u0184"+
    "\1\0\1\u0184\1\57\27\u0184\12\57\2\0\10\57\2\u0186"+
    "\1\60\2\57\1\0\1\u0186\1\57\27\u0186\12\57\2\0"+
    "\10\57\2\u0187\1\60\1\57\1\u0187\1\0\1\u0187\1\57"+
    "\27\u0187\12\57\2\0\10\57\1\u0187\1\u0188\1\60\1\57"+
    "\1\u0187\1\0\1\u0187\1\57\27\u0187\12\57\2\0\10\57"+
    "\2\u0189\1\60\2\57\1\0\1\u0189\1\57\27\u0189\12\57"+
    "\2\0\10\57\2\u018a\1\60\1\57\1\u018a\1\0\1\u018a"+
    "\1\57\27\u018a\12\57\2\0\10\57\1\u018a\1\u018b\1\60"+
    "\1\57\1\u018a\1\0\1\u018a\1\57\27\u018a\12\57\2\0"+
    "\10\57\2\u018c\1\60\2\57\1\0\1\u018c\1\57\27\u018c"+
    "\12\57\2\0\10\57\2\u018d\1\60\1\57\1\u018d\1\0"+
    "\1\u018d\1\57\27\u018d\12\57\2\0\10\57\1\u018d\1\u018e"+
    "\1\60\1\57\1\u018d\1\0\1\u018d\1\57\27\u018d\12\57"+
    "\2\0\10\57\2\u018f\1\60\2\57\1\0\1\u018f\1\57"+
    "\27\u018f\12\57\2\0\10\57\2\u0190\1\60\1\57\1\u0190"+
    "\1\0\1\u0190\1\57\27\u0190\12\57\2\0\10\57\1\u0190"+
    "\1\u0191\1\60\1\57\1\u0190\1\0\1\u0190\1\57\27\u0190"+
    "\12\57\2\0\10\57\2\u0192\1\60\2\57\1\0\1\u0192"+
    "\1\57\27\u0192\12\57\2\0\10\57\2\u0193\1\60\1\57"+
    "\1\u0193\1\0\1\u0193\1\57\27\u0193\12\57\2\0\10\57"+
    "\1\u0193\1\u0194\1\60\1\57\1\u0193\1\0\1\u0193\1\57"+
    "\27\u0193\12\57\2\0\10\57\2\u0195\1\60\2\57\1\0"+
    "\1\u0195\1\57\27\u0195\12\57\2\0\10\57\2\u0196\1\60"+
    "\1\57\1\u0196\1\0\1\u0196\1\57\27\u0196\12\57\2\0"+
    "\10\57\1\u0196\1\u0197\1\60\1\57\1\u0196\1\0\1\u0196"+
    "\1\57\27\u0196\12\57\2\0\10\57\2\u0198\1\60\2\57"+
    "\1\0\1\u0198\1\57\27\u0198\12\57\2\0\10\57\2\u0199"+
    "\1\60\1\57\1\u0199\1\0\1\u0199\1\57\27\u0199\12\57"+
    "\2\0\10\57\1\u0199\1\u019a\1\60\1\57\1\u0199\1\0"+
    "\1\u0199\1\57\27\u0199\12\57\2\0\10\57\2\u019b\1\60"+
    "\2\57\1\0\1\u019b\1\57\27\u019b\12\57\2\0\10\57"+
    "\2\u019c\1\60\1\57\1\u019c\1\0\1\u019c\1\57\27\u019c"+
    "\12\57\2\0\10\57\1\u019c\1\u019d\1\60\1\57\1\u019c"+
    "\1\0\1\u019c\1\57\27\u019c\12\57\2\0\10\57\2\u019e"+
    "\1\60\2\57\1\0\1\u019e\1\57\27\u019e\12\57\2\0"+
    "\10\57\2\u019f\1\60\1\57\1\u019f\1\0\1\u019f\1\57"+
    "\27\u019f\12\57\2\0\10\57\1\u019f\1\u01a0\1\60\1\57"+
    "\1\u019f\1\0\1\u019f\1\57\27\u019f\12\57\2\0\10\57"+
    "\2\u01a1\1\60\2\57\1\0\1\u01a1\1\57\27\u01a1\12\57"+
    "\2\0\10\57\2\u01a2\1\60\1\57\1\u01a2\1\0\1\u01a2"+
    "\1\57\27\u01a2\12\57\2\0\10\57\1\u01a2\1\u01a3\1\60"+
    "\1\57\1\u01a2\1\0\1\u01a2\1\57\27\u01a2\12\57\2\0"+
    "\10\57\2\u01a4\1\60\2\57\1\0\1\u01a4\1\57\27\u01a4"+
    "\12\57\2\0\10\57\2\u01a5\1\60\1\57\1\u01a5\1\0"+
    "\1\u01a5\1\57\27\u01a5\12\57\2\0\10\57\1\u01a5\1\u01a6"+
    "\1\60\1\57\1\u01a5\1\0\1\u01a5\1\57\27\u01a5\12\57"+
    "\2\0\10\57\2\u01a7\1\60\2\57\1\0\1\u01a7\1\57"+
    "\27\u01a7\12\57\2\0\10\57\2\u01a8\1\60\1\57\1\u01a8"+
    "\1\0\1\u01a8\1\57\27\u01a8\12\57\2\0\10\57\1\u01a8"+
    "\1\u01a9\1\60\1\57\1\u01a8\1\0\1\u01a8\1\57\27\u01a8"+
    "\12\57\2\0\10\57\2\u01aa\1\60\2\57\1\0\1\u01aa"+
    "\1\57\27\u01aa\12\57\2\0\10\57\2\u01ab\1\60\1\57"+
    "\1\u01ab\1\0\1\u01ab\1\57\27\u01ab\12\57\2\0\10\57"+
    "\1\u01ab\1\u01ac\1\60\1\57\1\u01ab\1\0\1\u01ab\1\57"+
    "\27\u01ab\12\57\2\0\10\57\2\u01ad\1\60\2\57\1\0"+
    "\1\u01ad\1\57\27\u01ad\12\57\2\0\10\57\2\u01ae\1\60"+
    "\1\57\1\u01ae\1\0\1\u01ae\1\57\27\u01ae\12\57\2\0"+
    "\10\57\1\u01ae\1\u01af\1\60\1\57\1\u01ae\1\0\1\u01ae"+
    "\1\57\27\u01ae\12\57\2\0\10\57\2\u01b0\1\60\2\57"+
    "\1\0\1\u01b0\1\57\27\u01b0\12\57\2\0\10\57\2\u01b1"+
    "\1\60\1\57\1\u01b1\1\0\1\u01b1\1\57\27\u01b1\12\57"+
    "\2\0\10\57\1\u01b1\1\u01b2\1\60\1\57\1\u01b1\1\0"+
    "\1\u01b1\1\57\27\u01b1\12\57\2\0\10\57\2\u01b3\1\60"+
    "\2\57\1\0\1\u01b3\1\57\27\u01b3\12\57\2\0\10\57"+
    "\2\u01b4\1\60\1\57\1\u01b4\1\0\1\u01b4\1\57\27\u01b4"+
    "\12\57\2\0\10\57\1\u01b4\1\u01b5\1\60\1\57\1\u01b4"+
    "\1\0\1\u01b4\1\57\27\u01b4\12\57\2\0\10\57\2\u01b6"+
    "\1\60\2\57\1\0\1\u01b6\1\57\27\u01b6\12\57\2\0"+
    "\10\57\2\u01b7\1\60\1\57\1\u01b7\1\0\1\u01b7\1\57"+
    "\27\u01b7\12\57\2\0\10\57\1\u01b7\1\u01b8\1\60\1\57"+
    "\1\u01b7\1\0\1\u01b7\1\57\27\u01b7\12\57\2\0\10\57"+
    "\2\u01b9\1\60\2\57\1\0\1\u01b9\1\57\27\u01b9\12\57"+
    "\2\0\10\57\2\u01ba\1\60\1\57\1\u01ba\1\0\1\u01ba"+
    "\1\57\27\u01ba\12\57\2\0\10\57\1\u01ba\1\u01bb\1\60"+
    "\1\57\1\u01ba\1\0\1\u01ba\1\57\27\u01ba\12\57\2\0"+
    "\10\57\2\u01bc\1\60\2\57\1\0\1\u01bc\1\57\27\u01bc"+
    "\12\57\2\0\10\57\2\u01bd\1\60\1\57\1\u01bd\1\0"+
    "\1\u01bd\1\57\27\u01bd\12\57\2\0\10\57\1\u01bd\1\u01be"+
    "\1\60\1\57\1\u01bd\1\0\1\u01bd\1\57\27\u01bd\12\57"+
    "\2\0\10\57\2\u01bf\1\60\2\57\1\0\1\u01bf\1\57"+
    "\27\u01bf\12\57\2\0\10\57\2\u01c0\1\60\1\57\1\u01c0"+
    "\1\0\1\u01c0\1\57\27\u01c0\12\57\2\0\10\57\1\u01c0"+
    "\1\u01c1\1\60\1\57\1\u01c0\1\0\1\u01c0\1\57\27\u01c0"+
    "\12\57\2\0\10\57\2\u01c2\1\60\2\57\1\0\1\u01c2"+
    "\1\57\27\u01c2\12\57\2\0\10\57\2\u01c3\1\60\1\57"+
    "\1\u01c3\1\0\1\u01c3\1\57\27\u01c3\12\57\2\0\10\57"+
    "\1\u01c3\1\u01c4\1\60\1\57\1\u01c3\1\0\1\u01c3\1\57"+
    "\27\u01c3\12\57\2\0\10\57\2\u01c5\1\60\2\57\1\0"+
    "\1\u01c5\1\57\27\u01c5\12\57\2\0\10\57\2\u01c6\1\60"+
    "\1\57\1\u01c6\1\0\1\u01c6\1\57\27\u01c6\12\57\2\0"+
    "\10\57\1\u01c6\1\u01c7\1\60\1\57\1\u01c6\1\0\1\u01c6"+
    "\1\57\27\u01c6\12\57\2\0\10\57\2\u01c8\1\60\2\57"+
    "\1\0\1\u01c8\1\57\27\u01c8\12\57\2\0\10\57\2\u01c9"+
    "\1\60\1\57\1\u01c9\1\0\1\u01c9\1\57\27\u01c9\12\57"+
    "\2\0\10\57\1\u01c9\1\u01ca\1\60\1\57\1\u01c9\1\0"+
    "\1\u01c9\1\57\27\u01c9\12\57\2\0\10\57\2\u01cb\1\60"+
    "\2\57\1\0\1\u01cb\1\57\27\u01cb\12\57\2\0\10\57"+
    "\2\u01cc\1\60\1\57\1\u01cc\1\0\1\u01cc\1\57\27\u01cc"+
    "\12\57\2\0\10\57\1\u01cc\1\u01cd\1\60\1\57\1\u01cc"+
    "\1\0\1\u01cc\1\57\27\u01cc\12\57\2\0\10\57\2\u01ce"+
    "\1\60\2\57\1\0\1\u01ce\1\57\27\u01ce\12\57\2\0"+
    "\10\57\2\u01cf\1\60\1\57\1\u01cf\1\0\1\u01cf\1\57"+
    "\27\u01cf\12\57\2\0\10\57\1\u01cf\1\u01d0\1\60\1\57"+
    "\1\u01cf\1\0\1\u01cf\1\57\27\u01cf\12\57\2\0\10\57"+
    "\2\u01d1\1\60\2\57\1\0\1\u01d1\1\57\27\u01d1\12\57"+
    "\2\0\10\57\2\u01d2\1\60\1\57\1\u01d2\1\0\1\u01d2"+
    "\1\57\27\u01d2\12\57\2\0\10\57\1\u01d2\1\u01d3\1\60"+
    "\1\57\1\u01d2\1\0\1\u01d2\1\57\27\u01d2\12\57\2\0"+
    "\10\57\2\u01d4\1\60\2\57\1\0\1\u01d4\1\57\27\u01d4"+
    "\12\57\2\0\10\57\2\u01d5\1\60\1\57\1\u01d5\1\0"+
    "\1\u01d5\1\57\27\u01d5\12\57\2\0\10\57\1\u01d5\1\u01d6"+
    "\1\60\1\57\1\u01d5\1\0\1\u01d5\1\57\27\u01d5\12\57"+
    "\2\0\10\57\2\u01d7\1\60\2\57\1\0\1\u01d7\1\57"+
    "\27\u01d7\12\57\2\0\10\57\2\u01d8\1\60\1\57\1\u01d8"+
    "\1\0\1\u01d8\1\57\27\u01d8\12\57\2\0\10\57\1\u01d8"+
    "\1\u01d9\1\60\1\57\1\u01d8\1\0\1\u01d8\1\57\27\u01d8"+
    "\12\57\2\0\10\57\2\u01da\1\60\2\57\1\0\1\u01da"+
    "\1\57\27\u01da\12\57\2\0\10\57\2\u01db\1\60\1\57"+
    "\1\u01db\1\0\1\u01db\1\57\27\u01db\12\57\2\0\10\57"+
    "\1\u01db\1\u01dc\1\60\1\57\1\u01db\1\0\1\u01db\1\57"+
    "\27\u01db\12\57\2\0\10\57\2\u01dd\1\60\2\57\1\0"+
    "\1\u01dd\1\57\27\u01dd\12\57\2\0\10\57\2\u01de\1\60"+
    "\1\57\1\u01de\1\0\1\u01de\1\57\27\u01de\12\57\2\0"+
    "\10\57\1\u01de\1\u01df\1\60\1\57\1\u01de\1\0\1\u01de"+
    "\1\57\27\u01de\12\57\2\0\10\57\2\u01e0\1\60\2\57"+
    "\1\0\1\u01e0\1\57\27\u01e0\12\57\2\0\10\57\2\u01e1"+
    "\1\60\1\57\1\u01e1\1\0\1\u01e1\1\57\27\u01e1\12\57"+
    "\2\0\10\57\1\u01e1\1\u01e2\1\60\1\57\1\u01e1\1\0"+
    "\1\u01e1\1\57\27\u01e1\12\57\2\0\10\57\2\u01e3\1\60"+
    "\2\57\1\0\1\u01e3\1\57\27\u01e3\12\57\2\0\10\57"+
    "\2\u01e4\1\60\1\57\1\u01e4\1\0\1\u01e4\1\57\27\u01e4"+
    "\12\57\2\0\10\57\1\u01e4\1\u01e5\1\60\1\57\1\u01e4"+
    "\1\0\1\u01e4\1\57\27\u01e4\12\57\2\0\10\57\2\u01e6"+
    "\1\60\2\57\1\0\1\u01e6\1\57\27\u01e6\12\57\2\0"+
    "\10\57\2\u01e7\1\60\1\57\1\u01e7\1\0\1\u01e7\1\57"+
    "\27\u01e7\12\57\2\0\10\57\1\u01e7\1\u01e8\1\60\1\57"+
    "\1\u01e7\1\0\1\u01e7\1\57\27\u01e7\12\57\2\0\10\57"+
    "\2\u01e9\1\60\2\57\1\0\1\u01e9\1\57\27\u01e9\12\57"+
    "\2\0\10\57\2\u01ea\1\60\1\57\1\u01ea\1\0\1\u01ea"+
    "\1\57\27\u01ea\12\57\2\0\10\57\1\u01ea\1\u01eb\1\60"+
    "\1\57\1\u01ea\1\0\1\u01ea\1\57\27\u01ea\12\57\2\0"+
    "\10\57\2\u01ec\1\60\2\57\1\0\1\u01ec\1\57\27\u01ec"+
    "\12\57\2\0\10\57\2\u01ed\1\60\1\57\1\u01ed\1\0"+
    "\1\u01ed\1\57\27\u01ed\12\57\2\0\10\57\1\u01ed\1\u01ee"+
    "\1\60\1\57\1\u01ed\1\0\1\u01ed\1\57\27\u01ed\12\57"+
    "\2\0\10\57\2\u01ef\1\60\2\57\1\0\1\u01ef\1\57"+
    "\27\u01ef\12\57\2\0\10\57\2\u01f0\1\60\1\57\1\u01f0"+
    "\1\0\1\u01f0\1\57\27\u01f0\12\57\2\0\10\57\1\u01f0"+
    "\1\u01f1\1\60\1\57\1\u01f0\1\0\1\u01f0\1\57\27\u01f0"+
    "\12\57\2\0\10\57\2\u01f2\1\60\2\57\1\0\1\u01f2"+
    "\1\57\27\u01f2\12\57\2\0\10\57\2\u01f3\1\60\1\57"+
    "\1\u01f3\1\0\1\u01f3\1\57\27\u01f3\12\57\2\0\10\57"+
    "\1\u01f3\1\u01f4\1\60\1\57\1\u01f3\1\0\1\u01f3\1\57"+
    "\27\u01f3\12\57\2\0\10\57\2\u01f5\1\60\2\57\1\0"+
    "\1\u01f5\1\57\27\u01f5\12\57\2\0\10\57\2\u01f6\1\60"+
    "\1\57\1\u01f6\1\0\1\u01f6\1\57\27\u01f6\12\57\2\0"+
    "\10\57\1\u01f6\1\u01f7\1\60\1\57\1\u01f6\1\0\1\u01f6"+
    "\1\57\27\u01f6\12\57\2\0\10\57\2\u01f8\1\60\2\57"+
    "\1\0\1\u01f8\1\57\27\u01f8\12\57\2\0\10\57\2\u01f9"+
    "\1\60\1\57\1\u01f9\1\0\1\u01f9\1\57\27\u01f9\12\57"+
    "\2\0\10\57\1\u01f9\1\u01fa\1\60\1\57\1\u01f9\1\0"+
    "\1\u01f9\1\57\27\u01f9\12\57\2\0\10\57\2\u01fb\1\60"+
    "\2\57\1\0\1\u01fb\1\57\27\u01fb\12\57\2\0\10\57"+
    "\2\u01fc\1\60\1\57\1\u01fc\1\0\1\u01fc\1\57\27\u01fc"+
    "\12\57\2\0\10\57\1\u01fc\1\u01fd\1\60\1\57\1\u01fc"+
    "\1\0\1\u01fc\1\57\27\u01fc\12\57\2\0\10\57\2\u01fe"+
    "\1\60\2\57\1\0\1\u01fe\1\57\27\u01fe\12\57\2\0"+
    "\10\57\2\u01ff\1\60\1\57\1\u01ff\1\0\1\u01ff\1\57"+
    "\27\u01ff\12\57\2\0\10\57\1\u01ff\1\u0200\1\60\1\57"+
    "\1\u01ff\1\0\1\u01ff\1\57\27\u01ff\12\57\2\0\10\57"+
    "\2\u0201\1\60\2\57\1\0\1\u0201\1\57\27\u0201\12\57"+
    "\2\0\10\57\2\u0202\1\60\1\57\1\u0202\1\0\1\u0202"+
    "\1\57\27\u0202\12\57\2\0\10\57\1\u0202\1\u0203\1\60"+
    "\1\57\1\u0202\1\0\1\u0202\1\57\27\u0202\12\57\2\0"+
    "\10\57\2\u0204\1\60\2\57\1\0\1\u0204\1\57\27\u0204"+
    "\12\57\2\0\10\57\2\u0205\1\60\1\57\1\u0205\1\0"+
    "\1\u0205\1\57\27\u0205\12\57\2\0\10\57\1\u0205\1\u0206"+
    "\1\60\1\57\1\u0205\1\0\1\u0205\1\57\27\u0205\12\57"+
    "\2\0\10\57\2\u0207\1\60\2\57\1\0\1\u0207\1\57"+
    "\27\u0207\12\57\2\0\10\57\2\u0208\1\60\1\57\1\u0208"+
    "\1\0\1\u0208\1\57\27\u0208\12\57\2\0\10\57\1\u0208"+
    "\1\u0209\1\60\1\57\1\u0208\1\0\1\u0208\1\57\27\u0208"+
    "\12\57\2\0\10\57\2\u020a\1\60\2\57\1\0\1\u020a"+
    "\1\57\27\u020a\12\57\2\0\10\57\2\u020b\1\60\1\57"+
    "\1\u020b\1\0\1\u020b\1\57\27\u020b\12\57\2\0\10\57"+
    "\1\u020b\1\u020c\1\60\1\57\1\u020b\1\0\1\u020b\1\57"+
    "\27\u020b\12\57\2\0\10\57\2\u020d\1\60\2\57\1\0"+
    "\1\u020d\1\57\27\u020d\12\57\2\0\10\57\2\u020e\1\60"+
    "\1\57\1\u020e\1\0\1\u020e\1\57\27\u020e\12\57\2\0"+
    "\10\57\1\u020e\1\u020f\1\60\1\57\1\u020e\1\0\1\u020e"+
    "\1\57\27\u020e\12\57\2\0\10\57\2\u0210\1\60\2\57"+
    "\1\0\1\u0210\1\57\27\u0210\12\57\2\0\10\57\2\u0211"+
    "\1\60\1\57\1\u0211\1\0\1\u0211\1\57\27\u0211\12\57"+
    "\2\0\10\57\1\u0211\1\u0212\1\60\1\57\1\u0211\1\0"+
    "\1\u0211\1\57\27\u0211\12\57\2\0\10\57\2\u0213\1\60"+
    "\2\57\1\0\1\u0213\1\57\27\u0213\12\57\2\0\10\57"+
    "\2\u0214\1\60\1\57\1\u0214\1\0\1\u0214\1\57\27\u0214"+
    "\12\57\2\0\10\57\1\u0214\1\u0215\1\60\1\57\1\u0214"+
    "\1\0\1\u0214\1\57\27\u0214\12\57\2\0\10\57\2\u0216"+
    "\1\60\2\57\1\0\1\u0216\1\57\27\u0216\12\57\2\0"+
    "\10\57\2\u0217\1\60\1\57\1\u0217\1\0\1\u0217\1\57"+
    "\27\u0217\12\57\2\0\10\57\1\u0217\1\u0218\1\60\1\57"+
    "\1\u0217\1\0\1\u0217\1\57\27\u0217\12\57\2\0\10\57"+
    "\2\u0219\1\60\2\57\1\0\1\u0219\1\57\27\u0219\12\57"+
    "\2\0\10\57\2\u021a\1\60\1\57\1\u021a\1\0\1\u021a"+
    "\1\57\27\u021a\12\57\2\0\10\57\1\u021a\1\u021b\1\60"+
    "\1\57\1\u021a\1\0\1\u021a\1\57\27\u021a\12\57\2\0"+
    "\10\57\2\u021c\1\60\2\57\1\0\1\u021c\1\57\27\u021c"+
    "\12\57\2\0\10\57\2\u021d\1\60\1\57\1\u021d\1\0"+
    "\1\u021d\1\57\27\u021d\12\57\2\0\10\57\1\u021d\1\u021e"+
    "\1\60\1\57\1\u021d\1\0\1\u021d\1\57\27\u021d\12\57"+
    "\2\0\10\57\2\u021f\1\60\2\57\1\0\1\u021f\1\57"+
    "\27\u021f\12\57\2\0\10\57\2\u0220\1\60\1\57\1\u0220"+
    "\1\0\1\u0220\1\57\27\u0220\12\57\2\0\10\57\1\u0220"+
    "\1\u0221\1\60\1\57\1\u0220\1\0\1\u0220\1\57\27\u0220"+
    "\12\57\2\0\10\57\2\u0222\1\60\2\57\1\0\1\u0222"+
    "\1\57\27\u0222\12\57\2\0\10\57\2\u0223\1\60\1\57"+
    "\1\u0223\1\0\1\u0223\1\57\27\u0223\12\57\2\0\10\57"+
    "\1\u0223\1\u0224\1\60\1\57\1\u0223\1\0\1\u0223\1\57"+
    "\27\u0223\12\57\2\0\10\57\2\u0225\1\60\2\57\1\0"+
    "\1\u0225\1\57\27\u0225\12\57\2\0\10\57\2\u0226\1\60"+
    "\1\57\1\u0226\1\0\1\u0226\1\57\27\u0226\12\57\2\0"+
    "\10\57\1\u0226\1\u0227\1\60\1\57\1\u0226\1\0\1\u0226"+
    "\1\57\27\u0226\12\57\2\0\10\57\2\u0228\1\60\2\57"+
    "\1\0\1\u0228\1\57\27\u0228\12\57\2\0\10\57\2\u0229"+
    "\1\60\1\57\1\u0229\1\0\1\u0229\1\57\27\u0229\12\57"+
    "\2\0\10\57\1\u0229\1\u022a\1\60\1\57\1\u0229\1\0"+
    "\1\u0229\1\57\27\u0229\12\57\2\0\10\57\2\u022b\1\60"+
    "\2\57\1\0\1\u022b\1\57\27\u022b\12\57\2\0\10\57"+
    "\2\u022c\1\60\1\57\1\u022c\1\0\1\u022c\1\57\27\u022c"+
    "\12\57\2\0\10\57\1\u022c\1\u022d\1\60\1\57\1\u022c"+
    "\1\0\1\u022c\1\57\27\u022c\12\57\2\0\10\57\2\u022e"+
    "\1\60\2\57\1\0\1\u022e\1\57\27\u022e\12\57\2\0"+
    "\10\57\2\u022f\1\60\1\57\1\u022f\1\0\1\u022f\1\57"+
    "\27\u022f\12\57\2\0\10\57\1\u022f\1\u0230\1\60\1\57"+
    "\1\u022f\1\0\1\u022f\1\57\27\u022f\12\57\2\0\10\57"+
    "\2\u0231\1\60\2\57\1\0\1\u0231\1\57\27\u0231\12\57"+
    "\2\0\10\57\2\u0232\1\60\1\57\1\u0232\1\0\1\u0232"+
    "\1\57\27\u0232\12\57\2\0\10\57\1\u0232\1\u0233\1\60"+
    "\1\57\1\u0232\1\0\1\u0232\1\57\27\u0232\12\57\2\0"+
    "\10\57\2\u0234\1\60\2\57\1\0\1\u0234\1\57\27\u0234"+
    "\12\57\2\0\10\57\2\u0235\1\60\1\57\1\u0235\1\0"+
    "\1\u0235\1\57\27\u0235\12\57\2\0\10\57\1\u0235\1\u0236"+
    "\1\60\1\57\1\u0235\1\0\1\u0235\1\57\27\u0235\12\57"+
    "\2\0\10\57\2\u0237\1\60\2\57\1\0\1\u0237\1\57"+
    "\27\u0237\12\57\2\0\10\57\2\u0238\1\60\1\57\1\u0238"+
    "\1\0\1\u0238\1\57\27\u0238\12\57\2\0\10\57\1\u0238"+
    "\1\u0239\1\60\1\57\1\u0238\1\0\1\u0238\1\57\27\u0238"+
    "\12\57\2\0\10\57\2\u023a\1\60\2\57\1\0\1\u023a"+
    "\1\57\27\u023a\12\57\2\0\10\57\2\u023b\1\60\1\57"+
    "\1\u023b\1\0\1\u023b\1\57\27\u023b\12\57\2\0\10\57"+
    "\1\u023b\1\u023c\1\60\1\57\1\u023b\1\0\1\u023b\1\57"+
    "\27\u023b\12\57\2\0\10\57\2\u023d\1\60\2\57\1\0"+
    "\1\u023d\1\57\27\u023d\12\57\2\0\10\57\2\u023e\1\60"+
    "\1\57\1\u023e\1\0\1\u023e\1\57\27\u023e\12\57\2\0"+
    "\10\57\1\u023e\1\u023f\1\60\1\57\1\u023e\1\0\1\u023e"+
    "\1\57\27\u023e\12\57\2\0\10\57\2\u0240\1\60\2\57"+
    "\1\0\1\u0240\1\57\27\u0240\12\57\2\0\10\57\2\u0241"+
    "\1\60\1\57\1\u0241\1\0\1\u0241\1\57\27\u0241\12\57"+
    "\2\0\10\57\1\u0241\1\u0242\1\60\1\57\1\u0241\1\0"+
    "\1\u0241\1\57\27\u0241\12\57\2\0\10\57\2\u0243\1\60"+
    "\2\57\1\0\1\u0243\1\57\27\u0243\12\57\2\0\10\57"+
    "\2\u0244\1\60\1\57\1\u0244\1\0\1\u0244\1\57\27\u0244"+
    "\12\57\2\0\10\57\1\u0244\1\u0245\1\60\1\57\1\u0244"+
    "\1\0\1\u0244\1\57\27\u0244\12\57\2\0\10\57\2\u0246"+
    "\1\60\2\57\1\0\1\u0246\1\57\27\u0246\12\57\2\0"+
    "\10\57\2\u0247\1\60\1\57\1\u0247\1\0\1\u0247\1\57"+
    "\27\u0247\12\57\2\0\10\57\1\u0247\1\u0248\1\60\1\57"+
    "\1\u0247\1\0\1\u0247\1\57\27\u0247\12\57\2\0\10\57"+
    "\2\u0249\1\60\1\57\1\u0249\1\0\1\u0249\1\57\27\u0249"+
    "\12\57\2\0\10\57\1\u0249\1\166\1\60\1\57\1\u0249"+
    "\1\0\1\u0249\1\57\27\u0249\10\57";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27489];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\52\1\1\0\5\1\2\0\2\1"+
    "\2\0\10\1\2\0\51\1\1\11\6\1\1\0\7\1"+
    "\1\11\66\1\1\0\21\1\1\0\u0183\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[585];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private Symbol token(int type, Object value)
{
    return new Symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 364) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(sym.ERROR_LEXICO, "Caracter inválido " + yytext());
            }
          case 48: break;
          case 2: 
            { return token(sym.OP_DIVISION, yytext());
            }
          case 49: break;
          case 3: 
            { /*Omitir el espacio blanco*/
            }
          case 50: break;
          case 4: 
            { return token(sym.PAR_APER, yytext());
            }
          case 51: break;
          case 5: 
            { return token(sym.OP_MULTIPLICACION, yytext());
            }
          case 52: break;
          case 6: 
            { return token(sym.PAR_CERR, yytext());
            }
          case 53: break;
          case 7: 
            { return token(sym.ENTERO, yytext());
            }
          case 54: break;
          case 8: 
            { return token(sym.OP_RESTA, yytext());
            }
          case 55: break;
          case 9: 
            { return token(sym.PUNTO, yytext());
            }
          case 56: break;
          case 10: 
            { return token(sym.ID, yytext().toUpperCase());
            }
          case 57: break;
          case 11: 
            { return token(sym.ERROR_LEXICO, "Hilera sin cerrar " + yytext());
            }
          case 58: break;
          case 12: 
            { return token(sym.DOS_PUNTO, yytext());
            }
          case 59: break;
          case 13: 
            { return token(sym.COMA, yytext());
            }
          case 60: break;
          case 14: 
            { return token(sym.PUNTO_COMA, yytext());
            }
          case 61: break;
          case 15: 
            { return token(sym.OP_SUMA, yytext());
            }
          case 62: break;
          case 16: 
            { return token(sym.OP_MAYOR, yytext());
            }
          case 63: break;
          case 17: 
            { return token(sym.OP_IGUAL, yytext());
            }
          case 64: break;
          case 18: 
            { return token(sym.OP_MENOR, yytext());
            }
          case 65: break;
          case 19: 
            { return token(sym.BRA_APER, yytext());
            }
          case 66: break;
          case 20: 
            { return token(sym.BRA_CERR, yytext());
            }
          case 67: break;
          case 21: 
            { return token(sym.COMMENT, yytext());
            }
          case 68: break;
          case 22: 
            { return token(sym.OP_DIV_ASIGN, yytext());
            }
          case 69: break;
          case 23: 
            { return token(sym.ERROR_LEXICO, "Comentario no cerrado" + yytext());
            }
          case 70: break;
          case 24: 
            { return token(sym.OP_MUL_ASIGN, yytext());
            }
          case 71: break;
          case 25: 
            { return token(sym.ERROR_LEXICO, "No tiene nada después del punto" + yytext());
            }
          case 72: break;
          case 26: 
            { return token(sym.OP_DEC, yytext());
            }
          case 73: break;
          case 27: 
            { return token(sym.OP_RESTA_ASIGN, yytext());
            }
          case 74: break;
          case 28: 
            { return token(sym.ERROR_LEXICO, "No tiene nada antes del punto " + yytext());
            }
          case 75: break;
          case 29: 
            { return token(sym.ERROR_LEXICO, "No debe comenzar con números" + yytext());
            }
          case 76: break;
          case 30: 
            { return token(sym.STRING_C, yytext());
            }
          case 77: break;
          case 31: 
            { return token(sym.CHARACTER, yytext());
            }
          case 78: break;
          case 32: 
            { return token(sym.ASIGN, yytext());
            }
          case 79: break;
          case 33: 
            { return token(sym.PALABRA_RESERVADA, yytext());
            }
          case 80: break;
          case 34: 
            { return token(sym.OP_INC, yytext());
            }
          case 81: break;
          case 35: 
            { return token(sym.OP_SUMA_ASIGN, yytext());
            }
          case 82: break;
          case 36: 
            { return token(sym.OP_SHIFT_DER, yytext());
            }
          case 83: break;
          case 37: 
            { return token(sym.OP_MAYOR_IGUAL, yytext());
            }
          case 84: break;
          case 38: 
            { return token(sym.OP_DISTINTO, yytext());
            }
          case 85: break;
          case 39: 
            { return token(sym.OP_MENOR_IGUAL, yytext());
            }
          case 86: break;
          case 40: 
            { return token(sym.OP_SHIFT_IZQ, yytext());
            }
          case 87: break;
          case 41: 
            { return token(sym.FLOTANTE, yytext());
            }
          case 88: break;
          case 42: 
            { return token(sym.ERROR_LEXICO, "Notación científica mala " + yytext());
            }
          case 89: break;
          case 43: 
            { return token(sym.OP_SHIFT_DER_ASIGN, yytext());
            }
          case 90: break;
          case 44: 
            { return token(sym.OP_SHIFT_IZQ_ASIGN, yytext());
            }
          case 91: break;
          case 45: 
            { return token(sym.ERROR_LEXICO, "Notación científica mala - error no tiene nada después del exponente" + yytext());
            }
          case 92: break;
          case 46: 
            { return token(sym.NOTA_CIENTIFICA, yytext());
            }
          case 93: break;
          case 47: 
            { return token(sym.ERROR_LEXICO, "Notación científica mala - error el numero después del E tiene que ser entero" + yytext());
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
