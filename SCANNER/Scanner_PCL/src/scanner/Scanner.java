/* The following code was generated by JFlex 1.6.1 */

package scanner;

import java_cup.runtime.*;
import symbols.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/git/Compilador-PCL/SCANNER/Scanner_PCL/src/scanner/pcl_rules.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\2\1\62\1\62\1\3\22\0\1\22\1\0\1\16"+
    "\1\17\4\0\1\4\1\6\1\5\1\54\1\52\1\12\1\13\1\1"+
    "\12\15\1\20\1\53\1\57\1\56\1\55\2\0\1\24\1\31\1\37"+
    "\1\26\1\14\1\44\1\32\1\41\1\33\1\21\1\50\1\35\1\46"+
    "\1\25\1\34\1\47\1\21\1\27\1\40\1\36\1\45\1\42\1\43"+
    "\1\51\1\30\1\21\1\60\1\0\1\61\1\0\1\21\1\0\32\21"+
    "\1\7\1\23\1\10\7\0\1\62\u05da\0\12\11\206\0\12\11\306\0"+
    "\12\11\u019c\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0"+
    "\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0\12\11\166\0"+
    "\12\11\140\0\12\11\166\0\12\11\106\0\12\11\u0116\0\12\11\106\0"+
    "\12\11\u0746\0\12\11\46\0\12\11\u012c\0\12\11\200\0\12\11\246\0"+
    "\12\11\6\0\12\11\266\0\12\11\126\0\12\11\206\0\12\11\6\0"+
    "\12\11\u03ce\0\1\62\1\62\u85f6\0\12\11\u02a6\0\12\11\46\0\12\11"+
    "\306\0\12\11\26\0\12\11\126\0\12\11\u0196\0\12\11\u5316\0\12\11"+
    "\u0586\0\12\11\u0bbc\0\12\11\200\0\12\11\74\0\12\11\220\0\12\11"+
    "\u0116\0\12\11\u01d6\0\12\11\u0176\0\12\11\146\0\12\11\u0216\0\12\11"+
    "\u5176\0\12\11\346\0\12\11\u6c74\0\62\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\7\2\1\1\13\1\12"+
    "\1\3\23\12\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\0\1\30"+
    "\2\0\1\31\1\32\1\33\3\12\2\34\1\0\1\35"+
    "\1\36\1\37\4\12\1\40\5\12\2\40\23\12\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\24\1\26"+
    "\1\50\1\0\1\51\1\30\1\12\1\40\1\12\1\34"+
    "\1\51\24\12\1\40\4\12\1\52\1\53\1\24\1\54"+
    "\1\50\1\12\1\40\1\34\1\51\22\12\1\0\1\55"+
    "\1\12\1\34\1\51\1\40\14\12\1\0\1\55\1\12"+
    "\1\34\1\51\1\40\7\12\1\56\1\12\1\34\1\51"+
    "\1\40\4\12\1\34\1\51\1\40\2\12\1\34\1\51"+
    "\1\40\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\12\1\34"+
    "\1\51\1\12\1\34\1\51\1\12\1\34\1\51\1\12"+
    "\1\34\1\51\1\12\1\34\1\51\1\12\1\34\1\51"+
    "\1\12\1\34\1\51\1\12\1\34\1\51\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[573];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\314\0\63\0\377"+
    "\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\63\0\63\0\u06c6"+
    "\0\u06f9\0\63\0\u072c\0\63\0\63\0\u075f\0\63\0\u0792"+
    "\0\63\0\u07c5\0\u07f8\0\u082b\0\u085e\0\63\0\63\0\u0198"+
    "\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0231\0\63\0\u0264"+
    "\0\63\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0891\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57"+
    "\0\63\0\63\0\u0f8a\0\63\0\63\0\63\0\u0fbd\0\63"+
    "\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u1089\0\u10bc\0\u10ef\0\u10ef"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\63\0\63\0\u0792\0\u16b6"+
    "\0\u10bc\0\u16e9\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8"+
    "\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980"+
    "\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1b7e\0\u1c17\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1ee1\0\u1f7a"+
    "\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u1e7b\0\u20df"+
    "\0\u2112\0\u2145\0\u20df\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244"+
    "\0\u2277\0\u2211\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u22dd\0\u2376"+
    "\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e"+
    "\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6"+
    "\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e"+
    "\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6"+
    "\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e"+
    "\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06"+
    "\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e"+
    "\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036"+
    "\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce"+
    "\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366"+
    "\0\u3399\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe"+
    "\0\u3531\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696"+
    "\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e"+
    "\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960\0\u3993\0\u39c6"+
    "\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e"+
    "\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6"+
    "\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e"+
    "\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026"+
    "\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be"+
    "\0\u41f1\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356"+
    "\0\u4389\0\u43bc\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb\0\u44ee"+
    "\0\u4521\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686"+
    "\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u4785\0\u47b8\0\u47eb\0\u481e"+
    "\0\u4851\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950\0\u4983\0\u49b6"+
    "\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e"+
    "\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6"+
    "\0\u4d19\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\u4e4b\0\u4e7e"+
    "\0\u4eb1\0\u4ee4\0\u4f17\0\u4f4a\0\u4f7d\0\u4fb0\0\u4fe3\0\u5016"+
    "\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115\0\u5148\0\u517b\0\u51ae"+
    "\0\u51e1\0\u5214\0\u5247\0\u527a\0\u52ad\0\u52e0\0\u5313\0\u5346"+
    "\0\u5379\0\u53ac\0\u53df\0\u5412\0\u5445\0\u5478\0\u54ab\0\u54de"+
    "\0\u5511\0\u5544\0\u5577\0\u55aa\0\u55dd\0\u5610\0\u5643\0\u5676"+
    "\0\u56a9\0\u56dc\0\u570f\0\u5742\0\u5775\0\u57a8\0\u57db\0\u580e"+
    "\0\u5841\0\u5874\0\u58a7\0\u58da\0\u590d\0\u5940\0\u5973\0\u59a6"+
    "\0\u59d9\0\u5a0c\0\u5a3f\0\u5a72\0\u5aa5\0\u5ad8\0\u5b0b\0\u5b3e"+
    "\0\u5b71\0\u5ba4\0\u5bd7\0\u5c0a\0\u5c3d\0\u5c70\0\u5ca3\0\u5cd6"+
    "\0\u5d09\0\u5d3c\0\u5d6f\0\u5da2\0\u5dd5\0\u5e08\0\u5e3b\0\u5e6e"+
    "\0\u5ea1\0\u5ed4\0\u5f07\0\u5f3a\0\u5f6d\0\u5fa0\0\u5fd3\0\u6006"+
    "\0\u6039\0\u606c\0\u609f\0\u60d2\0\u6105\0\u6138\0\u616b\0\u619e"+
    "\0\u61d1\0\u6204\0\u6237\0\u626a\0\u629d\0\u62d0\0\u6303\0\u6336"+
    "\0\u6369\0\u639c\0\u63cf\0\u6402\0\u6435\0\u6468\0\u649b\0\u64ce"+
    "\0\u6501\0\u6534\0\u6567\0\u659a\0\u65cd\0\u6600\0\u6633\0\u6666"+
    "\0\u6699\0\u66cc\0\u66ff\0\u6732\0\u6765\0\u6798\0\u67cb\0\u67fe"+
    "\0\u6831\0\u6864\0\u6897\0\u68ca\0\u68fd\0\u6930\0\u6963\0\u6996"+
    "\0\u69c9\0\63\0\u69fc\0\u6a2f\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[573];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\4\1\22\1\23\1\24\1\25\1\26\1\21"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\21\1\37\1\40\1\41\1\42\1\43\1\44\1\21"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\65\0\1\56\54\0\1\57\11\0\1\60\133\0"+
    "\1\61\4\0\10\62\1\0\52\62\11\0\1\11\1\0"+
    "\1\63\1\64\1\11\56\0\1\65\1\66\2\0\1\65"+
    "\40\0\1\67\15\0\1\70\3\0\1\70\61\0\2\71"+
    "\3\0\1\71\1\0\2\71\1\72\7\71\1\73\14\71"+
    "\22\0\1\11\1\0\1\63\1\74\1\15\2\0\2\75"+
    "\1\0\27\75\11\0\16\76\1\77\44\76\11\0\1\100"+
    "\3\0\1\100\123\0\1\101\20\0\2\71\3\0\1\71"+
    "\1\0\27\71\25\0\2\71\3\0\1\71\1\0\2\71"+
    "\1\72\1\71\1\102\22\71\25\0\2\71\3\0\1\71"+
    "\1\0\10\71\1\103\1\104\15\71\25\0\2\71\3\0"+
    "\1\71\1\0\10\71\1\105\1\106\15\71\25\0\1\107"+
    "\1\71\3\0\1\71\1\0\27\71\25\0\1\110\1\71"+
    "\3\0\1\71\1\0\5\71\1\111\3\71\1\112\15\71"+
    "\25\0\2\71\3\0\1\71\1\0\11\71\1\113\15\71"+
    "\25\0\2\71\3\0\1\71\1\0\2\71\1\114\16\71"+
    "\1\115\5\71\25\0\2\71\3\0\1\71\1\0\4\71"+
    "\1\115\14\71\1\115\5\71\25\0\2\71\3\0\1\71"+
    "\1\0\1\71\1\116\7\71\1\117\15\71\25\0\2\71"+
    "\3\0\1\71\1\0\4\71\1\120\1\121\3\71\1\115"+
    "\4\71\1\122\10\71\25\0\2\71\3\0\1\71\1\0"+
    "\1\71\1\73\7\71\1\123\4\71\1\124\10\71\25\0"+
    "\1\104\1\71\3\0\1\71\1\0\13\71\1\125\2\71"+
    "\1\126\10\71\25\0\2\71\3\0\1\71\1\0\1\71"+
    "\1\127\25\71\25\0\2\71\3\0\1\71\1\0\4\71"+
    "\1\130\3\71\1\131\5\71\1\132\10\71\25\0\2\71"+
    "\3\0\1\71\1\0\1\71\1\133\7\71\1\134\10\71"+
    "\1\135\4\71\25\0\2\71\3\0\1\71\1\0\2\71"+
    "\1\136\24\71\25\0\2\71\3\0\1\71\1\0\11\71"+
    "\1\72\15\71\25\0\2\71\3\0\1\71\1\0\1\71"+
    "\1\137\2\71\1\140\22\71\25\0\2\71\3\0\1\71"+
    "\1\0\11\71\1\127\15\71\65\0\1\141\1\0\1\142"+
    "\61\0\1\143\1\144\61\0\1\145\1\146\1\147\3\0"+
    "\2\56\1\150\1\151\57\56\5\60\1\152\55\60\10\62"+
    "\1\150\52\62\11\0\1\153\3\0\1\153\57\0\1\154"+
    "\2\0\1\155\56\0\1\65\1\0\1\156\1\0\1\65"+
    "\61\0\2\157\3\0\1\157\1\0\27\157\25\0\2\157"+
    "\3\0\1\157\1\0\3\157\1\160\23\157\25\0\2\157"+
    "\3\0\1\157\1\0\15\157\1\161\11\157\23\0\1\154"+
    "\1\0\1\162\1\163\2\0\2\162\1\0\27\162\25\0"+
    "\2\162\2\0\2\162\1\0\27\162\25\0\2\157\3\0"+
    "\1\157\1\0\4\157\1\164\22\157\25\0\2\157\3\0"+
    "\1\157\1\0\12\157\1\160\14\157\25\0\2\157\3\0"+
    "\1\157\1\0\13\157\1\160\13\157\25\0\2\157\3\0"+
    "\1\157\1\0\17\157\1\160\7\157\25\0\2\157\3\0"+
    "\1\157\1\0\20\157\1\165\6\157\25\0\2\157\3\0"+
    "\1\157\1\0\1\157\1\166\12\157\1\167\7\157\1\170"+
    "\2\157\25\0\2\157\3\0\1\157\1\0\7\157\1\171"+
    "\17\157\25\0\2\157\3\0\1\157\1\0\13\157\1\161"+
    "\13\157\25\0\2\157\3\0\1\157\1\0\11\157\1\172"+
    "\15\157\25\0\2\157\3\0\1\157\1\0\13\157\1\173"+
    "\13\157\25\0\2\157\3\0\1\157\1\0\12\157\1\174"+
    "\1\160\13\157\25\0\2\157\3\0\1\157\1\0\6\157"+
    "\1\175\20\157\25\0\2\157\3\0\1\157\1\0\2\157"+
    "\1\176\24\157\25\0\2\157\3\0\1\157\1\0\22\157"+
    "\1\161\4\157\25\0\2\157\3\0\1\157\1\0\24\157"+
    "\1\161\2\157\25\0\1\177\1\157\3\0\1\157\1\0"+
    "\27\157\25\0\2\157\3\0\1\157\1\0\2\157\1\200"+
    "\24\157\25\0\2\157\3\0\1\157\1\0\1\157\1\201"+
    "\25\157\25\0\2\157\3\0\1\157\1\0\4\157\1\202"+
    "\22\157\25\0\2\157\3\0\1\157\1\0\11\157\1\203"+
    "\15\157\25\0\2\157\3\0\1\157\1\0\4\157\1\160"+
    "\22\157\25\0\2\157\3\0\1\157\1\0\10\157\1\204"+
    "\16\157\25\0\2\157\3\0\1\157\1\0\13\157\1\205"+
    "\13\157\25\0\2\157\3\0\1\157\1\0\10\157\1\206"+
    "\16\157\25\0\2\157\3\0\1\157\1\0\12\157\1\207"+
    "\14\157\25\0\2\157\3\0\1\157\1\0\4\157\1\210"+
    "\22\157\25\0\2\157\3\0\1\157\1\0\2\157\1\211"+
    "\24\157\25\0\2\157\3\0\1\157\1\0\13\157\1\212"+
    "\13\157\25\0\2\157\3\0\1\157\1\0\14\157\1\213"+
    "\12\157\25\0\2\157\3\0\1\157\1\0\11\157\1\214"+
    "\15\157\67\0\1\215\62\0\1\216\6\0\1\150\60\0"+
    "\5\60\1\152\1\217\54\60\11\0\1\153\2\0\1\220"+
    "\1\153\62\0\1\155\56\0\1\221\3\0\1\221\61\0"+
    "\2\222\3\0\1\222\1\0\27\222\25\0\1\223\1\222"+
    "\3\0\1\222\1\0\27\222\25\0\2\224\2\0\2\224"+
    "\1\0\27\224\25\0\1\224\1\225\2\0\2\224\1\0"+
    "\27\224\25\0\2\222\3\0\1\222\1\0\1\222\1\226"+
    "\25\222\25\0\2\222\3\0\1\222\1\0\2\222\1\227"+
    "\24\222\25\0\2\222\3\0\1\222\1\0\3\222\1\223"+
    "\6\222\1\223\14\222\25\0\2\222\3\0\1\222\1\0"+
    "\11\222\1\230\15\222\25\0\1\231\1\222\3\0\1\222"+
    "\1\0\27\222\25\0\2\222\3\0\1\222\1\0\10\222"+
    "\1\232\16\222\25\0\2\222\3\0\1\222\1\0\12\222"+
    "\1\233\14\222\25\0\2\222\3\0\1\222\1\0\11\222"+
    "\1\223\15\222\25\0\2\222\3\0\1\222\1\0\10\222"+
    "\1\234\16\222\25\0\1\235\1\222\3\0\1\222\1\0"+
    "\27\222\25\0\2\222\3\0\1\222\1\0\7\222\1\236"+
    "\17\222\25\0\2\222\3\0\1\222\1\0\2\222\1\223"+
    "\24\222\25\0\2\222\3\0\1\222\1\0\15\222\1\237"+
    "\11\222\25\0\2\222\3\0\1\222\1\0\4\222\1\223"+
    "\22\222\25\0\2\222\3\0\1\222\1\0\10\222\1\240"+
    "\16\222\25\0\2\222\3\0\1\222\1\0\4\222\1\241"+
    "\22\222\25\0\2\222\3\0\1\222\1\0\13\222\1\242"+
    "\13\222\25\0\2\222\3\0\1\222\1\0\16\222\1\223"+
    "\10\222\25\0\2\222\3\0\1\222\1\0\12\222\1\242"+
    "\14\222\25\0\2\222\3\0\1\222\1\0\15\222\1\242"+
    "\11\222\25\0\2\222\3\0\1\222\1\0\20\222\1\243"+
    "\6\222\25\0\2\222\3\0\1\222\1\0\14\222\1\244"+
    "\12\222\25\0\2\222\3\0\1\222\1\0\10\222\1\235"+
    "\16\222\25\0\2\222\3\0\1\222\1\0\25\222\1\245"+
    "\1\222\25\0\2\222\3\0\1\222\1\0\7\222\1\246"+
    "\4\222\1\247\12\222\23\0\1\250\2\0\1\251\61\0"+
    "\2\252\3\0\1\252\1\0\27\252\25\0\2\253\2\0"+
    "\2\253\1\0\27\253\25\0\1\253\1\254\2\0\2\253"+
    "\1\0\27\253\25\0\2\252\3\0\1\252\1\0\5\252"+
    "\1\255\21\252\25\0\2\252\3\0\1\252\1\0\13\252"+
    "\1\256\13\252\25\0\2\252\3\0\1\252\1\0\4\252"+
    "\1\257\22\252\25\0\2\252\3\0\1\252\1\0\1\252"+
    "\1\260\25\252\25\0\2\252\3\0\1\252\1\0\2\252"+
    "\1\255\24\252\25\0\1\261\1\252\3\0\1\252\1\0"+
    "\27\252\25\0\2\252\3\0\1\252\1\0\2\252\1\262"+
    "\24\252\25\0\2\252\3\0\1\252\1\0\12\252\1\255"+
    "\14\252\25\0\2\252\3\0\1\252\1\0\10\252\1\263"+
    "\16\252\25\0\2\252\3\0\1\252\1\0\13\252\1\255"+
    "\13\252\25\0\2\252\3\0\1\252\1\0\2\252\1\264"+
    "\24\252\25\0\2\252\3\0\1\252\1\0\13\252\1\265"+
    "\13\252\25\0\1\255\1\252\3\0\1\252\1\0\27\252"+
    "\25\0\2\252\3\0\1\252\1\0\1\252\1\266\25\252"+
    "\25\0\2\252\3\0\1\252\1\0\13\252\1\267\13\252"+
    "\25\0\1\257\1\252\3\0\1\252\1\0\27\252\25\0"+
    "\2\252\3\0\1\252\1\0\4\252\1\270\22\252\25\0"+
    "\1\271\1\252\3\0\1\252\1\0\27\252\26\0\1\251"+
    "\60\0\1\272\1\0\1\273\61\0\2\274\3\0\1\274"+
    "\1\0\27\274\25\0\2\275\2\0\2\275\1\0\27\275"+
    "\25\0\1\275\1\276\2\0\2\275\1\0\27\275\25\0"+
    "\2\274\3\0\1\274\1\0\11\274\1\277\15\274\25\0"+
    "\2\274\3\0\1\274\1\0\3\274\1\277\23\274\25\0"+
    "\2\274\3\0\1\274\1\0\13\274\1\277\13\274\25\0"+
    "\2\274\3\0\1\274\1\0\1\274\1\300\25\274\25\0"+
    "\1\277\1\274\3\0\1\274\1\0\27\274\25\0\2\274"+
    "\3\0\1\274\1\0\2\274\1\301\24\274\25\0\2\274"+
    "\3\0\1\274\1\0\7\274\1\277\17\274\25\0\2\274"+
    "\3\0\1\274\1\0\10\274\1\302\16\274\25\0\2\274"+
    "\3\0\1\274\1\0\4\274\1\303\22\274\25\0\2\274"+
    "\3\0\1\274\1\0\10\274\1\304\16\274\25\0\2\274"+
    "\3\0\1\274\1\0\1\274\1\305\25\274\25\0\2\274"+
    "\3\0\1\274\1\0\3\274\1\306\23\274\26\0\1\307"+
    "\62\0\1\273\61\0\2\310\3\0\1\310\1\0\27\310"+
    "\25\0\2\311\2\0\2\311\1\0\27\311\25\0\1\311"+
    "\1\312\2\0\2\311\1\0\27\311\25\0\2\310\3\0"+
    "\1\310\1\0\2\310\1\313\24\310\25\0\2\310\3\0"+
    "\1\310\1\0\13\310\1\313\13\310\25\0\2\310\3\0"+
    "\1\310\1\0\2\310\1\314\24\310\25\0\2\310\3\0"+
    "\1\310\1\0\3\310\1\313\23\310\25\0\2\310\3\0"+
    "\1\310\1\0\11\310\1\315\15\310\25\0\2\310\3\0"+
    "\1\310\1\0\23\310\1\313\3\310\25\0\2\310\3\0"+
    "\1\310\1\0\22\310\1\316\4\310\25\0\2\317\3\0"+
    "\1\317\1\0\27\317\25\0\2\320\2\0\2\320\1\0"+
    "\27\320\25\0\1\320\1\321\2\0\2\320\1\0\27\320"+
    "\25\0\2\317\3\0\1\317\1\0\13\317\1\322\13\317"+
    "\25\0\2\317\3\0\1\317\1\0\2\317\1\322\24\317"+
    "\25\0\2\317\3\0\1\317\1\0\4\317\1\323\22\317"+
    "\25\0\2\324\3\0\1\324\1\0\27\324\25\0\2\325"+
    "\2\0\2\325\1\0\27\325\25\0\1\325\1\326\2\0"+
    "\2\325\1\0\27\325\25\0\1\327\1\324\3\0\1\324"+
    "\1\0\27\324\25\0\2\330\3\0\1\330\1\0\27\330"+
    "\25\0\2\331\2\0\2\331\1\0\27\331\25\0\1\331"+
    "\1\332\2\0\2\331\1\0\27\331\25\0\2\333\3\0"+
    "\1\333\1\0\27\333\25\0\2\334\2\0\2\334\1\0"+
    "\27\334\25\0\1\334\1\335\2\0\2\334\1\0\27\334"+
    "\25\0\2\336\3\0\1\336\1\0\27\336\25\0\2\337"+
    "\2\0\2\337\1\0\27\337\25\0\1\337\1\340\2\0"+
    "\2\337\1\0\27\337\25\0\2\341\3\0\1\341\1\0"+
    "\27\341\25\0\2\342\2\0\2\342\1\0\27\342\25\0"+
    "\1\342\1\343\2\0\2\342\1\0\27\342\25\0\2\344"+
    "\3\0\1\344\1\0\27\344\25\0\2\345\2\0\2\345"+
    "\1\0\27\345\25\0\1\345\1\346\2\0\2\345\1\0"+
    "\27\345\25\0\2\347\3\0\1\347\1\0\27\347\25\0"+
    "\2\350\2\0\2\350\1\0\27\350\25\0\1\350\1\351"+
    "\2\0\2\350\1\0\27\350\25\0\2\352\3\0\1\352"+
    "\1\0\27\352\25\0\2\353\2\0\2\353\1\0\27\353"+
    "\25\0\1\353\1\354\2\0\2\353\1\0\27\353\25\0"+
    "\2\355\3\0\1\355\1\0\27\355\25\0\2\356\2\0"+
    "\2\356\1\0\27\356\25\0\1\356\1\357\2\0\2\356"+
    "\1\0\27\356\25\0\2\360\3\0\1\360\1\0\27\360"+
    "\25\0\2\361\2\0\2\361\1\0\27\361\25\0\1\361"+
    "\1\362\2\0\2\361\1\0\27\361\25\0\2\363\3\0"+
    "\1\363\1\0\27\363\25\0\2\364\2\0\2\364\1\0"+
    "\27\364\25\0\1\364\1\365\2\0\2\364\1\0\27\364"+
    "\25\0\2\366\3\0\1\366\1\0\27\366\25\0\2\367"+
    "\2\0\2\367\1\0\27\367\25\0\1\367\1\370\2\0"+
    "\2\367\1\0\27\367\25\0\2\371\3\0\1\371\1\0"+
    "\27\371\25\0\2\372\2\0\2\372\1\0\27\372\25\0"+
    "\1\372\1\373\2\0\2\372\1\0\27\372\25\0\2\374"+
    "\3\0\1\374\1\0\27\374\25\0\2\375\2\0\2\375"+
    "\1\0\27\375\25\0\1\375\1\376\2\0\2\375\1\0"+
    "\27\375\25\0\2\377\3\0\1\377\1\0\27\377\25\0"+
    "\2\u0100\2\0\2\u0100\1\0\27\u0100\25\0\1\u0100\1\u0101"+
    "\2\0\2\u0100\1\0\27\u0100\25\0\2\u0102\3\0\1\u0102"+
    "\1\0\27\u0102\25\0\2\u0103\2\0\2\u0103\1\0\27\u0103"+
    "\25\0\1\u0103\1\u0104\2\0\2\u0103\1\0\27\u0103\25\0"+
    "\2\u0105\3\0\1\u0105\1\0\27\u0105\25\0\2\u0106\2\0"+
    "\2\u0106\1\0\27\u0106\25\0\1\u0106\1\u0107\2\0\2\u0106"+
    "\1\0\27\u0106\25\0\2\u0108\3\0\1\u0108\1\0\27\u0108"+
    "\25\0\2\u0109\2\0\2\u0109\1\0\27\u0109\25\0\1\u0109"+
    "\1\u010a\2\0\2\u0109\1\0\27\u0109\25\0\2\u010b\3\0"+
    "\1\u010b\1\0\27\u010b\25\0\2\u010c\2\0\2\u010c\1\0"+
    "\27\u010c\25\0\1\u010c\1\u010d\2\0\2\u010c\1\0\27\u010c"+
    "\25\0\2\u010e\3\0\1\u010e\1\0\27\u010e\25\0\2\u010f"+
    "\2\0\2\u010f\1\0\27\u010f\25\0\1\u010f\1\u0110\2\0"+
    "\2\u010f\1\0\27\u010f\25\0\2\u0111\3\0\1\u0111\1\0"+
    "\27\u0111\25\0\2\u0112\2\0\2\u0112\1\0\27\u0112\25\0"+
    "\1\u0112\1\u0113\2\0\2\u0112\1\0\27\u0112\25\0\2\u0114"+
    "\3\0\1\u0114\1\0\27\u0114\25\0\2\u0115\2\0\2\u0115"+
    "\1\0\27\u0115\25\0\1\u0115\1\u0116\2\0\2\u0115\1\0"+
    "\27\u0115\25\0\2\u0117\3\0\1\u0117\1\0\27\u0117\25\0"+
    "\2\u0118\2\0\2\u0118\1\0\27\u0118\25\0\1\u0118\1\u0119"+
    "\2\0\2\u0118\1\0\27\u0118\25\0\2\u011a\3\0\1\u011a"+
    "\1\0\27\u011a\25\0\2\u011b\2\0\2\u011b\1\0\27\u011b"+
    "\25\0\1\u011b\1\u011c\2\0\2\u011b\1\0\27\u011b\25\0"+
    "\2\u011d\3\0\1\u011d\1\0\27\u011d\25\0\2\u011e\2\0"+
    "\2\u011e\1\0\27\u011e\25\0\1\u011e\1\u011f\2\0\2\u011e"+
    "\1\0\27\u011e\25\0\2\u0120\3\0\1\u0120\1\0\27\u0120"+
    "\25\0\2\u0121\2\0\2\u0121\1\0\27\u0121\25\0\1\u0121"+
    "\1\u0122\2\0\2\u0121\1\0\27\u0121\25\0\2\u0123\3\0"+
    "\1\u0123\1\0\27\u0123\25\0\2\u0124\2\0\2\u0124\1\0"+
    "\27\u0124\25\0\1\u0124\1\u0125\2\0\2\u0124\1\0\27\u0124"+
    "\25\0\2\u0126\3\0\1\u0126\1\0\27\u0126\25\0\2\u0127"+
    "\2\0\2\u0127\1\0\27\u0127\25\0\1\u0127\1\u0128\2\0"+
    "\2\u0127\1\0\27\u0127\25\0\2\u0129\3\0\1\u0129\1\0"+
    "\27\u0129\25\0\2\u012a\2\0\2\u012a\1\0\27\u012a\25\0"+
    "\1\u012a\1\u012b\2\0\2\u012a\1\0\27\u012a\25\0\2\u012c"+
    "\3\0\1\u012c\1\0\27\u012c\25\0\2\u012d\2\0\2\u012d"+
    "\1\0\27\u012d\25\0\1\u012d\1\u012e\2\0\2\u012d\1\0"+
    "\27\u012d\25\0\2\u012f\3\0\1\u012f\1\0\27\u012f\25\0"+
    "\2\u0130\2\0\2\u0130\1\0\27\u0130\25\0\1\u0130\1\u0131"+
    "\2\0\2\u0130\1\0\27\u0130\25\0\2\u0132\3\0\1\u0132"+
    "\1\0\27\u0132\25\0\2\u0133\2\0\2\u0133\1\0\27\u0133"+
    "\25\0\1\u0133\1\u0134\2\0\2\u0133\1\0\27\u0133\25\0"+
    "\2\u0135\3\0\1\u0135\1\0\27\u0135\25\0\2\u0136\2\0"+
    "\2\u0136\1\0\27\u0136\25\0\1\u0136\1\u0137\2\0\2\u0136"+
    "\1\0\27\u0136\25\0\2\u0138\3\0\1\u0138\1\0\27\u0138"+
    "\25\0\2\u0139\2\0\2\u0139\1\0\27\u0139\25\0\1\u0139"+
    "\1\u013a\2\0\2\u0139\1\0\27\u0139\25\0\2\u013b\3\0"+
    "\1\u013b\1\0\27\u013b\25\0\2\u013c\2\0\2\u013c\1\0"+
    "\27\u013c\25\0\1\u013c\1\u013d\2\0\2\u013c\1\0\27\u013c"+
    "\25\0\2\u013e\3\0\1\u013e\1\0\27\u013e\25\0\2\u013f"+
    "\2\0\2\u013f\1\0\27\u013f\25\0\1\u013f\1\u0140\2\0"+
    "\2\u013f\1\0\27\u013f\25\0\2\u0141\3\0\1\u0141\1\0"+
    "\27\u0141\25\0\2\u0142\2\0\2\u0142\1\0\27\u0142\25\0"+
    "\1\u0142\1\u0143\2\0\2\u0142\1\0\27\u0142\25\0\2\u0144"+
    "\3\0\1\u0144\1\0\27\u0144\25\0\2\u0145\2\0\2\u0145"+
    "\1\0\27\u0145\25\0\1\u0145\1\u0146\2\0\2\u0145\1\0"+
    "\27\u0145\25\0\2\u0147\3\0\1\u0147\1\0\27\u0147\25\0"+
    "\2\u0148\2\0\2\u0148\1\0\27\u0148\25\0\1\u0148\1\u0149"+
    "\2\0\2\u0148\1\0\27\u0148\25\0\2\u014a\3\0\1\u014a"+
    "\1\0\27\u014a\25\0\2\u014b\2\0\2\u014b\1\0\27\u014b"+
    "\25\0\1\u014b\1\u014c\2\0\2\u014b\1\0\27\u014b\25\0"+
    "\2\u014d\3\0\1\u014d\1\0\27\u014d\25\0\2\u014e\2\0"+
    "\2\u014e\1\0\27\u014e\25\0\1\u014e\1\u014f\2\0\2\u014e"+
    "\1\0\27\u014e\25\0\2\u0150\3\0\1\u0150\1\0\27\u0150"+
    "\25\0\2\u0151\2\0\2\u0151\1\0\27\u0151\25\0\1\u0151"+
    "\1\u0152\2\0\2\u0151\1\0\27\u0151\25\0\2\u0153\3\0"+
    "\1\u0153\1\0\27\u0153\25\0\2\u0154\2\0\2\u0154\1\0"+
    "\27\u0154\25\0\1\u0154\1\u0155\2\0\2\u0154\1\0\27\u0154"+
    "\25\0\2\u0156\3\0\1\u0156\1\0\27\u0156\25\0\2\u0157"+
    "\2\0\2\u0157\1\0\27\u0157\25\0\1\u0157\1\u0158\2\0"+
    "\2\u0157\1\0\27\u0157\25\0\2\u0159\3\0\1\u0159\1\0"+
    "\27\u0159\25\0\2\u015a\2\0\2\u015a\1\0\27\u015a\25\0"+
    "\1\u015a\1\u015b\2\0\2\u015a\1\0\27\u015a\25\0\2\u015c"+
    "\3\0\1\u015c\1\0\27\u015c\25\0\2\u015d\2\0\2\u015d"+
    "\1\0\27\u015d\25\0\1\u015d\1\u015e\2\0\2\u015d\1\0"+
    "\27\u015d\25\0\2\u015f\3\0\1\u015f\1\0\27\u015f\25\0"+
    "\2\u0160\2\0\2\u0160\1\0\27\u0160\25\0\1\u0160\1\u0161"+
    "\2\0\2\u0160\1\0\27\u0160\25\0\2\u0162\3\0\1\u0162"+
    "\1\0\27\u0162\25\0\2\u0163\2\0\2\u0163\1\0\27\u0163"+
    "\25\0\1\u0163\1\u0164\2\0\2\u0163\1\0\27\u0163\25\0"+
    "\2\u0165\3\0\1\u0165\1\0\27\u0165\25\0\2\u0166\2\0"+
    "\2\u0166\1\0\27\u0166\25\0\1\u0166\1\u0167\2\0\2\u0166"+
    "\1\0\27\u0166\25\0\2\u0168\3\0\1\u0168\1\0\27\u0168"+
    "\25\0\2\u0169\2\0\2\u0169\1\0\27\u0169\25\0\1\u0169"+
    "\1\u016a\2\0\2\u0169\1\0\27\u0169\25\0\2\u016b\3\0"+
    "\1\u016b\1\0\27\u016b\25\0\2\u016c\2\0\2\u016c\1\0"+
    "\27\u016c\25\0\1\u016c\1\u016d\2\0\2\u016c\1\0\27\u016c"+
    "\25\0\2\u016e\3\0\1\u016e\1\0\27\u016e\25\0\2\u016f"+
    "\2\0\2\u016f\1\0\27\u016f\25\0\1\u016f\1\u0170\2\0"+
    "\2\u016f\1\0\27\u016f\25\0\2\u0171\3\0\1\u0171\1\0"+
    "\27\u0171\25\0\2\u0172\2\0\2\u0172\1\0\27\u0172\25\0"+
    "\1\u0172\1\u0173\2\0\2\u0172\1\0\27\u0172\25\0\2\u0174"+
    "\3\0\1\u0174\1\0\27\u0174\25\0\2\u0175\2\0\2\u0175"+
    "\1\0\27\u0175\25\0\1\u0175\1\u0176\2\0\2\u0175\1\0"+
    "\27\u0175\25\0\2\u0177\3\0\1\u0177\1\0\27\u0177\25\0"+
    "\2\u0178\2\0\2\u0178\1\0\27\u0178\25\0\1\u0178\1\u0179"+
    "\2\0\2\u0178\1\0\27\u0178\25\0\2\u017a\3\0\1\u017a"+
    "\1\0\27\u017a\25\0\2\u017b\2\0\2\u017b\1\0\27\u017b"+
    "\25\0\1\u017b\1\u017c\2\0\2\u017b\1\0\27\u017b\25\0"+
    "\2\u017d\3\0\1\u017d\1\0\27\u017d\25\0\2\u017e\2\0"+
    "\2\u017e\1\0\27\u017e\25\0\1\u017e\1\u017f\2\0\2\u017e"+
    "\1\0\27\u017e\25\0\2\u0180\3\0\1\u0180\1\0\27\u0180"+
    "\25\0\2\u0181\2\0\2\u0181\1\0\27\u0181\25\0\1\u0181"+
    "\1\u0182\2\0\2\u0181\1\0\27\u0181\25\0\2\u0183\3\0"+
    "\1\u0183\1\0\27\u0183\25\0\2\u0184\2\0\2\u0184\1\0"+
    "\27\u0184\25\0\1\u0184\1\u0185\2\0\2\u0184\1\0\27\u0184"+
    "\25\0\2\u0186\3\0\1\u0186\1\0\27\u0186\25\0\2\u0187"+
    "\2\0\2\u0187\1\0\27\u0187\25\0\1\u0187\1\u0188\2\0"+
    "\2\u0187\1\0\27\u0187\25\0\2\u0189\3\0\1\u0189\1\0"+
    "\27\u0189\25\0\2\u018a\2\0\2\u018a\1\0\27\u018a\25\0"+
    "\1\u018a\1\u018b\2\0\2\u018a\1\0\27\u018a\25\0\2\u018c"+
    "\3\0\1\u018c\1\0\27\u018c\25\0\2\u018d\2\0\2\u018d"+
    "\1\0\27\u018d\25\0\1\u018d\1\u018e\2\0\2\u018d\1\0"+
    "\27\u018d\25\0\2\u018f\3\0\1\u018f\1\0\27\u018f\25\0"+
    "\2\u0190\2\0\2\u0190\1\0\27\u0190\25\0\1\u0190\1\u0191"+
    "\2\0\2\u0190\1\0\27\u0190\25\0\2\u0192\3\0\1\u0192"+
    "\1\0\27\u0192\25\0\2\u0193\2\0\2\u0193\1\0\27\u0193"+
    "\25\0\1\u0193\1\u0194\2\0\2\u0193\1\0\27\u0193\25\0"+
    "\2\u0195\3\0\1\u0195\1\0\27\u0195\25\0\2\u0196\2\0"+
    "\2\u0196\1\0\27\u0196\25\0\1\u0196\1\u0197\2\0\2\u0196"+
    "\1\0\27\u0196\25\0\2\u0198\3\0\1\u0198\1\0\27\u0198"+
    "\25\0\2\u0199\2\0\2\u0199\1\0\27\u0199\25\0\1\u0199"+
    "\1\u019a\2\0\2\u0199\1\0\27\u0199\25\0\2\u019b\3\0"+
    "\1\u019b\1\0\27\u019b\25\0\2\u019c\2\0\2\u019c\1\0"+
    "\27\u019c\25\0\1\u019c\1\u019d\2\0\2\u019c\1\0\27\u019c"+
    "\25\0\2\u019e\3\0\1\u019e\1\0\27\u019e\25\0\2\u019f"+
    "\2\0\2\u019f\1\0\27\u019f\25\0\1\u019f\1\u01a0\2\0"+
    "\2\u019f\1\0\27\u019f\25\0\2\u01a1\3\0\1\u01a1\1\0"+
    "\27\u01a1\25\0\2\u01a2\2\0\2\u01a2\1\0\27\u01a2\25\0"+
    "\1\u01a2\1\u01a3\2\0\2\u01a2\1\0\27\u01a2\25\0\2\u01a4"+
    "\3\0\1\u01a4\1\0\27\u01a4\25\0\2\u01a5\2\0\2\u01a5"+
    "\1\0\27\u01a5\25\0\1\u01a5\1\u01a6\2\0\2\u01a5\1\0"+
    "\27\u01a5\25\0\2\u01a7\3\0\1\u01a7\1\0\27\u01a7\25\0"+
    "\2\u01a8\2\0\2\u01a8\1\0\27\u01a8\25\0\1\u01a8\1\u01a9"+
    "\2\0\2\u01a8\1\0\27\u01a8\25\0\2\u01aa\3\0\1\u01aa"+
    "\1\0\27\u01aa\25\0\2\u01ab\2\0\2\u01ab\1\0\27\u01ab"+
    "\25\0\1\u01ab\1\u01ac\2\0\2\u01ab\1\0\27\u01ab\25\0"+
    "\2\u01ad\3\0\1\u01ad\1\0\27\u01ad\25\0\2\u01ae\2\0"+
    "\2\u01ae\1\0\27\u01ae\25\0\1\u01ae\1\u01af\2\0\2\u01ae"+
    "\1\0\27\u01ae\25\0\2\u01b0\3\0\1\u01b0\1\0\27\u01b0"+
    "\25\0\2\u01b1\2\0\2\u01b1\1\0\27\u01b1\25\0\1\u01b1"+
    "\1\u01b2\2\0\2\u01b1\1\0\27\u01b1\25\0\2\u01b3\3\0"+
    "\1\u01b3\1\0\27\u01b3\25\0\2\u01b4\2\0\2\u01b4\1\0"+
    "\27\u01b4\25\0\1\u01b4\1\u01b5\2\0\2\u01b4\1\0\27\u01b4"+
    "\25\0\2\u01b6\3\0\1\u01b6\1\0\27\u01b6\25\0\2\u01b7"+
    "\2\0\2\u01b7\1\0\27\u01b7\25\0\1\u01b7\1\u01b8\2\0"+
    "\2\u01b7\1\0\27\u01b7\25\0\2\u01b9\3\0\1\u01b9\1\0"+
    "\27\u01b9\25\0\2\u01ba\2\0\2\u01ba\1\0\27\u01ba\25\0"+
    "\1\u01ba\1\u01bb\2\0\2\u01ba\1\0\27\u01ba\25\0\2\u01bc"+
    "\3\0\1\u01bc\1\0\27\u01bc\25\0\2\u01bd\2\0\2\u01bd"+
    "\1\0\27\u01bd\25\0\1\u01bd\1\u01be\2\0\2\u01bd\1\0"+
    "\27\u01bd\25\0\2\u01bf\3\0\1\u01bf\1\0\27\u01bf\25\0"+
    "\2\u01c0\2\0\2\u01c0\1\0\27\u01c0\25\0\1\u01c0\1\u01c1"+
    "\2\0\2\u01c0\1\0\27\u01c0\25\0\2\u01c2\3\0\1\u01c2"+
    "\1\0\27\u01c2\25\0\2\u01c3\2\0\2\u01c3\1\0\27\u01c3"+
    "\25\0\1\u01c3\1\u01c4\2\0\2\u01c3\1\0\27\u01c3\25\0"+
    "\2\u01c5\3\0\1\u01c5\1\0\27\u01c5\25\0\2\u01c6\2\0"+
    "\2\u01c6\1\0\27\u01c6\25\0\1\u01c6\1\u01c7\2\0\2\u01c6"+
    "\1\0\27\u01c6\25\0\2\u01c8\3\0\1\u01c8\1\0\27\u01c8"+
    "\25\0\2\u01c9\2\0\2\u01c9\1\0\27\u01c9\25\0\1\u01c9"+
    "\1\u01ca\2\0\2\u01c9\1\0\27\u01c9\25\0\2\u01cb\3\0"+
    "\1\u01cb\1\0\27\u01cb\25\0\2\u01cc\2\0\2\u01cc\1\0"+
    "\27\u01cc\25\0\1\u01cc\1\u01cd\2\0\2\u01cc\1\0\27\u01cc"+
    "\25\0\2\u01ce\3\0\1\u01ce\1\0\27\u01ce\25\0\2\u01cf"+
    "\2\0\2\u01cf\1\0\27\u01cf\25\0\1\u01cf\1\u01d0\2\0"+
    "\2\u01cf\1\0\27\u01cf\25\0\2\u01d1\3\0\1\u01d1\1\0"+
    "\27\u01d1\25\0\2\u01d2\2\0\2\u01d2\1\0\27\u01d2\25\0"+
    "\1\u01d2\1\u01d3\2\0\2\u01d2\1\0\27\u01d2\25\0\2\u01d4"+
    "\3\0\1\u01d4\1\0\27\u01d4\25\0\2\u01d5\2\0\2\u01d5"+
    "\1\0\27\u01d5\25\0\1\u01d5\1\u01d6\2\0\2\u01d5\1\0"+
    "\27\u01d5\25\0\2\u01d7\3\0\1\u01d7\1\0\27\u01d7\25\0"+
    "\2\u01d8\2\0\2\u01d8\1\0\27\u01d8\25\0\1\u01d8\1\u01d9"+
    "\2\0\2\u01d8\1\0\27\u01d8\25\0\2\u01da\3\0\1\u01da"+
    "\1\0\27\u01da\25\0\2\u01db\2\0\2\u01db\1\0\27\u01db"+
    "\25\0\1\u01db\1\u01dc\2\0\2\u01db\1\0\27\u01db\25\0"+
    "\2\u01dd\3\0\1\u01dd\1\0\27\u01dd\25\0\2\u01de\2\0"+
    "\2\u01de\1\0\27\u01de\25\0\1\u01de\1\u01df\2\0\2\u01de"+
    "\1\0\27\u01de\25\0\2\u01e0\3\0\1\u01e0\1\0\27\u01e0"+
    "\25\0\2\u01e1\2\0\2\u01e1\1\0\27\u01e1\25\0\1\u01e1"+
    "\1\u01e2\2\0\2\u01e1\1\0\27\u01e1\25\0\2\u01e3\3\0"+
    "\1\u01e3\1\0\27\u01e3\25\0\2\u01e4\2\0\2\u01e4\1\0"+
    "\27\u01e4\25\0\1\u01e4\1\u01e5\2\0\2\u01e4\1\0\27\u01e4"+
    "\25\0\2\u01e6\3\0\1\u01e6\1\0\27\u01e6\25\0\2\u01e7"+
    "\2\0\2\u01e7\1\0\27\u01e7\25\0\1\u01e7\1\u01e8\2\0"+
    "\2\u01e7\1\0\27\u01e7\25\0\2\u01e9\3\0\1\u01e9\1\0"+
    "\27\u01e9\25\0\2\u01ea\2\0\2\u01ea\1\0\27\u01ea\25\0"+
    "\1\u01ea\1\u01eb\2\0\2\u01ea\1\0\27\u01ea\25\0\2\u01ec"+
    "\3\0\1\u01ec\1\0\27\u01ec\25\0\2\u01ed\2\0\2\u01ed"+
    "\1\0\27\u01ed\25\0\1\u01ed\1\u01ee\2\0\2\u01ed\1\0"+
    "\27\u01ed\25\0\2\u01ef\3\0\1\u01ef\1\0\27\u01ef\25\0"+
    "\2\u01f0\2\0\2\u01f0\1\0\27\u01f0\25\0\1\u01f0\1\u01f1"+
    "\2\0\2\u01f0\1\0\27\u01f0\25\0\2\u01f2\3\0\1\u01f2"+
    "\1\0\27\u01f2\25\0\2\u01f3\2\0\2\u01f3\1\0\27\u01f3"+
    "\25\0\1\u01f3\1\u01f4\2\0\2\u01f3\1\0\27\u01f3\25\0"+
    "\2\u01f5\3\0\1\u01f5\1\0\27\u01f5\25\0\2\u01f6\2\0"+
    "\2\u01f6\1\0\27\u01f6\25\0\1\u01f6\1\u01f7\2\0\2\u01f6"+
    "\1\0\27\u01f6\25\0\2\u01f8\3\0\1\u01f8\1\0\27\u01f8"+
    "\25\0\2\u01f9\2\0\2\u01f9\1\0\27\u01f9\25\0\1\u01f9"+
    "\1\u01fa\2\0\2\u01f9\1\0\27\u01f9\25\0\2\u01fb\3\0"+
    "\1\u01fb\1\0\27\u01fb\25\0\2\u01fc\2\0\2\u01fc\1\0"+
    "\27\u01fc\25\0\1\u01fc\1\u01fd\2\0\2\u01fc\1\0\27\u01fc"+
    "\25\0\2\u01fe\3\0\1\u01fe\1\0\27\u01fe\25\0\2\u01ff"+
    "\2\0\2\u01ff\1\0\27\u01ff\25\0\1\u01ff\1\u0200\2\0"+
    "\2\u01ff\1\0\27\u01ff\25\0\2\u0201\3\0\1\u0201\1\0"+
    "\27\u0201\25\0\2\u0202\2\0\2\u0202\1\0\27\u0202\25\0"+
    "\1\u0202\1\u0203\2\0\2\u0202\1\0\27\u0202\25\0\2\u0204"+
    "\3\0\1\u0204\1\0\27\u0204\25\0\2\u0205\2\0\2\u0205"+
    "\1\0\27\u0205\25\0\1\u0205\1\u0206\2\0\2\u0205\1\0"+
    "\27\u0205\25\0\2\u0207\3\0\1\u0207\1\0\27\u0207\25\0"+
    "\2\u0208\2\0\2\u0208\1\0\27\u0208\25\0\1\u0208\1\u0209"+
    "\2\0\2\u0208\1\0\27\u0208\25\0\2\u020a\3\0\1\u020a"+
    "\1\0\27\u020a\25\0\2\u020b\2\0\2\u020b\1\0\27\u020b"+
    "\25\0\1\u020b\1\u020c\2\0\2\u020b\1\0\27\u020b\25\0"+
    "\2\u020d\3\0\1\u020d\1\0\27\u020d\25\0\2\u020e\2\0"+
    "\2\u020e\1\0\27\u020e\25\0\1\u020e\1\u020f\2\0\2\u020e"+
    "\1\0\27\u020e\25\0\2\u0210\3\0\1\u0210\1\0\27\u0210"+
    "\25\0\2\u0211\2\0\2\u0211\1\0\27\u0211\25\0\1\u0211"+
    "\1\u0212\2\0\2\u0211\1\0\27\u0211\25\0\2\u0213\3\0"+
    "\1\u0213\1\0\27\u0213\25\0\2\u0214\2\0\2\u0214\1\0"+
    "\27\u0214\25\0\1\u0214\1\u0215\2\0\2\u0214\1\0\27\u0214"+
    "\25\0\2\u0216\3\0\1\u0216\1\0\27\u0216\25\0\2\u0217"+
    "\2\0\2\u0217\1\0\27\u0217\25\0\1\u0217\1\u0218\2\0"+
    "\2\u0217\1\0\27\u0217\25\0\2\u0219\3\0\1\u0219\1\0"+
    "\27\u0219\25\0\2\u021a\2\0\2\u021a\1\0\27\u021a\25\0"+
    "\1\u021a\1\u021b\2\0\2\u021a\1\0\27\u021a\25\0\2\u021c"+
    "\3\0\1\u021c\1\0\27\u021c\25\0\2\u021d\2\0\2\u021d"+
    "\1\0\27\u021d\25\0\1\u021d\1\u021e\2\0\2\u021d\1\0"+
    "\27\u021d\25\0\2\u021f\3\0\1\u021f\1\0\27\u021f\25\0"+
    "\2\u0220\2\0\2\u0220\1\0\27\u0220\25\0\1\u0220\1\u0221"+
    "\2\0\2\u0220\1\0\27\u0220\25\0\2\u0222\3\0\1\u0222"+
    "\1\0\27\u0222\25\0\2\u0223\2\0\2\u0223\1\0\27\u0223"+
    "\25\0\1\u0223\1\u0224\2\0\2\u0223\1\0\27\u0223\25\0"+
    "\2\u0225\3\0\1\u0225\1\0\27\u0225\25\0\2\u0226\2\0"+
    "\2\u0226\1\0\27\u0226\25\0\1\u0226\1\u0227\2\0\2\u0226"+
    "\1\0\27\u0226\25\0\2\u0228\3\0\1\u0228\1\0\27\u0228"+
    "\25\0\2\u0229\2\0\2\u0229\1\0\27\u0229\25\0\1\u0229"+
    "\1\u022a\2\0\2\u0229\1\0\27\u0229\25\0\2\u022b\3\0"+
    "\1\u022b\1\0\27\u022b\25\0\2\u022c\2\0\2\u022c\1\0"+
    "\27\u022c\25\0\1\u022c\1\u022d\2\0\2\u022c\1\0\27\u022c"+
    "\25\0\2\u022e\3\0\1\u022e\1\0\27\u022e\25\0\2\u022f"+
    "\2\0\2\u022f\1\0\27\u022f\25\0\1\u022f\1\u0230\2\0"+
    "\2\u022f\1\0\27\u022f\25\0\2\u0231\3\0\1\u0231\1\0"+
    "\27\u0231\25\0\2\u0232\2\0\2\u0232\1\0\27\u0232\25\0"+
    "\1\u0232\1\u0233\2\0\2\u0232\1\0\27\u0232\25\0\2\u0234"+
    "\3\0\1\u0234\1\0\27\u0234\25\0\2\u0235\2\0\2\u0235"+
    "\1\0\27\u0235\25\0\1\u0235\1\u0236\2\0\2\u0235\1\0"+
    "\27\u0235\25\0\2\u0237\3\0\1\u0237\1\0\27\u0237\25\0"+
    "\2\u0238\2\0\2\u0238\1\0\27\u0238\25\0\1\u0238\1\u0239"+
    "\2\0\2\u0238\1\0\27\u0238\25\0\2\u023a\3\0\1\u023a"+
    "\1\0\27\u023a\25\0\2\u023b\2\0\2\u023b\1\0\27\u023b"+
    "\25\0\1\u023b\1\u023c\2\0\2\u023b\1\0\27\u023b\25\0"+
    "\2\u023d\2\0\2\u023d\1\0\27\u023d\25\0\1\u023d\1\155"+
    "\2\0\2\u023d\1\0\27\u023d\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27234];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\36\1\2\11"+
    "\2\1\1\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\0\1\1\2\0\2\11\6\1\1\0\1\11\1\1"+
    "\1\11\37\1\2\11\1\1\3\11\1\1\1\11\3\1"+
    "\1\0\40\1\2\11\31\1\1\0\21\1\1\0\u017f\1"+
    "\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[573];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private Symbol token(int type, Object value)
{
    return new Symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 364) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(sym.ERROR_LEXICO, "Caracter inválido " + yytext());
            }
          case 47: break;
          case 2: 
            { return token(sym.OP_DIVISION, yytext());
            }
          case 48: break;
          case 3: 
            { /*Omitir el espacio blanco*/
            }
          case 49: break;
          case 4: 
            { return token(sym.PAR_APER, yytext());
            }
          case 50: break;
          case 5: 
            { return token(sym.OP_MULTIPLICACION, yytext());
            }
          case 51: break;
          case 6: 
            { return token(sym.PAR_CERR, yytext());
            }
          case 52: break;
          case 7: 
            { return token(sym.ENTERO, yytext());
            }
          case 53: break;
          case 8: 
            { return token(sym.OP_RESTA, yytext());
            }
          case 54: break;
          case 9: 
            { return token(sym.PUNTO, yytext());
            }
          case 55: break;
          case 10: 
            { return token(sym.ID, yytext().toUpperCase());
            }
          case 56: break;
          case 11: 
            { return token(sym.DOS_PUNTO, yytext());
            }
          case 57: break;
          case 12: 
            { return token(sym.COMA, yytext());
            }
          case 58: break;
          case 13: 
            { return token(sym.PUNTO_COMA, yytext());
            }
          case 59: break;
          case 14: 
            { return token(sym.OP_SUMA, yytext());
            }
          case 60: break;
          case 15: 
            { return token(sym.OP_MAYOR, yytext());
            }
          case 61: break;
          case 16: 
            { return token(sym.OP_IGUAL, yytext());
            }
          case 62: break;
          case 17: 
            { return token(sym.OP_MENOR, yytext());
            }
          case 63: break;
          case 18: 
            { return token(sym.BRA_APER, yytext());
            }
          case 64: break;
          case 19: 
            { return token(sym.BRA_CERR, yytext());
            }
          case 65: break;
          case 20: 
            { return token(sym.COMMENT, yytext());
            }
          case 66: break;
          case 21: 
            { return token(sym.OP_DIV_ASIGN, yytext());
            }
          case 67: break;
          case 22: 
            { return token(sym.ERROR_LEXICO, "Comentario no cerrado" + yytext());
            }
          case 68: break;
          case 23: 
            { return token(sym.OP_MUL_ASIGN, yytext());
            }
          case 69: break;
          case 24: 
            { return token(sym.ERROR_LEXICO, "No tiene nada después del punto" + yytext());
            }
          case 70: break;
          case 25: 
            { return token(sym.OP_DEC, yytext());
            }
          case 71: break;
          case 26: 
            { return token(sym.OP_RESTA_ASIGN, yytext());
            }
          case 72: break;
          case 27: 
            { return token(sym.ERROR_LEXICO, "No tiene nada antes del punto " + yytext());
            }
          case 73: break;
          case 28: 
            { return token(sym.ERROR_LEXICO, "No debe comenzar con números" + yytext());
            }
          case 74: break;
          case 29: 
            { return token(sym.STRING_C, yytext());
            }
          case 75: break;
          case 30: 
            { return token(sym.CHARACTER, yytext());
            }
          case 76: break;
          case 31: 
            { return token(sym.ASIGN, yytext());
            }
          case 77: break;
          case 32: 
            { return token(sym.PALABRA_RESERVADA, yytext());
            }
          case 78: break;
          case 33: 
            { return token(sym.OP_INC, yytext());
            }
          case 79: break;
          case 34: 
            { return token(sym.OP_SUMA_ASIGN, yytext());
            }
          case 80: break;
          case 35: 
            { return token(sym.OP_SHIFT_DER, yytext());
            }
          case 81: break;
          case 36: 
            { return token(sym.OP_MAYOR_IGUAL, yytext());
            }
          case 82: break;
          case 37: 
            { return token(sym.OP_DISTINTO, yytext());
            }
          case 83: break;
          case 38: 
            { return token(sym.OP_MENOR_IGUAL, yytext());
            }
          case 84: break;
          case 39: 
            { return token(sym.OP_SHIFT_IZQ, yytext());
            }
          case 85: break;
          case 40: 
            { return token(sym.FLOTANTE, yytext());
            }
          case 86: break;
          case 41: 
            { return token(sym.ERROR_LEXICO, "Notación científica mala " + yytext());
            }
          case 87: break;
          case 42: 
            { return token(sym.OP_SHIFT_DER_ASIGN, yytext());
            }
          case 88: break;
          case 43: 
            { return token(sym.OP_SHIFT_IZQ_ASIGN, yytext());
            }
          case 89: break;
          case 44: 
            { return token(sym.ERROR_LEXICO, "Notación científica mala - error no tiene nada después del exponente" + yytext());
            }
          case 90: break;
          case 45: 
            { return token(sym.NOTA_CIENTIFICA, yytext());
            }
          case 91: break;
          case 46: 
            { return token(sym.ERROR_LEXICO, "Notación científica mala - error el numero después del E tiene que ser entero" + yytext());
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
