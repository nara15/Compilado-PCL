/* The following code was generated by JFlex 1.6.1 */

package scanner;

import java_cup.runtime.*;
import symbols.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>M:/Github/Compilador-PCL/SCANNER/Scanner_PCL/src/scanner/pcl_rules.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\2\1\53\1\53\1\3\22\0\1\22\1\0\1\16"+
    "\1\17\4\0\1\4\1\6\1\5\1\21\1\0\1\12\1\14\1\1"+
    "\12\11\7\0\4\20\1\15\25\20\4\0\1\20\1\0\1\24\1\31"+
    "\1\40\1\26\1\32\1\45\1\33\1\42\1\34\1\20\1\51\1\36"+
    "\1\47\1\25\1\35\1\50\1\20\1\27\1\41\1\37\1\46\1\43"+
    "\1\44\1\52\1\30\1\20\1\7\1\23\1\10\7\0\1\53\u05da\0"+
    "\12\13\206\0\12\13\306\0\12\13\u019c\0\12\13\166\0\12\13\166\0"+
    "\12\13\166\0\12\13\166\0\12\13\166\0\12\13\166\0\12\13\166\0"+
    "\12\13\166\0\12\13\166\0\12\13\140\0\12\13\166\0\12\13\106\0"+
    "\12\13\u0116\0\12\13\106\0\12\13\u0746\0\12\13\46\0\12\13\u012c\0"+
    "\12\13\200\0\12\13\246\0\12\13\6\0\12\13\266\0\12\13\126\0"+
    "\12\13\206\0\12\13\6\0\12\13\u03ce\0\1\53\1\53\u85f6\0\12\13"+
    "\u02a6\0\12\13\46\0\12\13\306\0\12\13\26\0\12\13\126\0\12\13"+
    "\u0196\0\12\13\u5316\0\12\13\u0586\0\12\13\u0bbc\0\12\13\200\0\12\13"+
    "\74\0\12\13\220\0\12\13\u0116\0\12\13\u01d6\0\12\13\u0176\0\12\13"+
    "\146\0\12\13\u0216\0\12\13\u5176\0\12\13\346\0\12\13\u6c74\0\62\13"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\2\1\1\3\5\1\1\4\1\2"+
    "\24\1\1\5\2\0\1\5\1\3\3\0\1\6\1\0"+
    "\1\7\1\10\5\6\1\11\7\6\2\11\23\6\2\5"+
    "\2\0\1\12\1\6\1\13\1\6\1\11\24\6\1\11"+
    "\4\6\1\5\1\14\1\0\3\6\1\11\21\6\1\11"+
    "\15\6\1\11\10\6\1\11\4\6\1\11\2\6\1\11"+
    "\167\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\54\0\204\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\54\0\u0160\0\u01e4\0\u0210"+
    "\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370"+
    "\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0"+
    "\0\u04fc\0\u0528\0\u0554\0\u0580\0\260\0\260\0\u05ac\0\u05d8"+
    "\0\u0604\0\u0134\0\u0630\0\u018c\0\54\0\u01b8\0\u065c\0\u0688"+
    "\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8"+
    "\0\u0814\0\u0840\0\u086c\0\u0898\0\u0630\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc"+
    "\0\54\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0cb8\0\u0ce4"+
    "\0\u0cb8\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18"+
    "\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78"+
    "\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8"+
    "\0\u1104\0\u1130\0\u0580\0\u115c\0\u115c\0\u1188\0\u11b4\0\u11e0"+
    "\0\u1188\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314"+
    "\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474"+
    "\0\u14a0\0\u14cc\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708"+
    "\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c"+
    "\0\u1868\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1918\0\u1944"+
    "\0\u1970\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8"+
    "\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38"+
    "\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98"+
    "\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8"+
    "\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158"+
    "\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8"+
    "\0\u22e4\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418"+
    "\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578"+
    "\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8"+
    "\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4\0\u27e0\0\u280c\0\u2838"+
    "\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c\0\u2998"+
    "\0\u29c4\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0\0\u2acc\0\u2af8"+
    "\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58"+
    "\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08\0\u2d34\0\u2d60\0\u2d8c\0\u2db8"+
    "\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\2\2\1\6\1\2\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\12\1\15"+
    "\1\4\1\16\1\17\1\20\1\21\1\22\1\12\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\12\1\34\1\35\1\36\1\37\1\40\1\41\1\12"+
    "\1\42\56\0\1\43\57\0\1\44\46\0\10\45\1\46"+
    "\43\45\11\0\1\47\1\0\1\50\1\51\50\0\1\52"+
    "\1\0\1\52\51\0\1\50\1\0\1\50\1\51\50\0"+
    "\1\53\3\0\1\53\2\0\1\53\2\0\30\53\1\0"+
    "\16\54\1\55\35\54\11\0\1\56\1\0\1\56\51\0"+
    "\1\53\3\0\1\53\2\0\1\53\2\0\2\53\1\57"+
    "\1\53\1\60\23\53\12\0\1\53\3\0\1\53\2\0"+
    "\1\53\2\0\11\53\1\61\1\62\15\53\12\0\1\53"+
    "\3\0\1\53\2\0\1\53\2\0\11\53\1\63\1\64"+
    "\15\53\12\0\1\53\3\0\1\53\2\0\1\53\2\0"+
    "\7\53\1\65\20\53\12\0\1\53\3\0\1\53\2\0"+
    "\1\53\2\0\5\53\1\66\1\53\1\67\2\53\1\70"+
    "\15\53\12\0\1\53\3\0\1\53\2\0\1\53\2\0"+
    "\2\53\1\71\10\53\1\72\14\53\12\0\1\53\3\0"+
    "\1\53\2\0\1\53\2\0\12\53\1\73\15\53\12\0"+
    "\1\53\3\0\1\53\2\0\1\53\2\0\2\53\1\74"+
    "\17\53\1\75\5\53\12\0\1\53\3\0\1\53\2\0"+
    "\1\53\2\0\4\53\1\75\15\53\1\75\5\53\12\0"+
    "\1\53\3\0\1\53\2\0\1\53\2\0\1\53\1\76"+
    "\10\53\1\77\15\53\12\0\1\53\3\0\1\53\2\0"+
    "\1\53\2\0\4\53\1\100\1\101\4\53\1\75\4\53"+
    "\1\102\10\53\12\0\1\53\3\0\1\53\2\0\1\53"+
    "\2\0\1\53\1\72\10\53\1\103\4\53\1\104\10\53"+
    "\12\0\1\53\3\0\1\53\2\0\1\53\2\0\7\53"+
    "\1\62\4\53\1\105\2\53\1\106\10\53\12\0\1\53"+
    "\3\0\1\53\2\0\1\53\2\0\1\53\1\107\26\53"+
    "\12\0\1\53\3\0\1\53\2\0\1\53\2\0\4\53"+
    "\1\110\4\53\1\111\5\53\1\112\10\53\12\0\1\53"+
    "\3\0\1\53\2\0\1\53\2\0\1\53\1\113\10\53"+
    "\1\114\10\53\1\115\4\53\12\0\1\53\3\0\1\53"+
    "\2\0\1\53\2\0\2\53\1\116\25\53\12\0\1\53"+
    "\3\0\1\53\2\0\1\53\2\0\12\53\1\71\15\53"+
    "\12\0\1\53\3\0\1\53\2\0\1\53\2\0\1\53"+
    "\1\117\2\53\1\120\23\53\12\0\1\53\3\0\1\53"+
    "\2\0\1\53\2\0\12\53\1\107\15\53\1\0\2\43"+
    "\1\121\1\122\50\43\5\44\1\123\46\44\11\0\1\47"+
    "\1\0\1\50\1\51\1\124\47\0\1\50\1\0\1\50"+
    "\1\51\1\124\47\0\1\125\1\0\1\125\51\0\1\126"+
    "\3\0\1\126\2\0\1\126\2\0\30\126\12\0\1\126"+
    "\3\0\1\126\2\0\1\126\2\0\3\126\1\127\24\126"+
    "\12\0\1\126\3\0\1\126\2\0\1\126\2\0\4\126"+
    "\1\130\23\126\12\0\1\126\3\0\1\126\2\0\1\126"+
    "\2\0\13\126\1\131\14\126\12\0\1\126\3\0\1\126"+
    "\2\0\1\126\2\0\14\126\1\131\13\126\12\0\1\126"+
    "\3\0\1\126\2\0\1\126\2\0\20\126\1\131\7\126"+
    "\12\0\1\126\3\0\1\126\2\0\1\126\2\0\21\126"+
    "\1\132\6\126\12\0\1\126\3\0\1\126\2\0\1\126"+
    "\2\0\1\126\1\133\13\126\1\134\7\126\1\135\2\126"+
    "\12\0\1\126\3\0\1\126\2\0\1\126\2\0\14\126"+
    "\1\136\13\126\12\0\1\126\3\0\1\126\2\0\1\126"+
    "\2\0\10\126\1\137\17\126\12\0\1\126\3\0\1\126"+
    "\2\0\1\126\2\0\12\126\1\140\15\126\12\0\1\126"+
    "\3\0\1\126\2\0\1\126\2\0\3\126\1\131\24\126"+
    "\12\0\1\126\3\0\1\126\2\0\1\126\2\0\16\126"+
    "\1\136\11\126\12\0\1\126\3\0\1\126\2\0\1\126"+
    "\2\0\14\126\1\141\13\126\12\0\1\126\3\0\1\126"+
    "\2\0\1\126\2\0\13\126\1\142\1\131\13\126\12\0"+
    "\1\126\3\0\1\126\2\0\1\126\2\0\6\126\1\143"+
    "\21\126\12\0\1\126\3\0\1\126\2\0\1\126\2\0"+
    "\2\126\1\144\25\126\12\0\1\126\3\0\1\126\2\0"+
    "\1\126\2\0\23\126\1\136\4\126\12\0\1\126\3\0"+
    "\1\126\2\0\1\126\2\0\25\126\1\136\2\126\12\0"+
    "\1\126\3\0\1\126\2\0\1\126\2\0\7\126\1\145"+
    "\20\126\12\0\1\126\3\0\1\126\2\0\1\126\2\0"+
    "\2\126\1\146\25\126\12\0\1\126\3\0\1\126\2\0"+
    "\1\126\2\0\1\126\1\147\26\126\12\0\1\126\3\0"+
    "\1\126\2\0\1\126\2\0\4\126\1\150\23\126\12\0"+
    "\1\126\3\0\1\126\2\0\1\126\2\0\12\126\1\151"+
    "\15\126\12\0\1\126\3\0\1\126\2\0\1\126\2\0"+
    "\4\126\1\131\23\126\12\0\1\126\3\0\1\126\2\0"+
    "\1\126\2\0\11\126\1\152\16\126\12\0\1\126\3\0"+
    "\1\126\2\0\1\126\2\0\14\126\1\153\13\126\12\0"+
    "\1\126\3\0\1\126\2\0\1\126\2\0\11\126\1\154"+
    "\16\126\12\0\1\126\3\0\1\126\2\0\1\126\2\0"+
    "\13\126\1\155\14\126\12\0\1\126\3\0\1\126\2\0"+
    "\1\126\2\0\4\126\1\156\23\126\12\0\1\126\3\0"+
    "\1\126\2\0\1\126\2\0\2\126\1\157\25\126\12\0"+
    "\1\126\3\0\1\126\2\0\1\126\2\0\14\126\1\160"+
    "\13\126\12\0\1\126\3\0\1\126\2\0\1\126\2\0"+
    "\15\126\1\161\12\126\12\0\1\126\3\0\1\126\2\0"+
    "\1\126\2\0\12\126\1\162\15\126\3\0\1\121\51\0"+
    "\5\44\1\123\1\163\45\44\11\0\1\164\1\165\52\0"+
    "\1\125\1\0\1\125\1\0\1\124\47\0\1\166\3\0"+
    "\1\166\2\0\1\166\2\0\30\166\12\0\1\166\3\0"+
    "\1\166\2\0\1\166\2\0\1\166\1\167\26\166\12\0"+
    "\1\166\3\0\1\166\2\0\1\166\2\0\2\166\1\170"+
    "\25\166\12\0\1\166\3\0\1\166\2\0\1\166\2\0"+
    "\3\166\1\171\7\166\1\171\14\166\12\0\1\166\3\0"+
    "\1\166\2\0\1\166\2\0\12\166\1\172\15\166\12\0"+
    "\1\166\3\0\1\166\2\0\1\166\2\0\7\166\1\173"+
    "\20\166\12\0\1\166\3\0\1\166\2\0\1\166\2\0"+
    "\7\166\1\171\20\166\12\0\1\166\3\0\1\166\2\0"+
    "\1\166\2\0\11\166\1\174\16\166\12\0\1\166\3\0"+
    "\1\166\2\0\1\166\2\0\13\166\1\175\14\166\12\0"+
    "\1\166\3\0\1\166\2\0\1\166\2\0\12\166\1\171"+
    "\15\166\12\0\1\166\3\0\1\166\2\0\1\166\2\0"+
    "\11\166\1\176\16\166\12\0\1\166\3\0\1\166\2\0"+
    "\1\166\2\0\7\166\1\177\20\166\12\0\1\166\3\0"+
    "\1\166\2\0\1\166\2\0\10\166\1\200\17\166\12\0"+
    "\1\166\3\0\1\166\2\0\1\166\2\0\2\166\1\171"+
    "\25\166\12\0\1\166\3\0\1\166\2\0\1\166\2\0"+
    "\16\166\1\201\11\166\12\0\1\166\3\0\1\166\2\0"+
    "\1\166\2\0\4\166\1\171\23\166\12\0\1\166\3\0"+
    "\1\166\2\0\1\166\2\0\11\166\1\202\16\166\12\0"+
    "\1\166\3\0\1\166\2\0\1\166\2\0\4\166\1\203"+
    "\23\166\12\0\1\166\3\0\1\166\2\0\1\166\2\0"+
    "\14\166\1\204\13\166\12\0\1\166\3\0\1\166\2\0"+
    "\1\166\2\0\17\166\1\171\10\166\12\0\1\166\3\0"+
    "\1\166\2\0\1\166\2\0\13\166\1\204\14\166\12\0"+
    "\1\166\3\0\1\166\2\0\1\166\2\0\16\166\1\204"+
    "\11\166\12\0\1\166\3\0\1\166\2\0\1\166\2\0"+
    "\21\166\1\205\6\166\12\0\1\166\3\0\1\166\2\0"+
    "\1\166\2\0\15\166\1\206\12\166\12\0\1\166\3\0"+
    "\1\166\2\0\1\166\2\0\11\166\1\177\16\166\12\0"+
    "\1\166\3\0\1\166\2\0\1\166\2\0\26\166\1\207"+
    "\1\166\12\0\1\166\3\0\1\166\2\0\1\166\2\0"+
    "\10\166\1\210\4\166\1\211\12\166\12\0\1\164\53\0"+
    "\1\212\3\0\1\212\2\0\1\212\2\0\30\212\12\0"+
    "\1\212\3\0\1\212\2\0\1\212\2\0\5\212\1\213"+
    "\22\212\12\0\1\212\3\0\1\212\2\0\1\212\2\0"+
    "\14\212\1\214\13\212\12\0\1\212\3\0\1\212\2\0"+
    "\1\212\2\0\4\212\1\215\23\212\12\0\1\212\3\0"+
    "\1\212\2\0\1\212\2\0\1\212\1\216\26\212\12\0"+
    "\1\212\3\0\1\212\2\0\1\212\2\0\2\212\1\213"+
    "\25\212\12\0\1\212\3\0\1\212\2\0\1\212\2\0"+
    "\7\212\1\217\20\212\12\0\1\212\3\0\1\212\2\0"+
    "\1\212\2\0\2\212\1\220\25\212\12\0\1\212\3\0"+
    "\1\212\2\0\1\212\2\0\13\212\1\213\14\212\12\0"+
    "\1\212\3\0\1\212\2\0\1\212\2\0\11\212\1\221"+
    "\16\212\12\0\1\212\3\0\1\212\2\0\1\212\2\0"+
    "\14\212\1\213\13\212\12\0\1\212\3\0\1\212\2\0"+
    "\1\212\2\0\2\212\1\222\25\212\12\0\1\212\3\0"+
    "\1\212\2\0\1\212\2\0\14\212\1\223\13\212\12\0"+
    "\1\212\3\0\1\212\2\0\1\212\2\0\7\212\1\213"+
    "\20\212\12\0\1\212\3\0\1\212\2\0\1\212\2\0"+
    "\1\212\1\224\26\212\12\0\1\212\3\0\1\212\2\0"+
    "\1\212\2\0\14\212\1\225\13\212\12\0\1\212\3\0"+
    "\1\212\2\0\1\212\2\0\7\212\1\215\20\212\12\0"+
    "\1\212\3\0\1\212\2\0\1\212\2\0\4\212\1\226"+
    "\23\212\12\0\1\212\3\0\1\212\2\0\1\212\2\0"+
    "\7\212\1\227\20\212\12\0\1\230\3\0\1\230\2\0"+
    "\1\230\2\0\30\230\12\0\1\230\3\0\1\230\2\0"+
    "\1\230\2\0\12\230\1\231\15\230\12\0\1\230\3\0"+
    "\1\230\2\0\1\230\2\0\3\230\1\231\24\230\12\0"+
    "\1\230\3\0\1\230\2\0\1\230\2\0\14\230\1\231"+
    "\13\230\12\0\1\230\3\0\1\230\2\0\1\230\2\0"+
    "\1\230\1\232\26\230\12\0\1\230\3\0\1\230\2\0"+
    "\1\230\2\0\7\230\1\231\20\230\12\0\1\230\3\0"+
    "\1\230\2\0\1\230\2\0\2\230\1\233\25\230\12\0"+
    "\1\230\3\0\1\230\2\0\1\230\2\0\10\230\1\231"+
    "\17\230\12\0\1\230\3\0\1\230\2\0\1\230\2\0"+
    "\11\230\1\234\16\230\12\0\1\230\3\0\1\230\2\0"+
    "\1\230\2\0\4\230\1\235\23\230\12\0\1\230\3\0"+
    "\1\230\2\0\1\230\2\0\11\230\1\236\16\230\12\0"+
    "\1\230\3\0\1\230\2\0\1\230\2\0\1\230\1\237"+
    "\26\230\12\0\1\230\3\0\1\230\2\0\1\230\2\0"+
    "\3\230\1\240\24\230\12\0\1\241\3\0\1\241\2\0"+
    "\1\241\2\0\30\241\12\0\1\241\3\0\1\241\2\0"+
    "\1\241\2\0\2\241\1\242\25\241\12\0\1\241\3\0"+
    "\1\241\2\0\1\241\2\0\14\241\1\242\13\241\12\0"+
    "\1\241\3\0\1\241\2\0\1\241\2\0\2\241\1\243"+
    "\25\241\12\0\1\241\3\0\1\241\2\0\1\241\2\0"+
    "\3\241\1\242\24\241\12\0\1\241\3\0\1\241\2\0"+
    "\1\241\2\0\12\241\1\244\15\241\12\0\1\241\3\0"+
    "\1\241\2\0\1\241\2\0\24\241\1\242\3\241\12\0"+
    "\1\241\3\0\1\241\2\0\1\241\2\0\23\241\1\245"+
    "\4\241\12\0\1\246\3\0\1\246\2\0\1\246\2\0"+
    "\30\246\12\0\1\246\3\0\1\246\2\0\1\246\2\0"+
    "\14\246\1\247\13\246\12\0\1\246\3\0\1\246\2\0"+
    "\1\246\2\0\2\246\1\247\25\246\12\0\1\246\3\0"+
    "\1\246\2\0\1\246\2\0\4\246\1\250\23\246\12\0"+
    "\1\251\3\0\1\251\2\0\1\251\2\0\30\251\12\0"+
    "\1\251\3\0\1\251\2\0\1\251\2\0\7\251\1\252"+
    "\20\251\12\0\1\253\3\0\1\253\2\0\1\253\2\0"+
    "\30\253\12\0\1\254\3\0\1\254\2\0\1\254\2\0"+
    "\30\254\12\0\1\255\3\0\1\255\2\0\1\255\2\0"+
    "\30\255\12\0\1\256\3\0\1\256\2\0\1\256\2\0"+
    "\30\256\12\0\1\257\3\0\1\257\2\0\1\257\2\0"+
    "\30\257\12\0\1\260\3\0\1\260\2\0\1\260\2\0"+
    "\30\260\12\0\1\261\3\0\1\261\2\0\1\261\2\0"+
    "\30\261\12\0\1\262\3\0\1\262\2\0\1\262\2\0"+
    "\30\262\12\0\1\263\3\0\1\263\2\0\1\263\2\0"+
    "\30\263\12\0\1\264\3\0\1\264\2\0\1\264\2\0"+
    "\30\264\12\0\1\265\3\0\1\265\2\0\1\265\2\0"+
    "\30\265\12\0\1\266\3\0\1\266\2\0\1\266\2\0"+
    "\30\266\12\0\1\267\3\0\1\267\2\0\1\267\2\0"+
    "\30\267\12\0\1\270\3\0\1\270\2\0\1\270\2\0"+
    "\30\270\12\0\1\271\3\0\1\271\2\0\1\271\2\0"+
    "\30\271\12\0\1\272\3\0\1\272\2\0\1\272\2\0"+
    "\30\272\12\0\1\273\3\0\1\273\2\0\1\273\2\0"+
    "\30\273\12\0\1\274\3\0\1\274\2\0\1\274\2\0"+
    "\30\274\12\0\1\275\3\0\1\275\2\0\1\275\2\0"+
    "\30\275\12\0\1\276\3\0\1\276\2\0\1\276\2\0"+
    "\30\276\12\0\1\277\3\0\1\277\2\0\1\277\2\0"+
    "\30\277\12\0\1\300\3\0\1\300\2\0\1\300\2\0"+
    "\30\300\12\0\1\301\3\0\1\301\2\0\1\301\2\0"+
    "\30\301\12\0\1\302\3\0\1\302\2\0\1\302\2\0"+
    "\30\302\12\0\1\303\3\0\1\303\2\0\1\303\2\0"+
    "\30\303\12\0\1\304\3\0\1\304\2\0\1\304\2\0"+
    "\30\304\12\0\1\305\3\0\1\305\2\0\1\305\2\0"+
    "\30\305\12\0\1\306\3\0\1\306\2\0\1\306\2\0"+
    "\30\306\12\0\1\307\3\0\1\307\2\0\1\307\2\0"+
    "\30\307\12\0\1\310\3\0\1\310\2\0\1\310\2\0"+
    "\30\310\12\0\1\311\3\0\1\311\2\0\1\311\2\0"+
    "\30\311\12\0\1\312\3\0\1\312\2\0\1\312\2\0"+
    "\30\312\12\0\1\313\3\0\1\313\2\0\1\313\2\0"+
    "\30\313\12\0\1\314\3\0\1\314\2\0\1\314\2\0"+
    "\30\314\12\0\1\315\3\0\1\315\2\0\1\315\2\0"+
    "\30\315\12\0\1\316\3\0\1\316\2\0\1\316\2\0"+
    "\30\316\12\0\1\317\3\0\1\317\2\0\1\317\2\0"+
    "\30\317\12\0\1\320\3\0\1\320\2\0\1\320\2\0"+
    "\30\320\12\0\1\321\3\0\1\321\2\0\1\321\2\0"+
    "\30\321\12\0\1\322\3\0\1\322\2\0\1\322\2\0"+
    "\30\322\12\0\1\323\3\0\1\323\2\0\1\323\2\0"+
    "\30\323\12\0\1\324\3\0\1\324\2\0\1\324\2\0"+
    "\30\324\12\0\1\325\3\0\1\325\2\0\1\325\2\0"+
    "\30\325\12\0\1\326\3\0\1\326\2\0\1\326\2\0"+
    "\30\326\12\0\1\327\3\0\1\327\2\0\1\327\2\0"+
    "\30\327\12\0\1\330\3\0\1\330\2\0\1\330\2\0"+
    "\30\330\12\0\1\331\3\0\1\331\2\0\1\331\2\0"+
    "\30\331\12\0\1\332\3\0\1\332\2\0\1\332\2\0"+
    "\30\332\12\0\1\333\3\0\1\333\2\0\1\333\2\0"+
    "\30\333\12\0\1\334\3\0\1\334\2\0\1\334\2\0"+
    "\30\334\12\0\1\335\3\0\1\335\2\0\1\335\2\0"+
    "\30\335\12\0\1\336\3\0\1\336\2\0\1\336\2\0"+
    "\30\336\12\0\1\337\3\0\1\337\2\0\1\337\2\0"+
    "\30\337\12\0\1\340\3\0\1\340\2\0\1\340\2\0"+
    "\30\340\12\0\1\341\3\0\1\341\2\0\1\341\2\0"+
    "\30\341\12\0\1\342\3\0\1\342\2\0\1\342\2\0"+
    "\30\342\12\0\1\343\3\0\1\343\2\0\1\343\2\0"+
    "\30\343\12\0\1\344\3\0\1\344\2\0\1\344\2\0"+
    "\30\344\12\0\1\345\3\0\1\345\2\0\1\345\2\0"+
    "\30\345\12\0\1\346\3\0\1\346\2\0\1\346\2\0"+
    "\30\346\12\0\1\347\3\0\1\347\2\0\1\347\2\0"+
    "\30\347\12\0\1\350\3\0\1\350\2\0\1\350\2\0"+
    "\30\350\12\0\1\351\3\0\1\351\2\0\1\351\2\0"+
    "\30\351\12\0\1\352\3\0\1\352\2\0\1\352\2\0"+
    "\30\352\12\0\1\353\3\0\1\353\2\0\1\353\2\0"+
    "\30\353\12\0\1\354\3\0\1\354\2\0\1\354\2\0"+
    "\30\354\12\0\1\355\3\0\1\355\2\0\1\355\2\0"+
    "\30\355\12\0\1\356\3\0\1\356\2\0\1\356\2\0"+
    "\30\356\12\0\1\357\3\0\1\357\2\0\1\357\2\0"+
    "\30\357\12\0\1\360\3\0\1\360\2\0\1\360\2\0"+
    "\30\360\12\0\1\361\3\0\1\361\2\0\1\361\2\0"+
    "\30\361\12\0\1\362\3\0\1\362\2\0\1\362\2\0"+
    "\30\362\12\0\1\363\3\0\1\363\2\0\1\363\2\0"+
    "\30\363\12\0\1\364\3\0\1\364\2\0\1\364\2\0"+
    "\30\364\12\0\1\365\3\0\1\365\2\0\1\365\2\0"+
    "\30\365\12\0\1\366\3\0\1\366\2\0\1\366\2\0"+
    "\30\366\12\0\1\367\3\0\1\367\2\0\1\367\2\0"+
    "\30\367\12\0\1\370\3\0\1\370\2\0\1\370\2\0"+
    "\30\370\12\0\1\371\3\0\1\371\2\0\1\371\2\0"+
    "\30\371\12\0\1\372\3\0\1\372\2\0\1\372\2\0"+
    "\30\372\12\0\1\373\3\0\1\373\2\0\1\373\2\0"+
    "\30\373\12\0\1\374\3\0\1\374\2\0\1\374\2\0"+
    "\30\374\12\0\1\375\3\0\1\375\2\0\1\375\2\0"+
    "\30\375\12\0\1\376\3\0\1\376\2\0\1\376\2\0"+
    "\30\376\12\0\1\377\3\0\1\377\2\0\1\377\2\0"+
    "\30\377\12\0\1\u0100\3\0\1\u0100\2\0\1\u0100\2\0"+
    "\30\u0100\12\0\1\u0101\3\0\1\u0101\2\0\1\u0101\2\0"+
    "\30\u0101\12\0\1\u0102\3\0\1\u0102\2\0\1\u0102\2\0"+
    "\30\u0102\12\0\1\u0103\3\0\1\u0103\2\0\1\u0103\2\0"+
    "\30\u0103\12\0\1\u0104\3\0\1\u0104\2\0\1\u0104\2\0"+
    "\30\u0104\12\0\1\u0105\3\0\1\u0105\2\0\1\u0105\2\0"+
    "\30\u0105\12\0\1\u0106\3\0\1\u0106\2\0\1\u0106\2\0"+
    "\30\u0106\12\0\1\u0107\3\0\1\u0107\2\0\1\u0107\2\0"+
    "\30\u0107\12\0\1\u0108\3\0\1\u0108\2\0\1\u0108\2\0"+
    "\30\u0108\12\0\1\u0109\3\0\1\u0109\2\0\1\u0109\2\0"+
    "\30\u0109\12\0\1\u010a\3\0\1\u010a\2\0\1\u010a\2\0"+
    "\30\u010a\12\0\1\u010b\3\0\1\u010b\2\0\1\u010b\2\0"+
    "\30\u010b\12\0\1\u010c\3\0\1\u010c\2\0\1\u010c\2\0"+
    "\30\u010c\12\0\1\u010d\3\0\1\u010d\2\0\1\u010d\2\0"+
    "\30\u010d\12\0\1\u010e\3\0\1\u010e\2\0\1\u010e\2\0"+
    "\30\u010e\12\0\1\u010f\3\0\1\u010f\2\0\1\u010f\2\0"+
    "\30\u010f\12\0\1\u0110\3\0\1\u0110\2\0\1\u0110\2\0"+
    "\30\u0110\12\0\1\u0111\3\0\1\u0111\2\0\1\u0111\2\0"+
    "\30\u0111\12\0\1\u0112\3\0\1\u0112\2\0\1\u0112\2\0"+
    "\30\u0112\12\0\1\u0113\3\0\1\u0113\2\0\1\u0113\2\0"+
    "\30\u0113\12\0\1\u0114\3\0\1\u0114\2\0\1\u0114\2\0"+
    "\30\u0114\12\0\1\u0115\3\0\1\u0115\2\0\1\u0115\2\0"+
    "\30\u0115\12\0\1\u0116\3\0\1\u0116\2\0\1\u0116\2\0"+
    "\30\u0116\12\0\1\u0117\3\0\1\u0117\2\0\1\u0117\2\0"+
    "\30\u0117\12\0\1\u0118\3\0\1\u0118\2\0\1\u0118\2\0"+
    "\30\u0118\12\0\1\u0119\3\0\1\u0119\2\0\1\u0119\2\0"+
    "\30\u0119\12\0\1\u011a\3\0\1\u011a\2\0\1\u011a\2\0"+
    "\30\u011a\12\0\1\u011b\3\0\1\u011b\2\0\1\u011b\2\0"+
    "\30\u011b\12\0\1\u011c\3\0\1\u011c\2\0\1\u011c\2\0"+
    "\30\u011c\12\0\1\u011d\3\0\1\u011d\2\0\1\u011d\2\0"+
    "\30\u011d\12\0\1\u011e\3\0\1\u011e\2\0\1\u011e\2\0"+
    "\30\u011e\12\0\1\u011f\3\0\1\u011f\2\0\1\u011f\2\0"+
    "\30\u011f\12\0\1\u0120\3\0\1\u0120\2\0\1\u0120\2\0"+
    "\30\u0120\12\0\1\u0121\3\0\1\u0121\2\0\1\u0121\2\0"+
    "\30\u0121\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11748];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\1\11\26\1\2\0"+
    "\2\1\3\0\1\1\1\0\1\11\43\1\1\11\1\1"+
    "\2\0\40\1\1\0\253\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private Symbol token(int type, Object value)
{
    return new Symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 352) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter inválido " + yytext());
            }
          case 13: break;
          case 2: 
            { /*Omitir el espacio blanco*/
            }
          case 14: break;
          case 3: 
            { return token(sym.ENTERO, yytext());
            }
          case 15: break;
          case 4: 
            { return token(sym.SUMA, yytext());
            }
          case 16: break;
          case 5: 
            { return token(sym.COMMENT, yytext());
            }
          case 17: break;
          case 6: 
            { return token(sym.ID, yytext());
            }
          case 18: break;
          case 7: 
            { return token(sym.STRING_C, yytext());
            }
          case 19: break;
          case 8: 
            { return token(sym.CHARACTER, yytext());
            }
          case 20: break;
          case 9: 
            { return token(sym.PALABRA_RESERVADA, yytext());
            }
          case 21: break;
          case 10: 
            { return token(sym.FLOTANTE, yytext());
            }
          case 22: break;
          case 11: 
            { return token(sym.PALABRA_RESERVADA,yytext());
            }
          case 23: break;
          case 12: 
            { return token(sym.NOTA_CIENTIFICA, yytext());
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
