/* The following code was generated by JFlex 1.6.1 */

package scanner;

import java_cup.runtime.*;
import symbols.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>G:/git/Compilador-PCL/SCANNER/Scanner_PCL/src/scanner/pcl_rules.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\2\1\53\1\53\1\3\22\0\1\22\1\0\1\16"+
    "\1\17\4\0\1\4\1\6\1\5\1\21\1\0\1\12\1\14\1\1"+
    "\12\11\7\0\4\20\1\15\25\20\4\0\1\20\1\0\1\24\1\31"+
    "\1\40\1\26\1\32\1\45\1\33\1\42\1\34\1\20\1\51\1\36"+
    "\1\47\1\25\1\35\1\50\1\20\1\27\1\41\1\37\1\46\1\43"+
    "\1\44\1\52\1\30\1\20\1\7\1\23\1\10\7\0\1\53\u05da\0"+
    "\12\13\206\0\12\13\306\0\12\13\u019c\0\12\13\166\0\12\13\166\0"+
    "\12\13\166\0\12\13\166\0\12\13\166\0\12\13\166\0\12\13\166\0"+
    "\12\13\166\0\12\13\166\0\12\13\140\0\12\13\166\0\12\13\106\0"+
    "\12\13\u0116\0\12\13\106\0\12\13\u0746\0\12\13\46\0\12\13\u012c\0"+
    "\12\13\200\0\12\13\246\0\12\13\6\0\12\13\266\0\12\13\126\0"+
    "\12\13\206\0\12\13\6\0\12\13\u03ce\0\1\53\1\53\u85f6\0\12\13"+
    "\u02a6\0\12\13\46\0\12\13\306\0\12\13\26\0\12\13\126\0\12\13"+
    "\u0196\0\12\13\u5316\0\12\13\u0586\0\12\13\u0bbc\0\12\13\200\0\12\13"+
    "\74\0\12\13\220\0\12\13\u0116\0\12\13\u01d6\0\12\13\u0176\0\12\13"+
    "\146\0\12\13\u0216\0\12\13\u5176\0\12\13\346\0\12\13\u6c74\0\62\13"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\2\1\1\3\4\1\1\4\24\1"+
    "\2\0\1\5\2\0\1\5\1\0\1\3\4\0\1\6"+
    "\1\7\5\0\1\10\7\0\1\11\1\12\1\13\1\14"+
    "\4\0\1\15\24\0\2\5\3\0\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\7\0\1\23\3\0\1\24\10\0"+
    "\1\25\2\0\1\26\4\0\1\27\2\0\1\30\2\0"+
    "\1\31\2\32\1\5\2\32\1\33\1\0\2\32\1\34"+
    "\1\35\2\32\1\36\2\32\1\37\1\40\3\32\1\41"+
    "\1\42\1\43\1\44\1\32\1\45\3\32\1\46\12\32"+
    "\1\47\3\32\1\50\2\32\1\51\1\32\1\52\2\32"+
    "\1\53\1\54\1\55\2\32\1\56\5\32\1\57\1\60"+
    "\1\61\1\32\1\62\1\32\1\63\3\32\1\64\4\32"+
    "\1\65\1\66\1\32\1\67\1\32\1\70\3\32\1\71"+
    "\1\72\3\32\1\73\360\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[468];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\54\0\204\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\54\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc"+
    "\0\54\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u0160\0\u06b4\0\u06e0\0\u070c\0\u0738"+
    "\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0528\0\u0528\0\u0528\0\u0974"+
    "\0\u09a0\0\u09cc\0\u09f8\0\u0528\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8"+
    "\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08"+
    "\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68"+
    "\0\u06b4\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0d68\0\u0e70"+
    "\0\u0d68\0\u0d68\0\u0d68\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c"+
    "\0\u0f78\0\u0fa4\0\u0d68\0\u0fd0\0\u0ffc\0\u1028\0\u0d68\0\u1054"+
    "\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u0d68"+
    "\0\u11b4\0\u11e0\0\u0d68\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc"+
    "\0\u12e8\0\u1314\0\u0d68\0\u1340\0\u136c\0\u0d68\0\u06b4\0\u1398"+
    "\0\u0580\0\u05ac\0\u13c4\0\u13f0\0\u13f0\0\u141c\0\u1448\0\u1398"+
    "\0\u1398\0\u1474\0\u14a0\0\u1398\0\u14cc\0\u14f8\0\u1398\0\u1398"+
    "\0\u1524\0\u1550\0\u157c\0\u1398\0\u1398\0\u1398\0\u1398\0\u15a8"+
    "\0\u1398\0\u15d4\0\u1600\0\u162c\0\u1398\0\u1658\0\u1684\0\u16b0"+
    "\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u17b8"+
    "\0\u1810\0\u183c\0\u1868\0\u17b8\0\u1894\0\u18c0\0\u17b8\0\u18ec"+
    "\0\u17b8\0\u1918\0\u1944\0\u17b8\0\u17b8\0\u17b8\0\u1970\0\u199c"+
    "\0\u17b8\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1a4c\0\u1a4c"+
    "\0\u1a4c\0\u1aa4\0\u1a4c\0\u1ad0\0\u1a4c\0\u1afc\0\u1b28\0\u1b54"+
    "\0\u1a4c\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1bd8\0\u1bd8\0\u1c30"+
    "\0\u1bd8\0\u1c5c\0\u1bd8\0\u1c88\0\u1cb4\0\u1ce0\0\u1cb4\0\u1cb4"+
    "\0\u1d0c\0\u1d38\0\u1d64\0\u1d38\0\u1d90\0\u1dbc\0\u1de8\0\u1e14"+
    "\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74"+
    "\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4"+
    "\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234"+
    "\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u2368\0\u2394"+
    "\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4"+
    "\0\u2520\0\u254c\0\u2578\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654"+
    "\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4"+
    "\0\u27e0\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914"+
    "\0\u2940\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48\0\u2a74"+
    "\0\u2aa0\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4"+
    "\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08\0\u2d34"+
    "\0\u2d60\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\u2e68\0\u2e94"+
    "\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4"+
    "\0\u3020\0\u304c\0\u3078\0\u30a4\0\u30d0\0\u30fc\0\u3128\0\u3154"+
    "\0\u3180\0\u31ac\0\u31d8\0\u3204\0\u3230\0\u325c\0\u3288\0\u32b4"+
    "\0\u32e0\0\u330c\0\u3338\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414"+
    "\0\u3440\0\u346c\0\u3498\0\u34c4\0\u34f0\0\u351c\0\u3548\0\u3574"+
    "\0\u35a0\0\u35cc\0\u35f8\0\u3624\0\u3650\0\u367c\0\u36a8\0\u36d4"+
    "\0\u3700\0\u372c\0\u3758\0\u3784\0\u37b0\0\u37dc\0\u3808\0\u3834"+
    "\0\u3860\0\u388c\0\u38b8\0\u38e4\0\u3910\0\u393c\0\u3968\0\u3994"+
    "\0\u39c0\0\u39ec\0\u3a18\0\u3a44\0\u3a70\0\u3a9c\0\u3ac8\0\u3af4"+
    "\0\u3b20\0\u3b4c\0\u3b78\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54"+
    "\0\u3c80\0\u3cac\0\u3cd8\0\u3d04\0\u3d30\0\u3d5c\0\u3d88\0\u3db4"+
    "\0\u3de0\0\u3e0c\0\u3e38\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14"+
    "\0\u3f40\0\u3f6c\0\u3f98\0\u3fc4\0\u3ff0\0\u401c\0\u4048\0\u4074"+
    "\0\u40a0\0\u40cc\0\u40f8\0\u4124\0\u4150\0\u417c\0\u41a8\0\u41d4"+
    "\0\u4200\0\u422c\0\u4258\0\u4284\0\u42b0\0\u42dc\0\u4308\0\u4334"+
    "\0\u4360\0\u438c\0\u43b8\0\u43e4\0\u4410\0\u443c\0\u4468\0\u4494"+
    "\0\u44c0\0\u44ec\0\u4518\0\u4544\0\u4570\0\u459c\0\u45c8\0\u45f4"+
    "\0\u4620\0\u464c\0\u4678\0\u46a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[468];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\2\2\1\6\1\2\1\7"+
    "\1\10\1\11\2\2\1\12\1\13\1\2\1\14\2\4"+
    "\1\15\1\16\1\17\1\20\1\2\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\2\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\2\1\40\1\41"+
    "\15\0\1\42\2\0\1\42\2\0\30\42\2\0\1\43"+
    "\13\0\1\42\2\0\1\42\2\0\30\42\6\0\1\44"+
    "\7\0\1\42\2\0\1\42\2\0\30\42\1\0\10\45"+
    "\1\46\4\45\1\47\2\45\1\47\2\45\30\47\1\45"+
    "\11\0\1\50\1\0\1\51\1\52\1\42\2\0\1\42"+
    "\2\0\30\42\12\0\1\53\1\0\1\53\1\0\1\42"+
    "\2\0\1\42\2\0\30\42\12\0\1\51\1\0\1\51"+
    "\1\52\1\42\2\0\1\42\2\0\30\42\1\0\16\54"+
    "\1\55\35\54\11\0\1\56\1\0\1\56\1\0\1\42"+
    "\2\0\1\42\2\0\30\42\16\0\1\42\2\0\1\42"+
    "\2\0\2\42\1\57\1\42\1\60\23\42\16\0\1\42"+
    "\2\0\1\42\2\0\11\42\1\61\1\62\15\42\16\0"+
    "\1\42\2\0\1\42\2\0\11\42\1\63\1\64\15\42"+
    "\16\0\1\42\2\0\1\42\2\0\7\42\1\65\20\42"+
    "\16\0\1\42\2\0\1\42\2\0\5\42\1\66\1\42"+
    "\1\67\2\42\1\70\15\42\16\0\1\42\2\0\1\42"+
    "\2\0\2\42\1\71\10\42\1\72\14\42\16\0\1\42"+
    "\2\0\1\42\2\0\12\42\1\73\15\42\16\0\1\42"+
    "\2\0\1\42\2\0\2\42\1\74\17\42\1\75\5\42"+
    "\16\0\1\42\2\0\1\42\2\0\4\42\1\76\15\42"+
    "\1\77\5\42\16\0\1\42\2\0\1\42\2\0\1\42"+
    "\1\100\10\42\1\101\15\42\16\0\1\42\2\0\1\42"+
    "\2\0\4\42\1\102\1\103\4\42\1\104\4\42\1\105"+
    "\10\42\16\0\1\42\2\0\1\42\2\0\1\42\1\106"+
    "\10\42\1\107\4\42\1\110\10\42\16\0\1\42\2\0"+
    "\1\42\2\0\7\42\1\111\4\42\1\112\2\42\1\113"+
    "\10\42\16\0\1\42\2\0\1\42\2\0\1\42\1\114"+
    "\26\42\16\0\1\42\2\0\1\42\2\0\4\42\1\115"+
    "\4\42\1\116\5\42\1\117\10\42\16\0\1\42\2\0"+
    "\1\42\2\0\1\42\1\120\10\42\1\121\10\42\1\122"+
    "\4\42\16\0\1\42\2\0\1\42\2\0\2\42\1\123"+
    "\25\42\16\0\1\42\2\0\1\42\2\0\12\42\1\124"+
    "\15\42\16\0\1\42\2\0\1\42\2\0\1\42\1\125"+
    "\2\42\1\126\23\42\16\0\1\42\2\0\1\42\2\0"+
    "\12\42\1\127\15\42\12\0\1\130\3\0\1\130\2\0"+
    "\1\130\2\0\30\130\1\0\2\43\1\131\1\132\50\43"+
    "\5\44\1\133\46\44\10\45\1\46\53\45\1\46\1\134"+
    "\3\45\1\134\2\45\1\134\2\45\30\134\1\45\11\0"+
    "\1\50\1\0\1\51\1\52\1\135\47\0\1\51\1\0"+
    "\1\51\1\52\1\135\47\0\1\136\1\0\1\136\51\0"+
    "\1\51\1\0\1\51\1\52\124\0\1\56\1\0\1\56"+
    "\51\0\1\130\3\0\1\130\2\0\1\130\2\0\3\130"+
    "\1\137\24\130\12\0\1\130\3\0\1\130\2\0\1\130"+
    "\2\0\4\130\1\140\23\130\12\0\1\130\3\0\1\130"+
    "\2\0\1\130\2\0\13\130\1\141\14\130\12\0\1\130"+
    "\3\0\1\130\2\0\1\130\2\0\14\130\1\142\13\130"+
    "\12\0\1\130\3\0\1\130\2\0\1\130\2\0\20\130"+
    "\1\143\7\130\12\0\1\130\3\0\1\130\2\0\1\130"+
    "\2\0\21\130\1\144\6\130\12\0\1\130\3\0\1\130"+
    "\2\0\1\130\2\0\1\130\1\145\13\130\1\146\7\130"+
    "\1\147\2\130\12\0\1\130\3\0\1\130\2\0\1\130"+
    "\2\0\14\130\1\150\13\130\12\0\1\130\3\0\1\130"+
    "\2\0\1\130\2\0\10\130\1\151\17\130\12\0\1\130"+
    "\3\0\1\130\2\0\1\130\2\0\12\130\1\152\15\130"+
    "\12\0\1\130\3\0\1\130\2\0\1\130\2\0\3\130"+
    "\1\153\24\130\12\0\1\130\3\0\1\130\2\0\1\130"+
    "\2\0\16\130\1\154\11\130\12\0\1\130\3\0\1\130"+
    "\2\0\1\130\2\0\14\130\1\155\13\130\12\0\1\130"+
    "\3\0\1\130\2\0\1\130\2\0\13\130\1\156\1\157"+
    "\13\130\12\0\1\130\3\0\1\130\2\0\1\130\2\0"+
    "\6\130\1\160\21\130\12\0\1\130\3\0\1\130\2\0"+
    "\1\130\2\0\2\130\1\161\25\130\12\0\1\130\3\0"+
    "\1\130\2\0\1\130\2\0\23\130\1\162\4\130\12\0"+
    "\1\130\3\0\1\130\2\0\1\130\2\0\25\130\1\163"+
    "\2\130\12\0\1\130\3\0\1\130\2\0\1\130\2\0"+
    "\7\130\1\164\20\130\12\0\1\130\3\0\1\130\2\0"+
    "\1\130\2\0\16\130\1\165\11\130\12\0\1\130\3\0"+
    "\1\130\2\0\1\130\2\0\2\130\1\166\25\130\12\0"+
    "\1\130\3\0\1\130\2\0\1\130\2\0\1\130\1\167"+
    "\26\130\12\0\1\130\3\0\1\130\2\0\1\130\2\0"+
    "\14\130\1\170\13\130\12\0\1\130\3\0\1\130\2\0"+
    "\1\130\2\0\4\130\1\171\23\130\12\0\1\130\3\0"+
    "\1\130\2\0\1\130\2\0\12\130\1\172\15\130\12\0"+
    "\1\130\3\0\1\130\2\0\1\130\2\0\4\130\1\173"+
    "\23\130\12\0\1\130\3\0\1\130\2\0\1\130\2\0"+
    "\11\130\1\174\16\130\12\0\1\130\3\0\1\130\2\0"+
    "\1\130\2\0\14\130\1\175\13\130\12\0\1\130\3\0"+
    "\1\130\2\0\1\130\2\0\11\130\1\176\16\130\12\0"+
    "\1\130\3\0\1\130\2\0\1\130\2\0\13\130\1\177"+
    "\14\130\12\0\1\130\3\0\1\130\2\0\1\130\2\0"+
    "\4\130\1\200\23\130\12\0\1\130\3\0\1\130\2\0"+
    "\1\130\2\0\2\130\1\201\25\130\12\0\1\130\3\0"+
    "\1\130\2\0\1\130\2\0\14\130\1\202\13\130\12\0"+
    "\1\130\3\0\1\130\2\0\1\130\2\0\3\130\1\203"+
    "\24\130\12\0\1\130\3\0\1\130\2\0\1\130\2\0"+
    "\15\130\1\204\12\130\12\0\1\130\3\0\1\130\2\0"+
    "\1\130\2\0\12\130\1\205\15\130\12\0\1\130\3\0"+
    "\1\130\2\0\1\130\2\0\4\130\1\206\23\130\1\0"+
    "\11\207\1\210\3\207\1\210\1\0\1\207\1\210\2\207"+
    "\30\210\1\207\2\0\1\131\51\0\5\44\1\133\1\211"+
    "\45\44\11\212\1\213\3\212\1\213\1\45\1\212\1\213"+
    "\2\212\30\213\1\212\11\0\1\214\1\215\52\0\1\136"+
    "\1\0\1\136\1\0\1\135\36\0\11\207\1\210\3\207"+
    "\1\210\1\0\1\207\1\210\2\207\1\210\1\216\26\210"+
    "\12\207\1\210\3\207\1\210\1\0\1\207\1\210\2\207"+
    "\2\210\1\217\25\210\12\207\1\210\3\207\1\210\1\0"+
    "\1\207\1\210\2\207\3\210\1\220\7\210\1\221\14\210"+
    "\12\207\1\210\3\207\1\210\1\0\1\207\1\210\2\207"+
    "\12\210\1\222\15\210\12\207\1\210\3\207\1\210\1\0"+
    "\1\207\1\210\2\207\7\210\1\223\20\210\12\207\1\210"+
    "\3\207\1\210\1\0\1\207\1\210\2\207\7\210\1\224"+
    "\20\210\12\207\1\210\3\207\1\210\1\0\1\207\1\210"+
    "\2\207\11\210\1\225\16\210\12\207\1\210\3\207\1\210"+
    "\1\0\1\207\1\210\2\207\13\210\1\226\14\210\12\207"+
    "\1\210\3\207\1\210\1\0\1\207\1\210\2\207\7\210"+
    "\1\227\20\210\12\207\1\210\3\207\1\210\1\0\1\207"+
    "\1\210\2\207\12\210\1\230\15\210\12\207\1\210\3\207"+
    "\1\210\1\0\1\207\1\210\2\207\11\210\1\231\16\210"+
    "\12\207\1\210\3\207\1\210\1\0\1\207\1\210\2\207"+
    "\7\210\1\232\20\210\12\207\1\210\3\207\1\210\1\0"+
    "\1\207\1\210\2\207\10\210\1\233\17\210\12\207\1\210"+
    "\3\207\1\210\1\0\1\207\1\210\2\207\7\210\1\234"+
    "\20\210\12\207\1\210\3\207\1\210\1\0\1\207\1\210"+
    "\2\207\7\210\1\235\20\210\12\207\1\210\3\207\1\210"+
    "\1\0\1\207\1\210\2\207\2\210\1\236\25\210\12\207"+
    "\1\210\3\207\1\210\1\0\1\207\1\210\2\207\7\210"+
    "\1\237\20\210\12\207\1\210\3\207\1\210\1\0\1\207"+
    "\1\210\2\207\16\210\1\240\11\210\12\207\1\210\3\207"+
    "\1\210\1\0\1\207\1\210\2\207\4\210\1\241\23\210"+
    "\12\207\1\210\3\207\1\210\1\0\1\207\1\210\2\207"+
    "\11\210\1\242\16\210\12\207\1\210\3\207\1\210\1\0"+
    "\1\207\1\210\2\207\4\210\1\243\23\210\12\207\1\210"+
    "\3\207\1\210\1\0\1\207\1\210\2\207\14\210\1\244"+
    "\13\210\12\207\1\210\3\207\1\210\1\0\1\207\1\210"+
    "\2\207\17\210\1\245\10\210\12\207\1\210\3\207\1\210"+
    "\1\0\1\207\1\210\2\207\13\210\1\246\14\210\12\207"+
    "\1\210\3\207\1\210\1\0\1\207\1\210\2\207\16\210"+
    "\1\247\11\210\12\207\1\210\3\207\1\210\1\0\1\207"+
    "\1\210\2\207\21\210\1\250\6\210\12\207\1\210\3\207"+
    "\1\210\1\0\1\207\1\210\2\207\15\210\1\251\12\210"+
    "\12\207\1\210\3\207\1\210\1\0\1\207\1\210\2\207"+
    "\11\210\1\252\16\210\12\207\1\210\3\207\1\210\1\0"+
    "\1\207\1\210\2\207\26\210\1\253\1\210\12\207\1\210"+
    "\3\207\1\210\1\0\1\207\1\210\2\207\10\210\1\254"+
    "\4\210\1\255\12\210\12\207\1\256\3\207\1\256\1\0"+
    "\1\207\1\256\2\207\30\256\1\207\11\212\1\257\3\212"+
    "\1\257\1\45\1\212\1\257\2\212\30\257\1\212\11\0"+
    "\1\214\42\0\11\207\1\256\3\207\1\256\1\0\1\207"+
    "\1\256\2\207\5\256\1\260\22\256\12\207\1\256\3\207"+
    "\1\256\1\0\1\207\1\256\2\207\14\256\1\261\13\256"+
    "\12\207\1\256\3\207\1\256\1\0\1\207\1\256\2\207"+
    "\4\256\1\262\23\256\12\207\1\256\3\207\1\256\1\0"+
    "\1\207\1\256\2\207\1\256\1\263\26\256\12\207\1\256"+
    "\3\207\1\256\1\0\1\207\1\256\2\207\2\256\1\264"+
    "\25\256\12\207\1\256\3\207\1\256\1\0\1\207\1\256"+
    "\2\207\7\256\1\265\20\256\12\207\1\256\3\207\1\256"+
    "\1\0\1\207\1\256\2\207\2\256\1\266\25\256\12\207"+
    "\1\256\3\207\1\256\1\0\1\207\1\256\2\207\13\256"+
    "\1\267\14\256\12\207\1\256\3\207\1\256\1\0\1\207"+
    "\1\256\2\207\11\256\1\270\16\256\12\207\1\256\3\207"+
    "\1\256\1\0\1\207\1\256\2\207\14\256\1\271\13\256"+
    "\12\207\1\256\3\207\1\256\1\0\1\207\1\256\2\207"+
    "\2\256\1\272\25\256\12\207\1\256\3\207\1\256\1\0"+
    "\1\207\1\256\2\207\14\256\1\273\13\256\12\207\1\256"+
    "\3\207\1\256\1\0\1\207\1\256\2\207\7\256\1\274"+
    "\20\256\12\207\1\256\3\207\1\256\1\0\1\207\1\256"+
    "\2\207\7\256\1\275\20\256\12\207\1\256\3\207\1\256"+
    "\1\0\1\207\1\256\2\207\7\256\1\276\20\256\12\207"+
    "\1\256\3\207\1\256\1\0\1\207\1\256\2\207\1\256"+
    "\1\277\26\256\12\207\1\256\3\207\1\256\1\0\1\207"+
    "\1\256\2\207\14\256\1\300\13\256\12\207\1\256\3\207"+
    "\1\256\1\0\1\207\1\256\2\207\13\256\1\301\14\256"+
    "\12\207\1\256\3\207\1\256\1\0\1\207\1\256\2\207"+
    "\7\256\1\302\20\256\12\207\1\256\3\207\1\256\1\0"+
    "\1\207\1\256\2\207\4\256\1\303\23\256\12\207\1\256"+
    "\3\207\1\256\1\0\1\207\1\256\2\207\7\256\1\304"+
    "\20\256\12\207\1\305\3\207\1\305\1\0\1\207\1\305"+
    "\2\207\30\305\1\207\11\212\1\306\3\212\1\306\1\45"+
    "\1\212\1\306\2\212\30\306\1\212\11\207\1\305\3\207"+
    "\1\305\1\0\1\207\1\305\2\207\12\305\1\307\15\305"+
    "\12\207\1\305\3\207\1\305\1\0\1\207\1\305\2\207"+
    "\3\305\1\310\24\305\12\207\1\305\3\207\1\305\1\0"+
    "\1\207\1\305\2\207\14\305\1\311\13\305\12\207\1\305"+
    "\3\207\1\305\1\0\1\207\1\305\2\207\1\305\1\312"+
    "\26\305\12\207\1\305\3\207\1\305\1\0\1\207\1\305"+
    "\2\207\7\305\1\313\20\305\12\207\1\305\3\207\1\305"+
    "\1\0\1\207\1\305\2\207\2\305\1\314\25\305\12\207"+
    "\1\305\3\207\1\305\1\0\1\207\1\305\2\207\10\305"+
    "\1\315\17\305\12\207\1\305\3\207\1\305\1\0\1\207"+
    "\1\305\2\207\11\305\1\316\16\305\12\207\1\305\3\207"+
    "\1\305\1\0\1\207\1\305\2\207\4\305\1\317\23\305"+
    "\12\207\1\305\3\207\1\305\1\0\1\207\1\305\2\207"+
    "\11\305\1\320\16\305\12\207\1\305\3\207\1\305\1\0"+
    "\1\207\1\305\2\207\3\305\1\321\24\305\12\207\1\305"+
    "\3\207\1\305\1\0\1\207\1\305\2\207\1\305\1\322"+
    "\26\305\12\207\1\305\3\207\1\305\1\0\1\207\1\305"+
    "\2\207\3\305\1\323\24\305\12\207\1\324\3\207\1\324"+
    "\1\0\1\207\1\324\2\207\30\324\1\207\11\212\1\325"+
    "\3\212\1\325\1\45\1\212\1\325\2\212\30\325\1\212"+
    "\11\207\1\324\3\207\1\324\1\0\1\207\1\324\2\207"+
    "\2\324\1\326\25\324\12\207\1\324\3\207\1\324\1\0"+
    "\1\207\1\324\2\207\14\324\1\327\13\324\12\207\1\324"+
    "\3\207\1\324\1\0\1\207\1\324\2\207\2\324\1\330"+
    "\25\324\12\207\1\324\3\207\1\324\1\0\1\207\1\324"+
    "\2\207\3\324\1\331\24\324\12\207\1\324\3\207\1\324"+
    "\1\0\1\207\1\324\2\207\12\324\1\332\15\324\12\207"+
    "\1\324\3\207\1\324\1\0\1\207\1\324\2\207\24\324"+
    "\1\333\3\324\12\207\1\324\3\207\1\324\1\0\1\207"+
    "\1\324\2\207\23\324\1\334\4\324\12\207\1\335\3\207"+
    "\1\335\1\0\1\207\1\335\2\207\30\335\1\207\11\212"+
    "\1\336\3\212\1\336\1\45\1\212\1\336\2\212\30\336"+
    "\1\212\11\207\1\335\3\207\1\335\1\0\1\207\1\335"+
    "\2\207\14\335\1\337\13\335\12\207\1\335\3\207\1\335"+
    "\1\0\1\207\1\335\2\207\2\335\1\340\25\335\12\207"+
    "\1\335\3\207\1\335\1\0\1\207\1\335\2\207\4\335"+
    "\1\341\23\335\12\207\1\342\3\207\1\342\1\0\1\207"+
    "\1\342\2\207\30\342\1\207\11\212\1\343\3\212\1\343"+
    "\1\45\1\212\1\343\2\212\30\343\1\212\11\207\1\342"+
    "\3\207\1\342\1\0\1\207\1\342\2\207\7\342\1\344"+
    "\20\342\12\207\1\345\3\207\1\345\1\0\1\207\1\345"+
    "\2\207\30\345\1\207\11\212\1\346\3\212\1\346\1\45"+
    "\1\212\1\346\2\212\30\346\1\212\11\207\1\347\3\207"+
    "\1\347\1\0\1\207\1\347\2\207\30\347\1\207\11\212"+
    "\1\350\3\212\1\350\1\45\1\212\1\350\2\212\30\350"+
    "\1\212\11\207\1\351\3\207\1\351\1\0\1\207\1\351"+
    "\2\207\30\351\1\207\11\212\1\352\3\212\1\352\1\45"+
    "\1\212\1\352\2\212\30\352\1\212\11\207\1\353\3\207"+
    "\1\353\1\0\1\207\1\353\2\207\30\353\1\207\11\212"+
    "\1\354\3\212\1\354\1\45\1\212\1\354\2\212\30\354"+
    "\1\212\11\207\1\355\3\207\1\355\1\0\1\207\1\355"+
    "\2\207\30\355\1\207\11\212\1\356\3\212\1\356\1\45"+
    "\1\212\1\356\2\212\30\356\1\212\11\207\1\357\3\207"+
    "\1\357\1\0\1\207\1\357\2\207\30\357\1\207\11\212"+
    "\1\360\3\212\1\360\1\45\1\212\1\360\2\212\30\360"+
    "\1\212\11\207\1\361\3\207\1\361\1\0\1\207\1\361"+
    "\2\207\30\361\1\207\11\212\1\362\3\212\1\362\1\45"+
    "\1\212\1\362\2\212\30\362\1\212\11\207\1\363\3\207"+
    "\1\363\1\0\1\207\1\363\2\207\30\363\1\207\11\212"+
    "\1\364\3\212\1\364\1\45\1\212\1\364\2\212\30\364"+
    "\1\212\11\207\1\365\3\207\1\365\1\0\1\207\1\365"+
    "\2\207\30\365\1\207\11\212\1\366\3\212\1\366\1\45"+
    "\1\212\1\366\2\212\30\366\1\212\11\207\1\367\3\207"+
    "\1\367\1\0\1\207\1\367\2\207\30\367\1\207\11\212"+
    "\1\370\3\212\1\370\1\45\1\212\1\370\2\212\30\370"+
    "\1\212\11\207\1\371\3\207\1\371\1\0\1\207\1\371"+
    "\2\207\30\371\1\207\11\212\1\372\3\212\1\372\1\45"+
    "\1\212\1\372\2\212\30\372\1\212\11\207\1\373\3\207"+
    "\1\373\1\0\1\207\1\373\2\207\30\373\1\207\11\212"+
    "\1\374\3\212\1\374\1\45\1\212\1\374\2\212\30\374"+
    "\1\212\11\207\1\375\3\207\1\375\1\0\1\207\1\375"+
    "\2\207\30\375\1\207\11\212\1\376\3\212\1\376\1\45"+
    "\1\212\1\376\2\212\30\376\1\212\11\207\1\377\3\207"+
    "\1\377\1\0\1\207\1\377\2\207\30\377\1\207\11\212"+
    "\1\u0100\3\212\1\u0100\1\45\1\212\1\u0100\2\212\30\u0100"+
    "\1\212\11\207\1\u0101\3\207\1\u0101\1\0\1\207\1\u0101"+
    "\2\207\30\u0101\1\207\11\212\1\u0102\3\212\1\u0102\1\45"+
    "\1\212\1\u0102\2\212\30\u0102\1\212\11\207\1\u0103\3\207"+
    "\1\u0103\1\0\1\207\1\u0103\2\207\30\u0103\1\207\11\212"+
    "\1\u0104\3\212\1\u0104\1\45\1\212\1\u0104\2\212\30\u0104"+
    "\1\212\11\207\1\u0105\3\207\1\u0105\1\0\1\207\1\u0105"+
    "\2\207\30\u0105\1\207\11\212\1\u0106\3\212\1\u0106\1\45"+
    "\1\212\1\u0106\2\212\30\u0106\1\212\11\207\1\u0107\3\207"+
    "\1\u0107\1\0\1\207\1\u0107\2\207\30\u0107\1\207\11\212"+
    "\1\u0108\3\212\1\u0108\1\45\1\212\1\u0108\2\212\30\u0108"+
    "\1\212\11\207\1\u0109\3\207\1\u0109\1\0\1\207\1\u0109"+
    "\2\207\30\u0109\1\207\11\212\1\u010a\3\212\1\u010a\1\45"+
    "\1\212\1\u010a\2\212\30\u010a\1\212\11\207\1\u010b\3\207"+
    "\1\u010b\1\0\1\207\1\u010b\2\207\30\u010b\1\207\11\212"+
    "\1\u010c\3\212\1\u010c\1\45\1\212\1\u010c\2\212\30\u010c"+
    "\1\212\11\207\1\u010d\3\207\1\u010d\1\0\1\207\1\u010d"+
    "\2\207\30\u010d\1\207\11\212\1\u010e\3\212\1\u010e\1\45"+
    "\1\212\1\u010e\2\212\30\u010e\1\212\11\207\1\u010f\3\207"+
    "\1\u010f\1\0\1\207\1\u010f\2\207\30\u010f\1\207\11\212"+
    "\1\u0110\3\212\1\u0110\1\45\1\212\1\u0110\2\212\30\u0110"+
    "\1\212\11\207\1\u0111\3\207\1\u0111\1\0\1\207\1\u0111"+
    "\2\207\30\u0111\1\207\11\212\1\u0112\3\212\1\u0112\1\45"+
    "\1\212\1\u0112\2\212\30\u0112\1\212\11\207\1\u0113\3\207"+
    "\1\u0113\1\0\1\207\1\u0113\2\207\30\u0113\1\207\11\212"+
    "\1\u0114\3\212\1\u0114\1\45\1\212\1\u0114\2\212\30\u0114"+
    "\1\212\11\207\1\u0115\3\207\1\u0115\1\0\1\207\1\u0115"+
    "\2\207\30\u0115\1\207\11\212\1\u0116\3\212\1\u0116\1\45"+
    "\1\212\1\u0116\2\212\30\u0116\1\212\11\207\1\u0117\3\207"+
    "\1\u0117\1\0\1\207\1\u0117\2\207\30\u0117\1\207\11\212"+
    "\1\u0118\3\212\1\u0118\1\45\1\212\1\u0118\2\212\30\u0118"+
    "\1\212\11\207\1\u0119\3\207\1\u0119\1\0\1\207\1\u0119"+
    "\2\207\30\u0119\1\207\11\212\1\u011a\3\212\1\u011a\1\45"+
    "\1\212\1\u011a\2\212\30\u011a\1\212\11\207\1\u011b\3\207"+
    "\1\u011b\1\0\1\207\1\u011b\2\207\30\u011b\1\207\11\212"+
    "\1\u011c\3\212\1\u011c\1\45\1\212\1\u011c\2\212\30\u011c"+
    "\1\212\11\207\1\u011d\3\207\1\u011d\1\0\1\207\1\u011d"+
    "\2\207\30\u011d\1\207\11\212\1\u011e\3\212\1\u011e\1\45"+
    "\1\212\1\u011e\2\212\30\u011e\1\212\11\207\1\u011f\3\207"+
    "\1\u011f\1\0\1\207\1\u011f\2\207\30\u011f\1\207\11\212"+
    "\1\u0120\3\212\1\u0120\1\45\1\212\1\u0120\2\212\30\u0120"+
    "\1\212\11\207\1\u0121\3\207\1\u0121\1\0\1\207\1\u0121"+
    "\2\207\30\u0121\1\207\11\212\1\u0122\3\212\1\u0122\1\45"+
    "\1\212\1\u0122\2\212\30\u0122\1\212\11\207\1\u0123\3\207"+
    "\1\u0123\1\0\1\207\1\u0123\2\207\30\u0123\1\207\11\212"+
    "\1\u0124\3\212\1\u0124\1\45\1\212\1\u0124\2\212\30\u0124"+
    "\1\212\11\207\1\u0125\3\207\1\u0125\1\0\1\207\1\u0125"+
    "\2\207\30\u0125\1\207\11\212\1\u0126\3\212\1\u0126\1\45"+
    "\1\212\1\u0126\2\212\30\u0126\1\212\11\207\1\u0127\3\207"+
    "\1\u0127\1\0\1\207\1\u0127\2\207\30\u0127\1\207\11\212"+
    "\1\u0128\3\212\1\u0128\1\45\1\212\1\u0128\2\212\30\u0128"+
    "\1\212\11\207\1\u0129\3\207\1\u0129\1\0\1\207\1\u0129"+
    "\2\207\30\u0129\1\207\11\212\1\u012a\3\212\1\u012a\1\45"+
    "\1\212\1\u012a\2\212\30\u012a\1\212\11\207\1\u012b\3\207"+
    "\1\u012b\1\0\1\207\1\u012b\2\207\30\u012b\1\207\11\212"+
    "\1\u012c\3\212\1\u012c\1\45\1\212\1\u012c\2\212\30\u012c"+
    "\1\212\11\207\1\u012d\3\207\1\u012d\1\0\1\207\1\u012d"+
    "\2\207\30\u012d\1\207\11\212\1\u012e\3\212\1\u012e\1\45"+
    "\1\212\1\u012e\2\212\30\u012e\1\212\11\207\1\u012f\3\207"+
    "\1\u012f\1\0\1\207\1\u012f\2\207\30\u012f\1\207\11\212"+
    "\1\u0130\3\212\1\u0130\1\45\1\212\1\u0130\2\212\30\u0130"+
    "\1\212\11\207\1\u0131\3\207\1\u0131\1\0\1\207\1\u0131"+
    "\2\207\30\u0131\1\207\11\212\1\u0132\3\212\1\u0132\1\45"+
    "\1\212\1\u0132\2\212\30\u0132\1\212\11\207\1\u0133\3\207"+
    "\1\u0133\1\0\1\207\1\u0133\2\207\30\u0133\1\207\11\212"+
    "\1\u0134\3\212\1\u0134\1\45\1\212\1\u0134\2\212\30\u0134"+
    "\1\212\11\207\1\u0135\3\207\1\u0135\1\0\1\207\1\u0135"+
    "\2\207\30\u0135\1\207\11\212\1\u0136\3\212\1\u0136\1\45"+
    "\1\212\1\u0136\2\212\30\u0136\1\212\11\207\1\u0137\3\207"+
    "\1\u0137\1\0\1\207\1\u0137\2\207\30\u0137\1\207\11\212"+
    "\1\u0138\3\212\1\u0138\1\45\1\212\1\u0138\2\212\30\u0138"+
    "\1\212\11\207\1\u0139\3\207\1\u0139\1\0\1\207\1\u0139"+
    "\2\207\30\u0139\1\207\11\212\1\u013a\3\212\1\u013a\1\45"+
    "\1\212\1\u013a\2\212\30\u013a\1\212\11\207\1\u013b\3\207"+
    "\1\u013b\1\0\1\207\1\u013b\2\207\30\u013b\1\207\11\212"+
    "\1\u013c\3\212\1\u013c\1\45\1\212\1\u013c\2\212\30\u013c"+
    "\1\212\11\207\1\u013d\3\207\1\u013d\1\0\1\207\1\u013d"+
    "\2\207\30\u013d\1\207\11\212\1\u013e\3\212\1\u013e\1\45"+
    "\1\212\1\u013e\2\212\30\u013e\1\212\11\207\1\u013f\3\207"+
    "\1\u013f\1\0\1\207\1\u013f\2\207\30\u013f\1\207\11\212"+
    "\1\u0140\3\212\1\u0140\1\45\1\212\1\u0140\2\212\30\u0140"+
    "\1\212\11\207\1\u0141\3\207\1\u0141\1\0\1\207\1\u0141"+
    "\2\207\30\u0141\1\207\11\212\1\u0142\3\212\1\u0142\1\45"+
    "\1\212\1\u0142\2\212\30\u0142\1\212\11\207\1\u0143\3\207"+
    "\1\u0143\1\0\1\207\1\u0143\2\207\30\u0143\1\207\11\212"+
    "\1\u0144\3\212\1\u0144\1\45\1\212\1\u0144\2\212\30\u0144"+
    "\1\212\11\207\1\u0145\3\207\1\u0145\1\0\1\207\1\u0145"+
    "\2\207\30\u0145\1\207\11\212\1\u0146\3\212\1\u0146\1\45"+
    "\1\212\1\u0146\2\212\30\u0146\1\212\11\207\1\u0147\3\207"+
    "\1\u0147\1\0\1\207\1\u0147\2\207\30\u0147\1\207\11\212"+
    "\1\u0148\3\212\1\u0148\1\45\1\212\1\u0148\2\212\30\u0148"+
    "\1\212\11\207\1\u0149\3\207\1\u0149\1\0\1\207\1\u0149"+
    "\2\207\30\u0149\1\207\11\212\1\u014a\3\212\1\u014a\1\45"+
    "\1\212\1\u014a\2\212\30\u014a\1\212\11\207\1\u014b\3\207"+
    "\1\u014b\1\0\1\207\1\u014b\2\207\30\u014b\1\207\11\212"+
    "\1\u014c\3\212\1\u014c\1\45\1\212\1\u014c\2\212\30\u014c"+
    "\1\212\11\207\1\u014d\3\207\1\u014d\1\0\1\207\1\u014d"+
    "\2\207\30\u014d\1\207\11\212\1\u014e\3\212\1\u014e\1\45"+
    "\1\212\1\u014e\2\212\30\u014e\1\212\11\207\1\u014f\3\207"+
    "\1\u014f\1\0\1\207\1\u014f\2\207\30\u014f\1\207\11\212"+
    "\1\u0150\3\212\1\u0150\1\45\1\212\1\u0150\2\212\30\u0150"+
    "\1\212\11\207\1\u0151\3\207\1\u0151\1\0\1\207\1\u0151"+
    "\2\207\30\u0151\1\207\11\212\1\u0152\3\212\1\u0152\1\45"+
    "\1\212\1\u0152\2\212\30\u0152\1\212\11\207\1\u0153\3\207"+
    "\1\u0153\1\0\1\207\1\u0153\2\207\30\u0153\1\207\11\212"+
    "\1\u0154\3\212\1\u0154\1\45\1\212\1\u0154\2\212\30\u0154"+
    "\1\212\11\207\1\u0155\3\207\1\u0155\1\0\1\207\1\u0155"+
    "\2\207\30\u0155\1\207\11\212\1\u0156\3\212\1\u0156\1\45"+
    "\1\212\1\u0156\2\212\30\u0156\1\212\11\207\1\u0157\3\207"+
    "\1\u0157\1\0\1\207\1\u0157\2\207\30\u0157\1\207\11\212"+
    "\1\u0158\3\212\1\u0158\1\45\1\212\1\u0158\2\212\30\u0158"+
    "\1\212\11\207\1\u0159\3\207\1\u0159\1\0\1\207\1\u0159"+
    "\2\207\30\u0159\1\207\11\212\1\u015a\3\212\1\u015a\1\45"+
    "\1\212\1\u015a\2\212\30\u015a\1\212\11\207\1\u015b\3\207"+
    "\1\u015b\1\0\1\207\1\u015b\2\207\30\u015b\1\207\11\212"+
    "\1\u015c\3\212\1\u015c\1\45\1\212\1\u015c\2\212\30\u015c"+
    "\1\212\11\207\1\u015d\3\207\1\u015d\1\0\1\207\1\u015d"+
    "\2\207\30\u015d\1\207\11\212\1\u015e\3\212\1\u015e\1\45"+
    "\1\212\1\u015e\2\212\30\u015e\1\212\11\207\1\u015f\3\207"+
    "\1\u015f\1\0\1\207\1\u015f\2\207\30\u015f\1\207\11\212"+
    "\1\u0160\3\212\1\u0160\1\45\1\212\1\u0160\2\212\30\u0160"+
    "\1\212\11\207\1\u0161\3\207\1\u0161\1\0\1\207\1\u0161"+
    "\2\207\30\u0161\1\207\11\212\1\u0162\3\212\1\u0162\1\45"+
    "\1\212\1\u0162\2\212\30\u0162\1\212\11\207\1\u0163\3\207"+
    "\1\u0163\1\0\1\207\1\u0163\2\207\30\u0163\1\207\11\212"+
    "\1\u0164\3\212\1\u0164\1\45\1\212\1\u0164\2\212\30\u0164"+
    "\1\212\11\207\1\u0165\3\207\1\u0165\1\0\1\207\1\u0165"+
    "\2\207\30\u0165\1\207\11\212\1\u0166\3\212\1\u0166\1\45"+
    "\1\212\1\u0166\2\212\30\u0166\1\212\11\207\1\u0167\3\207"+
    "\1\u0167\1\0\1\207\1\u0167\2\207\30\u0167\1\207\11\212"+
    "\1\u0168\3\212\1\u0168\1\45\1\212\1\u0168\2\212\30\u0168"+
    "\1\212\11\207\1\u0169\3\207\1\u0169\1\0\1\207\1\u0169"+
    "\2\207\30\u0169\1\207\11\212\1\u016a\3\212\1\u016a\1\45"+
    "\1\212\1\u016a\2\212\30\u016a\1\212\11\207\1\u016b\3\207"+
    "\1\u016b\1\0\1\207\1\u016b\2\207\30\u016b\1\207\11\212"+
    "\1\u016c\3\212\1\u016c\1\45\1\212\1\u016c\2\212\30\u016c"+
    "\1\212\11\207\1\u016d\3\207\1\u016d\1\0\1\207\1\u016d"+
    "\2\207\30\u016d\1\207\11\212\1\u016e\3\212\1\u016e\1\45"+
    "\1\212\1\u016e\2\212\30\u016e\1\212\11\207\1\u016f\3\207"+
    "\1\u016f\1\0\1\207\1\u016f\2\207\30\u016f\1\207\11\212"+
    "\1\u0170\3\212\1\u0170\1\45\1\212\1\u0170\2\212\30\u0170"+
    "\1\212\11\207\1\u0171\3\207\1\u0171\1\0\1\207\1\u0171"+
    "\2\207\30\u0171\1\207\11\212\1\u0172\3\212\1\u0172\1\45"+
    "\1\212\1\u0172\2\212\30\u0172\1\212\11\207\1\u0173\3\207"+
    "\1\u0173\1\0\1\207\1\u0173\2\207\30\u0173\1\207\11\212"+
    "\1\u0174\3\212\1\u0174\1\45\1\212\1\u0174\2\212\30\u0174"+
    "\1\212\11\207\1\u0175\3\207\1\u0175\1\0\1\207\1\u0175"+
    "\2\207\30\u0175\1\207\11\212\1\u0176\3\212\1\u0176\1\45"+
    "\1\212\1\u0176\2\212\30\u0176\1\212\11\207\1\u0177\3\207"+
    "\1\u0177\1\0\1\207\1\u0177\2\207\30\u0177\1\207\11\212"+
    "\1\u0178\3\212\1\u0178\1\45\1\212\1\u0178\2\212\30\u0178"+
    "\1\212\11\207\1\u0179\3\207\1\u0179\1\0\1\207\1\u0179"+
    "\2\207\30\u0179\1\207\11\212\1\u017a\3\212\1\u017a\1\45"+
    "\1\212\1\u017a\2\212\30\u017a\1\212\11\207\1\u017b\3\207"+
    "\1\u017b\1\0\1\207\1\u017b\2\207\30\u017b\1\207\11\212"+
    "\1\u017c\3\212\1\u017c\1\45\1\212\1\u017c\2\212\30\u017c"+
    "\1\212\11\207\1\u017d\3\207\1\u017d\1\0\1\207\1\u017d"+
    "\2\207\30\u017d\1\207\11\212\1\u017e\3\212\1\u017e\1\45"+
    "\1\212\1\u017e\2\212\30\u017e\1\212\11\207\1\u017f\3\207"+
    "\1\u017f\1\0\1\207\1\u017f\2\207\30\u017f\1\207\11\212"+
    "\1\u0180\3\212\1\u0180\1\45\1\212\1\u0180\2\212\30\u0180"+
    "\1\212\11\207\1\u0181\3\207\1\u0181\1\0\1\207\1\u0181"+
    "\2\207\30\u0181\1\207\11\212\1\u0182\3\212\1\u0182\1\45"+
    "\1\212\1\u0182\2\212\30\u0182\1\212\11\207\1\u0183\3\207"+
    "\1\u0183\1\0\1\207\1\u0183\2\207\30\u0183\1\207\11\212"+
    "\1\u0184\3\212\1\u0184\1\45\1\212\1\u0184\2\212\30\u0184"+
    "\1\212\11\207\1\u0185\3\207\1\u0185\1\0\1\207\1\u0185"+
    "\2\207\30\u0185\1\207\11\212\1\u0186\3\212\1\u0186\1\45"+
    "\1\212\1\u0186\2\212\30\u0186\1\212\11\207\1\u0187\3\207"+
    "\1\u0187\1\0\1\207\1\u0187\2\207\30\u0187\1\207\11\212"+
    "\1\u0188\3\212\1\u0188\1\45\1\212\1\u0188\2\212\30\u0188"+
    "\1\212\11\207\1\u0189\3\207\1\u0189\1\0\1\207\1\u0189"+
    "\2\207\30\u0189\1\207\11\212\1\u018a\3\212\1\u018a\1\45"+
    "\1\212\1\u018a\2\212\30\u018a\1\212\11\207\1\u018b\3\207"+
    "\1\u018b\1\0\1\207\1\u018b\2\207\30\u018b\1\207\11\212"+
    "\1\u018c\3\212\1\u018c\1\45\1\212\1\u018c\2\212\30\u018c"+
    "\1\212\11\207\1\u018d\3\207\1\u018d\1\0\1\207\1\u018d"+
    "\2\207\30\u018d\1\207\11\212\1\u018e\3\212\1\u018e\1\45"+
    "\1\212\1\u018e\2\212\30\u018e\1\212\11\207\1\u018f\3\207"+
    "\1\u018f\1\0\1\207\1\u018f\2\207\30\u018f\1\207\11\212"+
    "\1\u0190\3\212\1\u0190\1\45\1\212\1\u0190\2\212\30\u0190"+
    "\1\212\11\207\1\u0191\3\207\1\u0191\1\0\1\207\1\u0191"+
    "\2\207\30\u0191\1\207\11\212\1\u0192\3\212\1\u0192\1\45"+
    "\1\212\1\u0192\2\212\30\u0192\1\212\11\207\1\u0193\3\207"+
    "\1\u0193\1\0\1\207\1\u0193\2\207\30\u0193\1\207\11\212"+
    "\1\u0194\3\212\1\u0194\1\45\1\212\1\u0194\2\212\30\u0194"+
    "\1\212\11\207\1\u0195\3\207\1\u0195\1\0\1\207\1\u0195"+
    "\2\207\30\u0195\1\207\11\212\1\u0196\3\212\1\u0196\1\45"+
    "\1\212\1\u0196\2\212\30\u0196\1\212\11\207\1\u0197\3\207"+
    "\1\u0197\1\0\1\207\1\u0197\2\207\30\u0197\1\207\11\212"+
    "\1\u0198\3\212\1\u0198\1\45\1\212\1\u0198\2\212\30\u0198"+
    "\1\212\11\207\1\u0199\3\207\1\u0199\1\0\1\207\1\u0199"+
    "\2\207\30\u0199\1\207\11\212\1\u019a\3\212\1\u019a\1\45"+
    "\1\212\1\u019a\2\212\30\u019a\1\212\11\207\1\u019b\3\207"+
    "\1\u019b\1\0\1\207\1\u019b\2\207\30\u019b\1\207\11\212"+
    "\1\u019c\3\212\1\u019c\1\45\1\212\1\u019c\2\212\30\u019c"+
    "\1\212\11\207\1\u019d\3\207\1\u019d\1\0\1\207\1\u019d"+
    "\2\207\30\u019d\1\207\11\212\1\u019e\3\212\1\u019e\1\45"+
    "\1\212\1\u019e\2\212\30\u019e\1\212\11\207\1\u019f\3\207"+
    "\1\u019f\1\0\1\207\1\u019f\2\207\30\u019f\1\207\11\212"+
    "\1\u01a0\3\212\1\u01a0\1\45\1\212\1\u01a0\2\212\30\u01a0"+
    "\1\212\11\207\1\u01a1\3\207\1\u01a1\1\0\1\207\1\u01a1"+
    "\2\207\30\u01a1\1\207\11\212\1\u01a2\3\212\1\u01a2\1\45"+
    "\1\212\1\u01a2\2\212\30\u01a2\1\212\11\207\1\u01a3\3\207"+
    "\1\u01a3\1\0\1\207\1\u01a3\2\207\30\u01a3\1\207\11\212"+
    "\1\u01a4\3\212\1\u01a4\1\45\1\212\1\u01a4\2\212\30\u01a4"+
    "\1\212\11\207\1\u01a5\3\207\1\u01a5\1\0\1\207\1\u01a5"+
    "\2\207\30\u01a5\1\207\11\212\1\u01a6\3\212\1\u01a6\1\45"+
    "\1\212\1\u01a6\2\212\30\u01a6\1\212\11\207\1\u01a7\3\207"+
    "\1\u01a7\1\0\1\207\1\u01a7\2\207\30\u01a7\1\207\11\212"+
    "\1\u01a8\3\212\1\u01a8\1\45\1\212\1\u01a8\2\212\30\u01a8"+
    "\1\212\11\207\1\u01a9\3\207\1\u01a9\1\0\1\207\1\u01a9"+
    "\2\207\30\u01a9\1\207\11\212\1\u01aa\3\212\1\u01aa\1\45"+
    "\1\212\1\u01aa\2\212\30\u01aa\1\212\11\207\1\u01ab\3\207"+
    "\1\u01ab\1\0\1\207\1\u01ab\2\207\30\u01ab\1\207\11\212"+
    "\1\u01ac\3\212\1\u01ac\1\45\1\212\1\u01ac\2\212\30\u01ac"+
    "\1\212\11\207\1\u01ad\3\207\1\u01ad\1\0\1\207\1\u01ad"+
    "\2\207\30\u01ad\1\207\11\212\1\u01ae\3\212\1\u01ae\1\45"+
    "\1\212\1\u01ae\2\212\30\u01ae\1\212\11\207\1\u01af\3\207"+
    "\1\u01af\1\0\1\207\1\u01af\2\207\30\u01af\1\207\11\212"+
    "\1\u01b0\3\212\1\u01b0\1\45\1\212\1\u01b0\2\212\30\u01b0"+
    "\1\212\11\207\1\u01b1\3\207\1\u01b1\1\0\1\207\1\u01b1"+
    "\2\207\30\u01b1\1\207\11\212\1\u01b2\3\212\1\u01b2\1\45"+
    "\1\212\1\u01b2\2\212\30\u01b2\1\212\11\207\1\u01b3\3\207"+
    "\1\u01b3\1\0\1\207\1\u01b3\2\207\30\u01b3\1\207\11\212"+
    "\1\u01b4\3\212\1\u01b4\1\45\1\212\1\u01b4\2\212\30\u01b4"+
    "\1\212\11\207\1\u01b5\3\207\1\u01b5\1\0\1\207\1\u01b5"+
    "\2\207\30\u01b5\1\207\11\212\1\u01b6\3\212\1\u01b6\1\45"+
    "\1\212\1\u01b6\2\212\30\u01b6\1\212\11\207\1\u01b7\3\207"+
    "\1\u01b7\1\0\1\207\1\u01b7\2\207\30\u01b7\1\207\11\212"+
    "\1\u01b8\3\212\1\u01b8\1\45\1\212\1\u01b8\2\212\30\u01b8"+
    "\1\212\11\207\1\u01b9\3\207\1\u01b9\1\0\1\207\1\u01b9"+
    "\2\207\30\u01b9\1\207\11\212\1\u01ba\3\212\1\u01ba\1\45"+
    "\1\212\1\u01ba\2\212\30\u01ba\1\212\11\207\1\u01bb\3\207"+
    "\1\u01bb\1\0\1\207\1\u01bb\2\207\30\u01bb\1\207\11\212"+
    "\1\u01bc\3\212\1\u01bc\1\45\1\212\1\u01bc\2\212\30\u01bc"+
    "\1\212\11\207\1\u01bd\3\207\1\u01bd\1\0\1\207\1\u01bd"+
    "\2\207\30\u01bd\1\207\11\212\1\u01be\3\212\1\u01be\1\45"+
    "\1\212\1\u01be\2\212\30\u01be\1\212\11\207\1\u01bf\3\207"+
    "\1\u01bf\1\0\1\207\1\u01bf\2\207\30\u01bf\1\207\11\212"+
    "\1\u01c0\3\212\1\u01c0\1\45\1\212\1\u01c0\2\212\30\u01c0"+
    "\1\212\11\207\1\u01c1\3\207\1\u01c1\1\0\1\207\1\u01c1"+
    "\2\207\30\u01c1\1\207\11\212\1\u01c2\3\212\1\u01c2\1\45"+
    "\1\212\1\u01c2\2\212\30\u01c2\1\212\11\207\1\u01c3\3\207"+
    "\1\u01c3\1\0\1\207\1\u01c3\2\207\30\u01c3\1\207\11\212"+
    "\1\u01c4\3\212\1\u01c4\1\45\1\212\1\u01c4\2\212\30\u01c4"+
    "\1\212\11\207\1\u01c5\3\207\1\u01c5\1\0\1\207\1\u01c5"+
    "\2\207\30\u01c5\1\207\11\212\1\u01c6\3\212\1\u01c6\1\45"+
    "\1\212\1\u01c6\2\212\30\u01c6\1\212\11\207\1\u01c7\3\207"+
    "\1\u01c7\1\0\1\207\1\u01c7\2\207\30\u01c7\1\207\11\212"+
    "\1\u01c8\3\212\1\u01c8\1\45\1\212\1\u01c8\2\212\30\u01c8"+
    "\1\212\11\207\1\u01c9\3\207\1\u01c9\1\0\1\207\1\u01c9"+
    "\2\207\30\u01c9\1\207\11\212\1\u01ca\3\212\1\u01ca\1\45"+
    "\1\212\1\u01ca\2\212\30\u01ca\1\212\11\207\1\u01cb\3\207"+
    "\1\u01cb\1\0\1\207\1\u01cb\2\207\30\u01cb\1\207\11\212"+
    "\1\u01cc\3\212\1\u01cc\1\45\1\212\1\u01cc\2\212\30\u01cc"+
    "\1\212\11\207\1\u01cd\3\207\1\u01cd\1\0\1\207\1\u01cd"+
    "\2\207\30\u01cd\1\207\11\212\1\u01ce\3\212\1\u01ce\1\45"+
    "\1\212\1\u01ce\2\212\30\u01ce\1\212\11\207\1\u01cf\3\207"+
    "\1\u01cf\1\0\1\207\1\u01cf\2\207\30\u01cf\1\207\11\212"+
    "\1\u01d0\3\212\1\u01d0\1\45\1\212\1\u01d0\2\212\30\u01d0"+
    "\1\212\11\207\1\u01d1\3\207\1\u01d1\1\0\1\207\1\u01d1"+
    "\2\207\30\u01d1\1\207\11\212\1\u01d2\3\212\1\u01d2\1\45"+
    "\1\212\1\u01d2\2\212\30\u01d2\1\212\11\207\1\u01d3\3\207"+
    "\1\u01d3\1\0\1\207\1\u01d3\2\207\30\u01d3\1\207\11\212"+
    "\1\u01d4\3\212\1\u01d4\1\45\1\212\1\u01d4\2\212\30\u01d4"+
    "\1\212\16\207\1\0\35\207\16\212\1\45\35\212";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\37\1\2\0\1\1\2\0\1\1\1\0\1\1"+
    "\4\0\1\11\1\1\5\0\1\1\7\0\4\1\4\0"+
    "\1\1\24\0\1\11\1\1\3\0\2\1\1\0\3\1"+
    "\7\0\1\1\3\0\1\1\10\0\1\1\2\0\1\1"+
    "\4\0\1\1\2\0\1\1\2\0\1\1\1\11\5\1"+
    "\1\0\u0147\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[468];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private Symbol token(int type, Object value)
{
    return new Symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 352) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter inválido " + yytext());
            }
          case 60: break;
          case 2: 
            { /*Omitir el espacio blanco*/
            }
          case 61: break;
          case 3: 
            { return token(sym.ENTERO, yytext());
            }
          case 62: break;
          case 4: 
            { return token(sym.SUMA, yytext());
            }
          case 63: break;
          case 5: 
            { return token(sym.COMMENT, yytext());
            }
          case 64: break;
          case 6: 
            { return token(sym.STRING_C, yytext());
            }
          case 65: break;
          case 7: 
            { return token(sym.CHARACTER, yytext());
            }
          case 66: break;
          case 8: 
            { return token(sym.DO, yytext());
            }
          case 67: break;
          case 9: 
            { return token(sym.IN, yytext());
            }
          case 68: break;
          case 10: 
            { return token(sym.IF, yytext());
            }
          case 69: break;
          case 11: 
            { return token(sym.OR, yytext());
            }
          case 70: break;
          case 12: 
            { return token(sym.OF, yytext());
            }
          case 71: break;
          case 13: 
            { return token(sym.TO, yytext());
            }
          case 72: break;
          case 14: 
            { return token(sym.FLOTANTE, yytext());
            }
          case 73: break;
          case 15: 
            { return token(sym.IF,yytext());
            }
          case 74: break;
          case 16: 
            { return token(sym.NIL, yytext());
            }
          case 75: break;
          case 17: 
            { return token(sym.NOT, yytext());
            }
          case 76: break;
          case 18: 
            { return token(sym.DIV, yytext());
            }
          case 77: break;
          case 19: 
            { return token(sym.END, yytext());
            }
          case 78: break;
          case 20: 
            { return token(sym.INT, yytext());
            }
          case 79: break;
          case 21: 
            { return token(sym.SET, yytext());
            }
          case 80: break;
          case 22: 
            { return token(sym.VAR, yytext());
            }
          case 81: break;
          case 23: 
            { return token(sym.FOR, yytext());
            }
          case 82: break;
          case 24: 
            { return token(sym.MOD, yytext());
            }
          case 83: break;
          case 25: 
            { return token(sym.XOR, yytext());
            }
          case 84: break;
          case 26: 
            { return token(sym.ID, yytext());
            }
          case 85: break;
          case 27: 
            { return token(sym.NOTA_CIENTIFICA, yytext());
            }
          case 86: break;
          case 28: 
            { return token(sym.READ, yytext());
            }
          case 87: break;
          case 29: 
            { return token(sym.REAL, yytext());
            }
          case 88: break;
          case 30: 
            { return token(sym.BYTE, yytext());
            }
          case 89: break;
          case 31: 
            { return token(sym.ELSE, yytext());
            }
          case 90: break;
          case 32: 
            { return token(sym.GOTO, yytext());
            }
          case 91: break;
          case 33: 
            { return token(sym.TRUE, yytext());
            }
          case 92: break;
          case 34: 
            { return token(sym.TYPE, yytext());
            }
          case 93: break;
          case 35: 
            { return token(sym.THEN, yytext());
            }
          case 94: break;
          case 36: 
            { return token(sym.CASE, yytext());
            }
          case 95: break;
          case 37: 
            { return token(sym.CHAR, yytext());
            }
          case 96: break;
          case 38: 
            { return token(sym.WITH, yytext());
            }
          case 97: break;
          case 39: 
            { return token(sym.ARRAY, yytext());
            }
          case 98: break;
          case 40: 
            { return token(sym.BEGIN, yytext());
            }
          case 99: break;
          case 41: 
            { return token(sym.LABEL, yytext());
            }
          case 100: break;
          case 42: 
            { return token(sym.CONST, yytext());
            }
          case 101: break;
          case 43: 
            { return token(sym.WRITE, yytext());
            }
          case 102: break;
          case 44: 
            { return token(sym.WHILE, yytext());
            }
          case 103: break;
          case 45: 
            { return token(sym.FALSE, yytext());
            }
          case 104: break;
          case 46: 
            { return token(sym.UNTIL, yytext());
            }
          case 105: break;
          case 47: 
            { return token(sym.DOWNTO, yytext());
            }
          case 106: break;
          case 48: 
            { return token(sym.RECORD, yytext());
            }
          case 107: break;
          case 49: 
            { return token(sym.REPEAT, yytext());
            }
          case 108: break;
          case 50: 
            { return token(sym.INLINE, yytext());
            }
          case 109: break;
          case 51: 
            { return token(sym.STRING, yytext());
            }
          case 110: break;
          case 52: 
            { return token(sym.PACKED, yytext());
            }
          case 111: break;
          case 53: 
            { return token(sym.BOOLEAN, yytext());
            }
          case 112: break;
          case 54: 
            { return token(sym.LONGINT, yytext());
            }
          case 113: break;
          case 55: 
            { return token(sym.FORWARD, yytext());
            }
          case 114: break;
          case 56: 
            { return token(sym.PROGRAM, yytext());
            }
          case 115: break;
          case 57: 
            { return token(sym.SHORTINT, yytext());
            }
          case 116: break;
          case 58: 
            { return token(sym.FUNCTION, yytext());
            }
          case 117: break;
          case 59: 
            { return token(sym.PROCEDURE, yytext());
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
